<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Mybatis的图书管理系统</title>
    <link href="/2022/06/27/%E5%9F%BA%E4%BA%8EMybatis-JUL-Lombok-Maven%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%B8%A6%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%89/"/>
    <url>/2022/06/27/%E5%9F%BA%E4%BA%8EMybatis-JUL-Lombok-Maven%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%B8%A6%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本项目是基于Mybatis+JUL+Lombok+Maven的图书管理系统（带单元测试）</p><span id="more"></span><h2 id="项目需求："><a href="#项目需求：" class="headerlink" title="项目需求："></a>项目需求：</h2><ul><li><p><input checked="" disabled="" type="checkbox"> 在线录入学生信息和书籍信息</p></li><li><p><input checked="" disabled="" type="checkbox"> 在线录入借阅信息</p></li><li><p><input checked="" disabled="" type="checkbox"> 查询书籍信息列表</p></li><li><p><input checked="" disabled="" type="checkbox"> 查询学生信息列表</p></li><li><p><input checked="" disabled="" type="checkbox"> 查询借阅信息列表</p></li><li><p><input checked="" disabled="" type="checkbox"> 完整的日志系统</p></li><li><p><input checked="" disabled="" type="checkbox"> Maven打包项目jar并在桌面运行</p></li></ul><p>GitHub链接（附带jar包与sql文件）：</p><p><a href="https://github.com/Wahoyu/BookManageMent-Mybatis" title="https://github.com/Wahoyu/BookManageMent-Mybatis">https://github.com/Wahoyu/BookManageMent-Mybatis</a></p><h2 id="设计数据库"><a href="#设计数据库" class="headerlink" title="设计数据库"></a>设计数据库</h2><h3 id="建立数据库（book-manage）"><a href="#建立数据库（book-manage）" class="headerlink" title="建立数据库（book_manage）"></a>建立数据库（book_manage）</h3><p>字符集要修改，否则可能出现乱码</p><p><img src="/image/22.06.27/image_Hg9JN7wbuE.png"></p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>学生表（student）:</p><p><img src="/image/22.06.27/image_fMKaaMzQeu.png"></p><p>书籍表(book)</p><p><img src="/image/22.06.27/image_KWKhubcCx5.png"></p><p>书籍借阅信息(borrow)</p><p><img src="/image/22.06.27/image_MDMhkr5A_L.png"></p><h3 id="设置外键"><a href="#设置外键" class="headerlink" title="设置外键"></a>设置外键</h3><p>注意，外键设置在borrow表，可以理解为一个二维表。</p><p><img src="/image/22.06.27/image_75zEfqRmKK.png"></p><h3 id="设置删除外键的触发器"><a href="#设置删除外键的触发器" class="headerlink" title="设置删除外键的触发器"></a>设置删除外键的触发器</h3><p>注意，触发器设置在book和student表。</p><p>被设计触发器的表并不是外键表，而是进行操作的表。</p><p>我设计一个书籍信息表，设计一个学生表，设计一个学生借书表，外键存在于学生借书表（理解为二维表），触发器存在于学生表和书籍信息表（理解为一维表）。</p><p><img src="/image/22.06.27/image_4DAZskfU9L.png"></p><p>student表中触发器的命令是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> borrow <span class="hljs-keyword">where</span> sid <span class="hljs-operator">=</span> old.sid<br></code></pre></td></tr></table></figure><p>可以看到触发器中是delete,触发器本身的触发条件的定义也是delete，二者本身其实毫无关系。该语句联系到外部的”删除”，可以解释为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">在删除学生表中的信息之前，要删除借阅表中进行约束的外键，因为进行的是删除操作，所以要去old表中寻找sid<br>（从借阅表中删除你删除的sid对应的那行外键）<br></code></pre></td></tr></table></figure><p>另一侧book表同理</p><p><img src="/image/22.06.27/image_PfB65z6Sgz.png"></p><h3 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h3><p>我们写一个学生，写一本书，写一个借阅关系。</p><p><img src="/image/22.06.27/image_7TcTRYOna9.png"></p><p>发现删除学生<strong>或者</strong>书后，borrow对应的借阅行也随之删除。触发器设置成功。</p><p>下面我们实现需求1：在线录入书籍信息，学生信息。</p><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p><img src="/image/22.06.27/image__eRcHGmwtB.png"></p><h3 id="pom-xml中写入依赖"><a href="#pom-xml中写入依赖" class="headerlink" title="pom.xml中写入依赖"></a>pom.xml中写入依赖</h3><p>(Mybatis+jdbc+JUnit+Lombok)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--pom.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Lombok--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--JUnit5--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--JDBC--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>配置后进行Maven加载</p><p><img src="/image/22.06.27/image_xO50OenHIi.png"></p><p>测试</p><p><img src="/image/22.06.27/image_Z-PtXW13yn.png"></p><p>项目运行成功。</p><h2 id="IDEA连接数据库"><a href="#IDEA连接数据库" class="headerlink" title="IDEA连接数据库"></a>IDEA连接数据库</h2><p><img src="/image/22.06.27/image_WIBfnXr571.png"></p><p><img src="/image/22.06.27/image_cWtulSSW6K.png"></p><h2 id="测试Insert功能"><a href="#测试Insert功能" class="headerlink" title="测试Insert功能"></a>测试Insert功能</h2><h3 id="Mybatis配置文件mybatis-config-xml"><a href="#Mybatis配置文件mybatis-config-xml" class="headerlink" title="Mybatis配置文件mybatis-config.xml"></a>Mybatis配置文件mybatis-config.xml</h3><p>在默认的文件夹中创建mybatis文件mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>报错1：显示dtd注册</p><p>解决方法：在设置中添加<code>&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</code>到默认dtd中</p><p><img src="/image/22.06.27/image_pn-o1XjO72.png"></p><h3 id="定义实体类（Lombok）"><a href="#定义实体类（Lombok）" class="headerlink" title="定义实体类（Lombok）"></a>定义实体类（Lombok）</h3><p>student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> sid;<br>    <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">final</span> String sex;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> grade;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>Book</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-type">int</span> bid;<br>    <span class="hljs-keyword">final</span> String title;<br>    <span class="hljs-keyword">final</span> String desc;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> price;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>我们发现数据库中的enum，在实体类中我们定义的是String</p><p>数据库中的decimal,我们定义的是double</p><p>由此可见并不需要完全对应，只要能让数值进行大致对应即可。</p><h3 id="配置mybatis-xml中的mapper"><a href="#配置mybatis-xml中的mapper" class="headerlink" title="配置mybatis.xml中的mapper"></a>配置mybatis.xml中的mapper</h3><p>在mybatis-config.xml中进行配置mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book.manage.mapper.BookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>问题1：我记得有一个作用整个包,就小写的是什么来着？</p><p>答：是mybatis-config.xml中可以对实体类整个包进行默认读取，mapper.xml中可以直接使用别名以来连接接口方法和实体类进行映射关系的构造。</p><p>问题2：使用接口注解是什么实现流程？使用mapper.xml是什么操作流程？</p><p>①接口注解：用resources方法读取mybatis配置文件，可以知道mapper接口文件的位置，然后opensession相当于打开了一次会话，读取mapper相当于打开了一个映射关系合集。</p><p>②mapper配置文件：使用简单的IO方法读取mybatis配置文件。配置文件读取了mapper.xml映射规则将接口和实体类进行连接。Main调用接口，接口调用实体类按照之前设定的关系进行连接。</p><h3 id="创建接口-用注解代替mapper-xml"><a href="#创建接口-用注解代替mapper-xml" class="headerlink" title="创建接口(用注解代替mapper.xml)"></a>创建接口(用注解代替mapper.xml)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.mapper;<br><br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br>    <span class="hljs-meta">@Insert(&quot;insert into student(name,sex,grade) value(#&#123;name&#125;,#&#123;sex&#125;,#&#123;grade&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Main进行测试"><a href="#Main进行测试" class="headerlink" title="Main进行测试"></a>Main进行测试</h3><p>SqlSessionfactorybuilder(读取mybatis.xml)→factory</p><p>factory.opensession()→sqlssion</p><p>sqlssion.getmapper(mapper)→mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage;<br><br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> book.manage.mapper.BookMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.defaults.DefaultSqlSessionFactory;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>))&#123;<br>            <span class="hljs-type">BookMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(BookMapper.class);<br><br>            System.out.println(mapper.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-number">2019</span>)));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>报错2：传入数据时候，由于lombok的构造参数，默认输入的是sid,</p><p>解决办法：①删除Student中的<code>@AllArgsConstructor</code>,再插入时就会与接口编写的sql语句进行对应②在接口中形参设置为<code>Student student</code>③给实体类的变量加上final（final加了就会去找没有sid的构造函数，因为数据库字段非空，sid可以自增）</p><p>报错3:进行Insert操作的测试时，没有读取到mybatis-comfig.xml文件</p><p><img src="/image/22.06.27/image_u3xO_IuiMX.png"></p><p>原因：读取resources文件的函数用错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//错误代码</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br><br><span class="hljs-comment">//正确代码</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br><br></code></pre></td></tr></table></figure><p><code>new FileInputStream</code>读取文件时必须加上详细的文件地址，<code>Resources.getResourceAsReader</code>可以直接读取resources文件夹里面的文件</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>生效了一行</p><p><img src="/image/22.06.27/image_xUUMzIAz4e.png"></p><p>数据库结果</p><p><img src="/image/22.06.27/image_UTQ9zlBZnt.png"></p><p><img src="/image/22.06.27/image_hVsMuNA0WJ.png"></p><h3 id="插入书籍信息同理"><a href="#插入书籍信息同理" class="headerlink" title="插入书籍信息同理"></a>插入书籍信息同理</h3><p>报错：插入数据失败</p><p>解决：</p><p>①书的描述不能使用”<code>DESC</code>“作为关键字，<code>DESC</code>时数据库排序的关键字，把<code>DESC</code>换成<code>des</code>成功插入。</p><p><strong>②或者给sql语句中的desc加上单引号，变成’desc’,如果是关键字就要加上飘。</strong></p><p>主要思路：</p><p>①创建实体类</p><p>②编写Mapper.java接口</p><p>③编写Main</p><h2 id="优化sqlsession"><a href="#优化sqlsession" class="headerlink" title="优化sqlsession"></a>优化sqlsession</h2><p><em><strong>用SqlUtil创建sqlsession</strong></em></p><p>将创建sqlsession的过程单独放在一个工具类中,只需要在主函数中对mapper文件进行getmapper即可。此项目再次简化，将创建mapper的过程也放在SqlUtil过程中。</p><p>SqlSessionfactorybuilder(读取mybatis.xml)→factory</p><p>factory.opensession()→sqlssion</p><p>sqlssion.getmapper(mapper)→mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.sql;<br><br><span class="hljs-keyword">import</span> book.manage.mapper.BookMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Wahoyu* </span><br><span class="hljs-comment">/</span><br><span class="hljs-comment">public class SqlUtil &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private SqlUtil()&#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private static SqlSessionFactory factory;</span><br><span class="hljs-comment">    static &#123;</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;));</span><br><span class="hljs-comment">        &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public static void doSqlWork(Consumer&lt;BookMapper&gt; consumer)&#123;</span><br><span class="hljs-comment">        try(SqlSession sqlSession = factory.openSession(true))&#123;</span><br><span class="hljs-comment">            BookMapper bookMapper = sqlSession.getMapper(BookMapper.class);</span><br><span class="hljs-comment">            consumer.accept(bookMapper);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p>这样主函数就可以直接创建sqlsession,之间创建不同的mapper,针对mapper很多的情况非常方便。</p><h2 id="Main主菜单格式"><a href="#Main主菜单格式" class="headerlink" title="Main主菜单格式"></a>Main主菜单格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;************************* *&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;1.录入学生信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;2.录入书籍信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;输入你想要执行的操作（输入其他任意数字退出）：&quot;</span>);<br>                <span class="hljs-type">int</span> input;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    input = scanner.nextInt();<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">switch</span>(input)&#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="/image/22.06.27/image_QCS_R6b8wJ.png"></p><h2 id="代码整理一"><a href="#代码整理一" class="headerlink" title="代码整理一"></a>代码整理一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Main</span><br><span class="hljs-keyword">package</span> book.manage;<br><br><br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> book.manage.sql.SqlUtil;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;************************* *&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;1.录入学生信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;2.录入书籍信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;输入你想要执行的操作（输入其他任意数字退出）：&quot;</span>);<br>                <span class="hljs-type">int</span> input;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    input = scanner.nextInt();<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">//清理换行符</span><br>                scanner.nextLine();<br>                <span class="hljs-keyword">switch</span>(input)&#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        addStudent(scanner);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入学生名字：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入学生的性别（男/女）：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入学生的年级：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> Integer.parseInt(grade);<br><br>        <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(name,sex,g);<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addStudent(student);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SqlUtil</span><br><span class="hljs-keyword">package</span> book.manage.sql;<br><br><span class="hljs-keyword">import</span> book.manage.mapper.BookMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/*** </span><br><span class="hljs-comment"> <span class="hljs-doctag">@author</span> Wahoyu* </span><br><span class="hljs-comment">/</span><br><span class="hljs-comment">public class SqlUtil &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private SqlUtil()&#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private static SqlSessionFactory factory;</span><br><span class="hljs-comment">    static &#123;</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;));</span><br><span class="hljs-comment">        &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public static void doSqlWork(Consumer&lt;BookMapper&gt; consumer)&#123;</span><br><span class="hljs-comment">        try(SqlSession sqlSession = factory.openSession(true))&#123;</span><br><span class="hljs-comment">            BookMapper bookMapper = sqlSession.getMapper(BookMapper.class);</span><br><span class="hljs-comment">            consumer.accept(bookMapper);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Mybatisconfig.xml--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book.manage.mapper.BookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//mapper.java</span><br><span class="hljs-keyword">package</span> book.manage.mapper;<br><br><span class="hljs-keyword">import</span> book.manage.entity.Book;<br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into student(name,sex,grade) value(#&#123;name&#125;,#&#123;sex&#125;,#&#123;grade&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into book(title,`desc`,price) value(#&#123;title&#125;,#&#123;desc&#125;,#&#123;price&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from student where sid = #&#123;sid&#125;&quot;)</span><br>    Student <span class="hljs-title function_">getStudentBySid</span><span class="hljs-params">(<span class="hljs-type">int</span> sid)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select*  from book where bid = #&#123;bid&#125;&quot;)</span><br>    Book <span class="hljs-title function_">getBookByBid</span><span class="hljs-params">(<span class="hljs-type">int</span> bid)</span>;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Student</span><br><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> sid;<br>    <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">final</span> String sex;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> grade;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//book</span><br><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-type">int</span> bid;<br>    <span class="hljs-keyword">final</span> String title;<br>    <span class="hljs-keyword">final</span> String desc;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> price;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="/image/22.06.27/image_5RXbHaH6rc.png"></p><h2 id="开始配置日志系统"><a href="#开始配置日志系统" class="headerlink" title="开始配置日志系统"></a>开始配置日志系统</h2><ul><li>[x] 敏感操作进行日志输出，输出到文件</li></ul><h3 id="配置（日志配置）文件"><a href="#配置（日志配置）文件" class="headerlink" title="配置（日志配置）文件"></a>配置（日志配置）文件</h3><p>logging.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs .properties">#设置输出级别<br>#不用控制台打印，用文件打印<br>handlers= java.util.logging.FileHandler<br>.level= All<br><br>#命名输出文件<br>java.util.logging.FileHandler=console.log<br>#设置输出格式为默认<br>java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter<br><br><br></code></pre></td></tr></table></figure><h3 id="主函数配置日志"><a href="#主函数配置日志" class="headerlink" title="主函数配置日志"></a>主函数配置日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//日志配置</span><br><span class="hljs-type">LogManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> LogManager.getLogManager();<br>manager.readConfiguration(Resources.getResourceAsStream(<span class="hljs-string">&quot;logging.properties&quot;</span>));<br></code></pre></td></tr></table></figure><p>报错1：不能使用log.info（）；</p><p><img src="/image/22.06.27/image_cC-3sXLxOu.png"></p><p>解决：在Main类上添加注解@Log</p><p><img src="/image/22.06.27/image_NdME8uxuDf.png"></p><p>报错2：(.level)附近的日志配置文件书写格式错误</p><p><img src="/image/22.06.27/image_7WRS2s4tKa.png"></p><p>解决：ALL应该全部大写</p><p>报错3：输出到文件中的日志都是标签格式的</p><p><img src="/image/22.06.27/image_oCwzP3kYPV.png"></p><p>解决：单词打错，应该是handler,影响了日志文件格式的定义。</p><h3 id="让日志追加打印"><a href="#让日志追加打印" class="headerlink" title="让日志追加打印"></a>让日志追加打印</h3><p>配置logging.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs .properties">#设置输出级别<br>#不用控制台打印，用文件打印<br>handlers= java.util.logging.FileHandler<br>.level= INFO<br><br>#命名输出文件<br>java.util.logging.FileHandler.pattern=console.log<br>#设置输出格式为默认<br>java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter<br>#追加打印<br>java.util.logging.FileHandler.append=true<br><br></code></pre></td></tr></table></figure><p><img src="/image/22.06.27/image_jzDx-gKICf.png"></p><h2 id="编写学生借书操作"><a href="#编写学生借书操作" class="headerlink" title="编写学生借书操作"></a>编写学生借书操作</h2><p>1.编写菜单和提示输入界面</p><p><img src="/image/22.06.27/image_ub-6kqqtCC.png"></p><p><img src="/image/22.06.27/image_m3d-OWOWgk.png"></p><p><img src="/image/22.06.27/image_p8v0162hIq.png"></p><p>2.分析数据库表的设计</p><p>插入bid和sid即可</p><p>3.编写mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;isnert into borrow(sid,bid) values(#&#123;sid&#125;,#&#123;bid&#125;)&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(<span class="hljs-type">int</span> sid,<span class="hljs-type">int</span> bid)</span>;<br></code></pre></td></tr></table></figure><p>4.编写Main中对应创建对象的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//借书</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入书的编号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bid</span> <span class="hljs-operator">=</span> Integer.parseInt(a);<br>        System.out.print(<span class="hljs-string">&quot;请输入学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> Integer.parseInt(b);<br><br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addBorrow(sid,bid);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;添加一条借阅信息&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    <span class="hljs-keyword">try</span>&#123;addBorrow(scanner);&#125;<br>    <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        System.out.println(<span class="hljs-string">&quot;录入失败！（可能录入重复）&quot;</span>);<br>        <span class="hljs-keyword">break</span>;&#125;<br></code></pre></td></tr></table></figure><p>5.完善main</p><p>提问：为什么借阅信息不需要实体类？</p><p>解答：后面进行查询就需要实体类了，查询的时候要把数据库中的东西拿出来，放在实体类中，通过实体类进行表达。</p><p>报错：sid没有找到，mapper中输入两个数，导致sid和bid没有对应上</p><p><img src="/image/22.06.27/image_2jKuS2refE.png"></p><p>解决：加注解表示哪个对用的是哪个</p><p><img src="/image/22.06.27/image_X4fjPCTaV9.png"></p><h2 id="代码整理二"><a href="#代码整理二" class="headerlink" title="代码整理二"></a>代码整理二</h2><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage;<br><br><br><span class="hljs-keyword">import</span> book.manage.entity.Book;<br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> book.manage.sql.SqlUtil;<br><span class="hljs-keyword">import</span> lombok.extern.java.Log;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.logging.LogManager;<br><br><span class="hljs-meta">@Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            <span class="hljs-comment">//日志配置</span><br>            <span class="hljs-type">LogManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> LogManager.getLogManager();<br>            manager.readConfiguration(Resources.getResourceAsStream(<span class="hljs-string">&quot;logging.properties&quot;</span>));<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;1.录入学生信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;2.录入书籍信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;3.添加借阅信息&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;输入你想要执行的操作（输入其他任意数字退出）：&quot;</span>);<br>                <span class="hljs-type">int</span> input;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    input = scanner.nextInt();<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">//清理换行符</span><br>                scanner.nextLine();<br>                <span class="hljs-keyword">switch</span>(input)&#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        addStudent(scanner);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        addBook(scanner);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                        <span class="hljs-keyword">try</span>&#123;addBorrow(scanner);&#125;<br>                        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                            System.out.println(<span class="hljs-string">&quot;录入失败！（可能录入重复）&quot;</span>);<br>                            <span class="hljs-keyword">break</span>;&#125;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//借书</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入书的编号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bid</span> <span class="hljs-operator">=</span> Integer.parseInt(a);<br>        System.out.print(<span class="hljs-string">&quot;请输入学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> Integer.parseInt(b);<br><br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addBorrow(sid,bid);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;添加一条借阅信息&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">//插入学生</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入学生名字：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入学生的性别（男/女）：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入学生的年级：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> Integer.parseInt(grade);<br><br>        <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(name,sex,g);<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addStudent(student);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;新添加一条学生信息&quot;</span>+student);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">//插入书</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入书名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入书籍简介：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入书的价格&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">double</span> p= Double.parseDouble((price));<br><br>        <span class="hljs-comment">//创建书籍对象</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(title,desc,p);<br><br>        <span class="hljs-comment">//匿名内部类其实就是在new的时候，直接对接口或是抽象类的实现</span><br>        <span class="hljs-comment">//lambda表达式其实就是我们接口匿名实现的简化</span><br>        <span class="hljs-comment">//(传入doSqlWork方法的参数)-&gt;&#123;实现接口方法的方法体&#125;</span><br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addBook(book);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;新添加了一条书籍信息&quot;</span>+book);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>SqlUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.sql;<br><br><span class="hljs-keyword">import</span> book.manage.mapper.BookMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/*** </span><br><span class="hljs-comment"> <span class="hljs-doctag">@author</span> Wahoyu* </span><br><span class="hljs-comment">/</span><br><span class="hljs-comment">public class SqlUtil &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private SqlUtil()&#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private static SqlSessionFactory factory;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //静态代码块只执行一次，创建一次factory</span><br><span class="hljs-comment">    static &#123;</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;));</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        catch (IOException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //Consumer是lambda表达式中的一个接口</span><br><span class="hljs-comment">    public static void doSqlWork(Consumer&lt;BookMapper&gt; consumer)&#123;</span><br><span class="hljs-comment">        try(SqlSession sqlSession = factory.openSession(true))&#123;</span><br><span class="hljs-comment">            BookMapper bookMapper = sqlSession.getMapper(BookMapper.class);</span><br><span class="hljs-comment">            consumer.accept(bookMapper);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p>mapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.mapper;<br><br><span class="hljs-keyword">import</span> book.manage.entity.Book;<br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into student(name,sex,grade) value(#&#123;name&#125;,#&#123;sex&#125;,#&#123;grade&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into book(title,`desc`,price) value(#&#123;title&#125;,#&#123;desc&#125;,#&#123;price&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select*  from student where sid = #&#123;sid&#125;&quot;)</span><br>    Student <span class="hljs-title function_">getStudentBySid</span><span class="hljs-params">(<span class="hljs-type">int</span> sid)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select*  from book where bid = #&#123;bid&#125;&quot;)</span><br>    Book <span class="hljs-title function_">getBookByBid</span><span class="hljs-params">(<span class="hljs-type">int</span> bid)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into borrow(sid,bid) values(#&#123;sid&#125;,#&#123;bid&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span><span class="hljs-type">int</span> sid,<span class="hljs-meta">@Param(&quot;bid&quot;)</span><span class="hljs-type">int</span> bid)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>mybaits.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置日志管理系统--&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;NO_LOGGING&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book.manage.mapper.BookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>logging.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs .properties">#设置输出级别<br>#不用控制台打印，用文件打印<br>handlers= java.util.logging.FileHandler<br>.level= INFO<br><br>#命名输出文件<br>java.util.logging.FileHandler.pattern=console.log<br>#设置输出格式为默认<br>java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter<br>#追加打印<br>java.util.logging.FileHandler.append=true<br><br></code></pre></td></tr></table></figure><p>Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> sid;<br>    <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">final</span> String sex;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> grade;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Book</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-type">int</span> bid;<br>    <span class="hljs-keyword">final</span> String title;<br>    <span class="hljs-keyword">final</span> String desc;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> price;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="查询全部借阅信息"><a href="#查询全部借阅信息" class="headerlink" title="查询全部借阅信息"></a>查询全部借阅信息</h2><p>查询操作就需要创建实体类，封装成一个类，不然没办法查。</p><p>在接口中定义&lt;List&gt;实体类</p><p>前面的插入数据的时候可以用int 进行创建对象</p><h3 id="封装一个查询对象"><a href="#封装一个查询对象" class="headerlink" title="封装一个查询对象"></a>封装一个查询对象</h3><p>borrow实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Borrow</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <br>    <span class="hljs-comment">//做个映射</span><br>    Student student;<br>    Book book;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用TestMain进行测试"><a href="#使用TestMain进行测试" class="headerlink" title="使用TestMain进行测试"></a>使用TestMain进行测试</h3><p>好处：</p><p>①不会真正对数据库进行操作</p><p>②不会真正对日志进行改写</p><p>TestMain.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">import</span> book.manage.sql.SqlUtil;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            mapper.getBorrowList().forEach(System.out::println);<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>报错1：“sex”无法与“女”进行对应</p><p>解决方法：①给book和student都加上<code>@NoArgsConstructor</code>,去掉成员属性中的final,加上一个不带主键的构造方法。</p><p>②给borrow加上<code>@Data</code></p><p><img src="/image/22.06.27/image_mPBmimEb_3.png"></p><p>测试结束后给主方法添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBorrow</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        <span class="hljs-comment">//不输入直接显示全部</span><br>        SqlUtil.doSqlWork(mapper -&gt;&#123;<br>            mapper.getBorrowList().forEach(borrow -&gt; &#123;<br>                    System.out.println(borrow.getStudent().getName()+<span class="hljs-string">&quot; -&gt; &quot;</span>+borrow.getBook().getTitle());<br>            &#125;);<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="查询全部的书籍和学生信息"><a href="#查询全部的书籍和学生信息" class="headerlink" title="查询全部的书籍和学生信息"></a>查询全部的书籍和学生信息</h2><h3 id="编写mapper"><a href="#编写mapper" class="headerlink" title="编写mapper"></a>编写mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from student&quot;)</span><br>    List&lt;Student&gt; <span class="hljs-title function_">getStudentList</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select*  from book&quot;)</span><br>    List&lt;Book&gt; <span class="hljs-title function_">getBookList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h3 id="在TestMain中测试"><a href="#在TestMain中测试" class="headerlink" title="在TestMain中测试"></a>在TestMain中测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//三重借阅</span><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            mapper.getBorrowList().forEach(System.out::println);<br>        &#125;);<br>    &#125;<br>        <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            mapper.getStudentList().forEach(System.out::println);<br>        &#125;);<br>    &#125;<br>        <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            mapper.getBookList().forEach(System.out::println);<br>        &#125;);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>报错：在执行插入借阅关系后总是会默认打印出所有的借阅关系？</p><p>原因：因为在case3后面并没有执行finally{break;}，在没有case4的时候，case3会自动结束，但是如果有了case 4，case 3就不会结束，自动运行case4。</p><p>疑问：为什么在<code>查看所有借阅关系</code>上面要明确对应出每一个人和书籍</p><p>原因：因为借阅关系存入的时候存的是学号，但是显示出来的是姓名和书名。所以我们要通过号来查到对象，然后通过对象获取到名字。</p><h2 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h2><p>打包成jar文件</p><p>在Maven中配置打包插件 （plugin放在build-plugins标签中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.test.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JUnit5的插件也要拿过来，因为版本太新，尚未兼容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- JUnit 5 requires Surefire version 2.22.0 or higher --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行打包package</p><p><img src="/image/22.06.27/image_dB8Y1jCBCV.png"></p><p>运行jar文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs .properties">java -jar 拖动文件到此<br></code></pre></td></tr></table></figure><p>报错：无法加载主类com.test.Main</p><p>解决：属于路径错误问题。Main前面应该指定正确的路径，比如如果Main文件是<code>package book.manage;</code></p><p>那么路径就应该写<code>book.manege.Main</code></p><p><img src="/image/22.06.27/image_rj1G3P14gB.png"></p><p><img src="/image/22.06.27/image_stLIXM_c1v.png"></p><h3 id="关于运行jar包的日志文件生成"><a href="#关于运行jar包的日志文件生成" class="headerlink" title="关于运行jar包的日志文件生成"></a>关于运行jar包的日志文件生成</h3><p>windows默认在C：\Users\用户名\</p><p><img src="/image/22.06.27/image_ayDo7ZA37A.png"></p><h2 id="后续相关优化"><a href="#后续相关优化" class="headerlink" title="后续相关优化"></a>后续相关优化</h2><p>1.改变日志生成位置</p><p>如果想改的话可以改logging.properties文件中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs .properties">#命名输出文件<br>java.util.logging.FileHandler.pattern=C\\Users\\64570\\Desktop\\console.log<br></code></pre></td></tr></table></figure><p>就会默认输出到桌面了。</p><p>2.给书籍价格加上小数点</p><p>原因：是书籍的数据库表格建立的问题，给price加上小数点就OK了</p><p><img src="/image/22.06.27/image_lxMzmRiFMP.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于反射与注解的理解与总结</title>
    <link href="/2022/06/19/%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <url>/2022/06/19/%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>反向追寻创建class对象并对class进行修改</p><span id="more"></span><h2 id="静态语言vs动态语言"><a href="#静态语言vs动态语言" class="headerlink" title="静态语言vs动态语言"></a>静态语言vs动态语言</h2><p>动态语言</p><ul><li>是一类在运行时可以改变其结构的语言：例如新的函数，对象，甚至代码可以被引进，已有的函数可以被删除或者其他结构上的变化。通俗点说就是在<strong>运行时代码可以根据某些条件改变自身结构</strong>。</li><li>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</li></ul><p>静态语言</p><ul><li><p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如 Java、C、C++。</p></li><li><p>Java不是动态语言，但是Java可以称之为 “准动态语言” 。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活。</p></li></ul><h3 id="反射的定义和作用概括"><a href="#反射的定义和作用概括" class="headerlink" title="反射的定义和作用概括"></a>反射的定义和作用概括</h3><p>反射就是把Java类中的各个成分映射成一个个的Java对象。即在运行状态中，对于任意一个类，都能够知道这个类所有的属性和方法，对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息及动态调用对象方法的功能叫Java的反射机制。</p><p>我们可以通过反射机制，获取到类的一些属性，包括类里面有哪些字段，方法，继承自哪个类，甚至还能获取到泛型！</p><p>它的权限非常高，慎重使用！</p><h2 id="类加载的机制"><a href="#类加载的机制" class="headerlink" title="类加载的机制"></a>类加载的机制</h2><p>在学习Java的反射机制之前，我们需要先了解一下类的加载机制，一个类是如何被加载和使用的：</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg3.itboth.com%2F60%2F50%2FUrUVN3.png&refer=http%3A%2F%2Fimg3.itboth.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1637635409&t=f25ea82c853619c26897ff5b4d041d5b"></p><h3 id="引出反射利用的（一一对应的）Class文件"><a href="#引出反射利用的（一一对应的）Class文件" class="headerlink" title="引出反射利用的（一一对应的）Class文件"></a>引出反射利用的（一一对应的）Class文件</h3><p>在Java程序启动时，JVM会将一部分类（class文件）先加载（并不是所有的类都会在一开始加载），通过ClassLoader将类加载，在加载过程中，会将类的信息提取出来（存放在元空间中，JDK1.8之前存放在永久代），同时也会生成一个Class对象存放在内存（堆内存），注意此Class对象只会存在一个，与加载的类唯一对应！</p><h3 id="手写String引出双亲委派机制"><a href="#手写String引出双亲委派机制" class="headerlink" title="手写String引出双亲委派机制"></a>手写String引出双亲委派机制</h3><p><strong>思考：</strong> 既然说和与加载的类唯一对应，那如果我们手动创建一个与JDK包名一样，同时类名也保持一致，那么JVM会加载这个类吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> &#123;    <span class="hljs-comment">//JDK提供的String类也是</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我姓🐴，我叫🐴nb&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，会出现以下报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br></code></pre></td></tr></table></figure><p>但是我们明明在自己写的String类中定义了main方法啊，为什么会找不到此方法呢？实际上这是ClassLoader的<code>双亲委派机制</code>在保护Java程序的正常运行：</p><h3 id="类加载流程："><a href="#类加载流程：" class="headerlink" title="类加载流程："></a>类加载流程：</h3><p>①已经加载过的会在out里面</p><p>②AppClassLoader是自己写的类，ExtClassLoader是拓展类，BootstrapClassLoader是jdk默认自带的类.(String在Boot就被拦下来了)</p><p><img src="https://img-blog.csdnimg.cn/20201217213314510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGV5YW5iYW8=,size_16,color_FFFFFF,t_70"></p><p>实际上我们的类最开始是由BootstarpClassLoader进行加载，BootstarpClassLoader用于加载JDK提供的类，而我们自己编写的类实际上是AppClassLoader，只有BootstarpClassLoader都没有加载的类，才会让AppClassLoader来加载，因此我们自己编写的同名包同名类不会被加载，而<strong>实际要去启动的是真正的String类</strong>，也就自然找不到<code>main</code>方法了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Main.class.getClassLoader());   <span class="hljs-comment">//查看当前类的类加载器</span><br>        System.out.println(Main.class.getClassLoader().getParent());  <span class="hljs-comment">//父加载器</span><br>        System.out.println(Main.class.getClassLoader().getParent().getParent());  <span class="hljs-comment">//爷爷加载器</span><br>        System.out.println(String.class.getClassLoader());   <span class="hljs-comment">//String类的加载器</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于BootstarpClassLoader是C++编写的，我们在Java中是获取不到的。</p><h2 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h2><h3 id="获取每个类对应的class"><a href="#获取每个类对应的class" class="headerlink" title="获取每个类对应的class"></a>获取每个类对应的class</h3><p>通过前面，我们了解了类的加载，同时会提取一个类的信息生成Class对象存放在内存中，而反射机制其实就是利用这些存放的类信息，来获取类的信息和操作类。那么如何<strong>获取到每个类对应的Class对象</strong>呢，我们可以通过以下方式（class泛型类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br><span class="hljs-comment">//（1）使用class关键字，通过类名获取对应的class对象</span><br>    Class&lt;String&gt; clazz = String.class;<br>    Class&lt;类名&gt; clazz = 类名.class;<br>    <br><span class="hljs-comment">//（2）使用Class类的静态方法 forName()。通过包名.类名获取对应的class对象</span><br>    <span class="hljs-comment">//注意返回值是Class&lt;?&gt;  通配符</span><br>    Class&lt;?&gt; clazz2 = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>    Class&lt;?&gt; clazz2 = Class.forName(<span class="hljs-string">&quot;位置.类名&quot;</span>);<br>    <br><span class="hljs-comment">//（3）通过实例对象获取对应的class对象</span><br>    Class&lt;?&gt; clazz3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;cpdd&quot;</span>).getClass();  <br>    Class&lt;?&gt; clazz3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;cpdd&quot;</span>).getClass();<br>&#125;<br></code></pre></td></tr></table></figure><p>?&gt; clazz3 &#x3D; new String(“cpdd”).getClass();<br>Class&lt;?&gt; clazz3 &#x3D; new String(“cpdd”).getClass();<br>}</p><p>注意Class类也是一个泛型类，只有第一种方法，能够直接获取到对应类型的Class对象，而以下两种方法使用了<code>?</code>通配符作为返回值，但是实际上都和第一个返回的是同一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;String&gt; clazz = String.class;   <span class="hljs-comment">//使用class关键字，通过类名获取</span><br>Class&lt;?&gt; clazz2 = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);   <span class="hljs-comment">//使用Class类静态方法forName()，通过包名.类名获取，注意返回值是Class&lt;?&gt;</span><br>Class&lt;?&gt; clazz3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;cpdd&quot;</span>).getClass();<br><br>System.out.println(clazz == clazz2);<br>System.out.println(clazz == clazz3);<br></code></pre></td></tr></table></figure><h3 id="基本类型的class对象本质上是包装类（表现为int）"><a href="#基本类型的class对象本质上是包装类（表现为int）" class="headerlink" title="基本类型的class对象本质上是包装类（表现为int）"></a>基本类型的class对象本质上是包装类（表现为int）</h3><p>通过比较，验证了我们一开始的结论，在<strong>JVM中每个类始终只存在一个Class对象</strong>，无论通过什么方法获取，都是一样的。现在我们再来看看这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Class&lt;?&gt; clazz = <span class="hljs-type">int</span>.class;   <span class="hljs-comment">//基本数据类型有Class对象吗？</span><br>    System.out.println(clazz);<span class="hljs-comment">//int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>迷了，不是每个类才有Class对象吗，基本数据类型又不是类，这也行吗？实际上，基本数据类型也有对应的Class对象（反射操作可能需要用到），而且我们不仅可以通过class关键字获取，其实<strong>本质上是定义在对应的包装类</strong>中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> Class&#125; instance representing the primitive type</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> int&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span>   JDK1.1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(<span class="hljs-string">&quot;int&quot;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Return the Virtual Machine&#x27;s Class object for the named</span><br><span class="hljs-comment"> * primitive type</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getPrimitiveClass(String name);   <span class="hljs-comment">//C++实现，并非Java定义</span><br></code></pre></td></tr></table></figure><p>每个包装类中（包括Void），都有一个获取原始类型Class方法，注意，<strong>getPrimitiveClass获取的是原始类型，并不是包装类型</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Class&lt;?&gt; clazz = <span class="hljs-type">int</span>.class;<br>    System.out.println(Integer.TYPE == <span class="hljs-type">int</span>.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过对比，我们发现实际上包装类型都有一个TYPE，其实也就是基本类型的Class，那么包装类的Class和基本类的Class一样吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(Integer.TYPE == Integer.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，<strong>包装类型的Class对象 &#x3D;&#x3D; 基本类型Class对象</strong>。数组类型也是一种类型，只是编程不可见，因此我们可以直接获取数组的Class对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Class&lt;String[]&gt; clazz = String[].class;<br>    System.out.println(clazz.getName());  <span class="hljs-comment">//获取类名称（得到的是包名+类名的完整名称）</span><br>    System.out.println(clazz.getSimpleName());<br>    System.out.println(clazz.getTypeName());<br>    System.out.println(clazz.getClassLoader());   <span class="hljs-comment">//获取它的类加载器</span><br>    System.out.println(clazz.cast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-string">&quot;10&quot;</span>)));   <span class="hljs-comment">//强制类型转换</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="再谈instanceof"><a href="#再谈instanceof" class="headerlink" title="再谈instanceof"></a>再谈instanceof</h3><p>正常情况下，我们使用instanceof进行类型比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    System.out.println(str <span class="hljs-keyword">instanceof</span> String);<br>&#125;<br></code></pre></td></tr></table></figure><p>它可以判断一个对象是否为此接口或是类的实现或是子类，而现在我们有了更多的方式去判断类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    System.out.println(str.getClass() == String.class);   <span class="hljs-comment">//直接判断是否为这个类型</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要判断是否为子类或是接口&#x2F;抽象类的实现，我们可以使用<code>asSubClass()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    i.getClass().asSubclass(Number.class);   <span class="hljs-comment">//当Integer不是Number的子类时，会产生异常</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取父类信息"><a href="#获取父类信息" class="headerlink" title="获取父类信息"></a>获取父类信息</h3><p>通过<code>getSuperclass()</code>方法，我们可以获取到父类的Class对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    System.out.println(i.getClass().getSuperclass());<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以通过<code>getGenericSuperclass()</code>获取父类的原始类型的Type：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">Type</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> i.getClass().getGenericSuperclass();<br>    System.out.println(type);<br>    System.out.println(type <span class="hljs-keyword">instanceof</span> Class);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现Type实际上是Class类的父接口，但是获取到的Type的实现并不一定是Class。</p><p>同理，我们也可以像上面这样获取父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; anInterface : i.getClass().getInterfaces()) &#123;<br>        System.out.println(anInterface.getName());<br>    &#125;<br>  <br>    <span class="hljs-keyword">for</span> (Type genericInterface : i.getClass().getGenericInterfaces()) &#123;<br>        System.out.println(genericInterface.getTypeName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="创建类对象"><a href="#创建类对象" class="headerlink" title="创建类对象"></a>创建类对象</h2><p>既然我们拿到了类的定义，那么是否可以通过Class对象来创建对象、调用方法、修改变量呢？<strong>当然是可以的</strong>，那我们首先来探讨一下如何创建一个类的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过使用<code>newInstance()</code>方法来创建对应类型的实例，返回泛型T，注意它会抛出InstantiationException和IllegalAccessException异常，那么什么情况下会出现异常呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String text)</span>&#123;<br>        <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="默认无参构造"><a href="#默认无参构造" class="headerlink" title="默认无参构造"></a>默认无参构造</h3><p>当类默认的构造方法被带参构造覆盖时，会出现InstantiationException异常，因为<code>newInstance()</code>只适用于默认无参构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取构造器，带参数构造"><a href="#获取构造器，带参数构造" class="headerlink" title="获取构造器，带参数构造"></a>获取构造器，带参数构造</h3><p>当默认无参构造的权限不是<code>public</code>时，会出现IllegalAccessException异常，表示我们无权去调用默认构造方法。在JDK9之后，不再推荐使用<code>newInstance()</code>方法了，而是使用我们接下来要介绍到的，通过<strong>获取构造器，来实例化对象</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class).newInstance(<span class="hljs-string">&quot;what&#x27;s up&quot;</span>);<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String str)</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过获取类的构造方法（构造器）来创建对象实例，会更加合理，我们可以使用**<code>getConstructor()</code>**<strong>方法来获取类的构造方法</strong>，同时我们需要向其中填入参数，也就是构造方法需要的类型，当然我们这里只演示了。那么，当访问权限不是public的时候呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class).newInstance(<span class="hljs-string">&quot;what&#x27;s up&quot;</span>);<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String str)</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，当访问权限不足时，会无法找到此构造方法，那么如何找到非public的构造方法呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;Student&gt; clazz = Student.class;<br>Constructor&lt;Student&gt; constructor = clazz.getDeclaredConstructor(String.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);   <span class="hljs-comment">//修改访问权限</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;what&#x27;s up&quot;</span>);<br>student.test();<br></code></pre></td></tr></table></figure><h3 id="超越-private-访问构造方法"><a href="#超越-private-访问构造方法" class="headerlink" title="超越(private)访问构造方法"></a>超越(private)访问构造方法</h3><p>使用<code>getDeclaredConstructor()</code>方法可以找到类中的非public构造方法，但是在使用之前，我们需要先修改访问权限，在修改访问权限之后，就可以使用非public方法了（这意味着，反射可以无视权限修饰符访问类的内容）</p><hr><h2 id="调用类的方法"><a href="#调用类的方法" class="headerlink" title="调用类的方法"></a>调用类的方法</h2><h3 id="创建对象→找到方法→调用方法"><a href="#创建对象→找到方法→调用方法" class="headerlink" title="创建对象→找到方法→调用方法"></a>创建对象→找到方法→调用方法</h3><p>我们可以通过反射来调用类的方法（本质上还是类的实例进行调用）只是利用反射机制实现了方法的调用，我们在包下创建一个新的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>+str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这次我们通过<code>forName(String)</code>来找到这个类并创建一个新的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.**newInstance**();   <span class="hljs-comment">//创建出学生对象</span><br>    <br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.**getMethod**(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//通过方法名和形参类型获取类中的方法</span><br>    <br>    method.**invoke**(instance, <span class="hljs-string">&quot;what&#x27;s up&quot;</span>);   <span class="hljs-comment">//通过Method对象的invoke方法来调用方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>调用**<code>getMethod()</code>**<strong>方法，我们可以获取到类中所有声明为public的方法</strong>，得到一个Method对象（并不是获得所有的public，该方法使用的时候需要指定“方法名”和“形参类型”）</p><p>通过Method对象的<code>invoke()</code>方法（返回值就是方法的返回值，因为这里是void，返回值为null）来调用已经获取到的方法，注意传参。</p><h3 id="对象原来的类型被模糊"><a href="#对象原来的类型被模糊" class="headerlink" title="对象原来的类型被模糊"></a>对象原来的类型被模糊</h3><p>我们发现，利用反射之后，在一个对象从构造到方法调用，没有任何一处需要引用到对象的实际类型，我们也没有导入Student类，整个过程都是反射在代替进行操作，使得整个过程被模糊了，过多的使用反射，会极大地降低后期维护性。</p><h3 id="超越private访问普通方法"><a href="#超越private访问普通方法" class="headerlink" title="超越private访问普通方法"></a>超越private访问普通方法</h3><p>同构造方法一样，当出现非public方法时，我们可以通过反射来无视权限修饰符，获取非public方法并调用，现在我们将<code>test()</code>方法的权限修饰符改为private：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.newInstance();   <span class="hljs-comment">//创建出学生对象</span><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//通过方法名和形参类型获取类中的方法</span><br>    method.setAccessible(<span class="hljs-literal">true</span>);<br><br>    method.invoke(instance, <span class="hljs-string">&quot;what&#x27;s up&quot;</span>);   <span class="hljs-comment">//通过Method对象的invoke方法来调用方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Method与类很相似"><a href="#Method与类很相似" class="headerlink" title="Method与类很相似"></a>Method与类很相似</h3><p>所以使用方法要么创建对象，要么类名.方法</p><p>Method和Constructor都和Class一样，他们存储了方法的信息，包括方法的形式参数列表，返回值，方法的名称等内容，我们可以直接<strong>通过Method对象</strong>来获取这些信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//通过方法名和形参类型获取类中的方法</span><br>    <br>    System.out.println(method.getName());   <span class="hljs-comment">//获取方法名称</span><br>    System.out.println(method.getReturnType());   <span class="hljs-comment">//获取返回值类型</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="可变参数的方法→本质数组"><a href="#可变参数的方法→本质数组" class="headerlink" title="可变参数的方法→本质数组"></a>可变参数的方法→本质数组</h3><p>当方法的参数为可变参数时，我们该如何获取方法呢？实际上，我们在之前就已经提到过，可变参数实际上就是一个数组，因此我们可以直接使用数组的class对象表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;test&quot;</span>, String[].class);<br></code></pre></td></tr></table></figure><p>反射非常强大，尤其是我们提到的越权访问，但是请一定谨慎使用，别人将某个方法设置为private一定有他的理由，如果实在是需要使用别人定义为private的方法，就必须确保这样做是安全的，在没有了解别人代码的整个过程就强行越权访问，可能会出现无法预知的错误。</p><hr><h2 id="修改类的属性"><a href="#修改类的属性" class="headerlink" title="修改类的属性"></a>修改类的属性</h2><h3 id="获取一个类的属性"><a href="#获取一个类的属性" class="headerlink" title="获取一个类的属性"></a>获取一个类的属性</h3><p>我们还可以通过反射访问一个类中定义的成员字段也可以修改一个类的对象中的成员字段值，通过<code>getField()</code>方法来获取一个类定义的指定字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;i&quot;</span>);   <span class="hljs-comment">//获取类的成员字段i</span><br>    field.set(instance, <span class="hljs-number">100</span>);   <span class="hljs-comment">//将类实例instance的成员字段i设置为100</span><br><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>);<br>    method.invoke(instance);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改属性值"><a href="#修改属性值" class="headerlink" title="修改属性值"></a>修改属性值</h3><p>在得到Field之后，我们就可以直接通过<code>set()</code>方法为某个对象，设定此属性的值，比如上面，我们就为instance对象设定值为100，当访问private字段时，同样可以按照上面的操作进行越权访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;i&quot;</span>);   <span class="hljs-comment">//获取类的成员属性：i</span><br>    field.setAccessible(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//给予改变字段属性的权限</span><br>    field.set(instance, <span class="hljs-number">100</span>);   <span class="hljs-comment">//将类实例instance的成员字段i设置为100</span><br><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-comment">//获得test方法放到method（Method实例化的对象）里面</span><br>    method.invoke(instance);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="就连final都能修改"><a href="#就连final都能修改" class="headerlink" title="就连final都能修改"></a>就连final都能修改</h3><p>现在我们已经知道，<strong>反射几乎可以把一个类的老底都给扒出来</strong>，任何属性，任何内容，都可以被反射修改，无论权限修饰符是什么，那么，如果我的字段被标记为final呢？现在在字段<code>i</code>前面添加<code>final</code>关键字，我们再来看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>这时，当字段为final时，就修改失败了！当然，通过反射可以直接将final修饰符直接去除，去除后，就可以随意修改内容了，我们来尝试修改Integer的value值</p><p>主要思想：获取成员属性之后，获取（定义该属性的字段），类似求导，对“final”进行修改,然后再退一层，对字段进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Integer.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>);<br>    <span class="hljs-comment">//获取类的成员属性：value,进行修改</span><br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">modifiersField</span> <span class="hljs-operator">=</span> Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>    <span class="hljs-comment">//这里要获取Field类的modifiers字段进行修改</span><br>    <br>    modifiersField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//更改！定义！字段权限</span><br>    modifiersField.setInt(field,field.getModifiers()&amp;~Modifier.FINAL);  <br>    <span class="hljs-comment">//去除final标记</span><br><br>    field.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//更改字段的权限</span><br>    field.set(i, <span class="hljs-number">100</span>);   <br>    <span class="hljs-comment">//强行设置值</span><br><br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射可能对原数据结构进行破坏"><a href="#反射可能对原数据结构进行破坏" class="headerlink" title="反射可能对原数据结构进行破坏"></a>反射可能对原数据结构进行破坏</h3><p>我们可以发现，反射非常暴力，就连被定义为final字段的值都能强行修改，几乎能够无视一切阻拦。我们来试试看修改一些其他的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    List&lt;String&gt; i = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> ArrayList.class.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    field.setAccessible(<span class="hljs-literal">true</span>);<br>    field.set(i, <span class="hljs-number">10</span>);<br><br>    i.add(<span class="hljs-string">&quot;测试&quot;</span>);   <span class="hljs-comment">//只添加一个元素</span><br>    System.out.println(i.size());  <span class="hljs-comment">//大小直接变成11</span><br>    i.remove(<span class="hljs-number">10</span>);   <span class="hljs-comment">//瞎移除都不带报错的，淦</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，整个ArrayList体系由于我们的反射操作，导致被破坏，因此它已经无法正常工作了！</p><p>再次强调，在进行反射操作时，必须注意是否安全，虽然拥有了创世主的能力，但是我们不能滥用，我们只能把它当做一个不得已才去使用的工具！</p><hr><h2 id="自定义ClassLoader加载类"><a href="#自定义ClassLoader加载类" class="headerlink" title="自定义ClassLoader加载类"></a>自定义ClassLoader加载类</h2><h3 id="手动-java→class"><a href="#手动-java→class" class="headerlink" title="手动.java→class"></a>手动.java→class</h3><p>我们可以自己手动将class文件加载到JVM中吗？先写好我们定义的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> String text;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(text+<span class="hljs-string">&quot; &gt; 我是测试方法！&quot;</span>+str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过javac命令，手动编译一个.class文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">nagocoler@NagodeMacBook-Pro HelloWorld % javac src/main/java/com/test/Test.java<br></code></pre></td></tr></table></figure><h3 id="自己创造一个ClassLoader"><a href="#自己创造一个ClassLoader" class="headerlink" title="自己创造一个ClassLoader"></a>自己创造一个ClassLoader</h3><p>编译后，得到一个class文件，我们把它放到根目录下，然后编写一个我们自己的ClassLoader，因为普通的ClassLoader无法加载二进制文件，因此我们编写一个自己的来让它支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个自己的ClassLoader</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span>&#123;<br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; defineClass(String name, <span class="hljs-type">byte</span>[] b)&#123;<br>        <span class="hljs-keyword">return</span> defineClass(name, b, <span class="hljs-number">0</span>, b.length);   <span class="hljs-comment">//调用protected方法，支持载入外部class文件</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">MyClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClassLoader</span>();<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;Test.class&quot;</span>);<br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[stream.available()];<br>    stream.read(bytes);<br>    Class&lt;?&gt; clazz = classLoader.defineClass(<span class="hljs-string">&quot;com.test.Test&quot;</span>, bytes);   <span class="hljs-comment">//类名必须和我们定义的保持一致</span><br>    System.out.println(clazz.getName());   <span class="hljs-comment">//成功加载外部class文件</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们就将此class文件读取并解析为Class了，现在我们就可以对此类进行操作了（注意，我们无法在代码中直接使用此类型，因为它是我们直接加载的），我们来试试看创建一个此类的对象并调用其方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//获取我们定义的test(String str)方法</span><br>    method.invoke(obj, <span class="hljs-string">&quot;哥们这瓜多少钱一斤？&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来试试看修改成员字段之后，再来调用此方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;text&quot;</span>);   <span class="hljs-comment">//获取成员变量 String text;</span><br>    field.set(obj, <span class="hljs-string">&quot;华强&quot;</span>);<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//获取我们定义的test(String str)方法</span><br>    method.invoke(obj, <span class="hljs-string">&quot;哥们这瓜多少钱一斤？&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这种方式，我们就可以实现外部加载甚至是网络加载一个类，只需要把类文件传递即可，这样就无需再将代码写在本地，而是动态进行传递，不仅可以一定程度上防止源代码被反编译（只是一定程度上，想破解你代码有的是方法），而且在更多情况下，我们还可以对byte[]进行加密，保证在传输过程中的安全性。</p><hr><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>其实我们在之前就接触到注解了，比如<code>@Override</code>表示重写父类方法（当然不加效果也是一样的，此注解在编译时会被自动丢弃）注解本质上也是一个类，只不过它的用法比较特殊。</p><p>注解可以被标注在任意地方，包括方法上、类名上、参数上、成员属性上、注解定义上等，就像注释一样，它相当于我们对某样东西的一个标记。而与注释不同的是，注解可以通过反射在运行时获取，注解也可以选择是否保留到运行时。</p><h3 id="jdk自带的注解"><a href="#jdk自带的注解" class="headerlink" title="jdk自带的注解"></a>jdk自带的注解</h3><p>JDK预设了以下注解，作用于代码：</p><ul><li>@Override - 检查（仅仅是检查，不保留到运行时）该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</li><li>@SuppressWarnings - 指示编译器去忽略注解中声明的警告（仅仅编译器阶段，不保留到运行时）</li><li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li></ul><h3 id="元注解（注解的注解）"><a href="#元注解（注解的注解）" class="headerlink" title="元注解（注解的注解）"></a>元注解（注解的注解）</h3><p>元注解是作用于注解上的注解，用于我们编写自定义的注解：</p><ul><li>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li><li>@Documented - 标记这些注解是否包含在用户文档中。</li><li>@Target - 标记这个注解应该是哪种 Java 成员。</li><li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li><li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul><p>看了这么多预设的注解，你们肯定眼花缭乱了，那我们来看看<code>@Override</code>是如何定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>该注解由<code>@Target</code>限定为只能作用于方法上，ElementType是一个枚举类型，用于表示此枚举的作用域，一个注解可以有很多个作用域。<code>@Retention</code>表示此注解的保留策略，包括三种策略，在上述中有写到，而这里定义为只在代码中。一般情况下，自定义的注解需要定义1个<code>@Retention</code>和1-n个<code>@Target</code>。</p><h3 id="自己定义一个注解"><a href="#自己定义一个注解" class="headerlink" title="自己定义一个注解"></a>自己定义一个注解</h3><p>既然了解了元注解的使用和注解的定义方式，我们就来尝试定义一个自己的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们定义一个Test注解，并将其保留到运行时，同时此注解可以作用于方法或是类上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，一个最简单的注解就被我们创建了。</p><h3 id="关于注解属性的使用"><a href="#关于注解属性的使用" class="headerlink" title="关于注解属性的使用"></a>关于注解属性的使用</h3><h4 id="自定义属性的要点"><a href="#自定义属性的要点" class="headerlink" title="自定义属性的要点"></a>自定义属性的要点</h4><p>我们还可以在注解中定义<strong>一些属性</strong>，注解的属性也叫做成员变量，注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="默认value可省略"><a href="#默认value可省略" class="headerlink" title="默认value可省略"></a>默认value可省略</h4><p>默认只有一个属性时，我们可以将其名字设定为value，否则，我们需要在使用时手动指定注解的属性名称，使用value则无需填入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>    String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//属性名为test</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-meta">@Test(test = &quot;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//默认属性名为value</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="属性可以设置默认值（使用便不用传值）"><a href="#属性可以设置默认值（使用便不用传值）" class="headerlink" title="属性可以设置默认值（使用便不用传值）"></a>属性可以设置默认值（使用便不用传值）</h4><p>我们也可以使用default关键字来为这些属性指定默认值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;都看到这里了，给个三连吧！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当属性存在默认值时，使用注解的时候可以不用传入属性值。当属性为数组时呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>    String[] value();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="属性为数组怎么传入"><a href="#属性为数组怎么传入" class="headerlink" title="属性为数组怎么传入"></a>属性为数组怎么传入</h4><p>当属性为数组，我们在使用注解传参时，如果数组里面只有一个内容，我们可以直接传入一个值，如果有多个内容，我们可以传入数组。：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//属性只有1个值</span><br><br><span class="hljs-meta">@Test(&quot;关注点了吗&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//属性有多个值</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-meta">@Test(&#123;&quot;value1&quot;, &quot;value2&quot;&#125;)</span>   <span class="hljs-comment">//多个值时就使用花括号括起来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="amp-amp-反射获取注解"><a href="#amp-amp-反射获取注解" class="headerlink" title="&amp;&amp;反射获取注解"></a>&amp;&amp;反射获取注解</h2><h4 id="类上的注解"><a href="#类上的注解" class="headerlink" title="类上的注解"></a>类上的注解</h4><p>既然我们的注解可以保留到运行时，那么我们来看看，如何获取我们编写的注解，我们需要用到反射机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-keyword">for</span> (Annotation annotation : clazz.getAnnotations()) &#123;<br>        System.out.println(annotation.annotationType());   <span class="hljs-comment">//获取类型</span><br>        System.out.println(annotation <span class="hljs-keyword">instanceof</span> Test);   <span class="hljs-comment">//直接判断是否为Test</span><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (Test) annotation;<br>        System.out.println(test.value());   <span class="hljs-comment">//获取我们在注解中写入的内容</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法上的注解"><a href="#方法上的注解" class="headerlink" title="方法上的注解"></a>方法上的注解</h3><p>通过反射机制，我们可以快速获取到我们标记的注解，同时还能获取到注解中填入的值，那么我们来看看，方法上的标记是不是也可以通过这种方式获取注解：</p><p>实际上就多了一个getMethod(“方法名”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-keyword">for</span> (Annotation annotation : **clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>)**.getAnnotations()) &#123;<br>        System.out.println(annotation.annotationType());   <span class="hljs-comment">//获取类型</span><br>        System.out.println(annotation <span class="hljs-keyword">instanceof</span> Test);   <span class="hljs-comment">//直接判断是否为Test</span><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (Test) annotation;<br>        System.out.println(test.value());   <span class="hljs-comment">//获取我们在注解中写入的内容</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无论是方法、类、还是字段，都可以使用<code>getAnnotations()</code>方法（还有几个同名的）来快速获取我们标记的注解。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单算法（Java实现）</title>
    <link href="/2022/06/10/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2022/06/10/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>一些排序算法与搜索算法的个人记录</p><span id="more"></span><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><img src="/image/22.06.29/maopao.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//谁大谁去最后面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_01</span>冒泡排序 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>&#125;;<br>        arrange(arr);<br>        <span class="hljs-comment">//操作数组名，static可以直接改变数组值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br><br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arrange</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">//引入数组需要定义,数组名可以和主函数名字相同，static</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">//涉及到[i+1],要进行length-1</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>            <span class="hljs-comment">//减掉外层的i,以进行优化</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                b = <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">//如果已经拍好了，就不继续排序了，以进行优化</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                <span class="hljs-comment">//for中的桥梁变量可以一直int?</span><br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b) &#123;<br>            <span class="hljs-comment">//for中的桥梁变量可以一直int?</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : arr) &#123;<br>            <span class="hljs-comment">//一个级别的for循环一个字母</span><br>            System.out.print(k + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p><img src="/image/22.06.29/charu.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//从左到右的每一个元素从右到左挨个比较，放到对应的位置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_02</span>插入排序 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>&#125;;<br>        arrange(arr);<br>        <span class="hljs-comment">//操作数组名，static可以直接改变数组值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arrange</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &gt;<span class="hljs-number">0</span>;j--) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j]&lt;arr[j-<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> temp=arr[j];<br>                    arr[j]=arr[j-<span class="hljs-number">1</span>];<br>                    arr[j-<span class="hljs-number">1</span>]=temp;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">break</span>;&#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p><img src="/image/22.06.29/xuanze.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//从左到右，与后面最小的进行交换，最小的直接交换最前面（区别于慢慢冒泡的冒泡排序）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_03</span>选择排序 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>&#125;;<br>        arrange3(arr);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : arr)&#123;<br>            System.out.print(i+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arrange3</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> min=arr[i],pos=i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[j]&lt;min)&#123;<br>                    min=arr[j];<br>                    pos=j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">int</span> temp=arr[i];<br>            arr[i]=arr[pos];<br>            arr[pos]=temp;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><img src="/image/22.06.29/kuaisu.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//递归</span><br><span class="hljs-comment">//不断的把中间值（基准值）放在中间</span><br><br><span class="hljs-comment">//1.找出中间值放在中间，小于中间值的都在左边，大于中间值的都在右边</span><br><span class="hljs-comment">//2.递归的时候不能初始化值，要后进行值的传入</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_04</span>快速排序 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-comment">//已经定义了数组，再进行传值的时候，不用再加[]</span><br>        <span class="hljs-comment">//长度：arr.length   最后一个标号：arr.length-1</span><br>        quickSort(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//&lt; length  ;     &lt;=length-1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//关于数组传入，要进行定义形参</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span>&#123;<br><br>        <span class="hljs-comment">//if语句进行递归的终止</span><br>        <span class="hljs-keyword">if</span> (start &gt;= end) &#123;<span class="hljs-keyword">return</span>;&#125;<br>        <span class="hljs-comment">//在递归内部对函数的变量进行定义</span><br>        <span class="hljs-comment">//两层指针，一个start和end用来明确下一次递归</span><br>        <span class="hljs-comment">// low和high一起进行当前递归</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> arr[start],low=start,high=end;<br>        <span class="hljs-comment">//条件不是start&lt;end,有可能是偶数，所以不用==</span><br>        <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>            <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; k &lt;= arr[high]) &#123;<br>                high--;<br>            &#125;<br>            arr[low] = arr[high];<br>            <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; k &gt;= arr[low]) &#123;<br>                low++;<br>            &#125;<br>            arr[high]=arr[low];<br>        &#125;<br>        arr[high] = k;<br><br>        quickSort(arr,start,high-<span class="hljs-number">1</span>);<br>        quickSort(arr,high+<span class="hljs-number">1</span>,end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h4 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_05</span>二分搜索 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试用例</span><br>        <span class="hljs-comment">//有序数组</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">26</span>&#125;;<br>        System.out.println(test(arr, <span class="hljs-number">12</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-comment">//实现算法，找到target返回下标，没找到则返回-1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,end = arr.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//明确循环多少次的时候用for,不明确的时候，类似搜索，用while</span><br>        <span class="hljs-keyword">while</span>(start &lt;= end)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end + <span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(arr[mid] == target) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid]&gt;target)&#123;<br>                end=mid-<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid]&lt;target)&#123;<br>                start=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数据结构简单实现</title>
    <link href="/2022/06/08/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/06/08/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>对Java数据结构的简单实现（持续更新）</p><span id="more"></span><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表抽象类"><a href="#线性表抽象类" class="headerlink" title="线性表抽象类"></a>线性表抽象类</h3><p>(顺序表和链表均继承此抽象类)</p><p>实现功能：获取表长，增，删，查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线性表抽象类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 存储的元素(Element)类型</span><br><span class="hljs-comment"> * 获取长度，增，删，查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_00LineListAbstract</span>&lt;E&gt; &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取表的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 顺序表的长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加一个元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 要添加的位置(索引)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e, <span class="hljs-type">int</span> index)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除指定位置的元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取指定位置的元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><h4 id="顺序表继承抽象类"><a href="#顺序表继承抽象类" class="headerlink" title="顺序表继承抽象类"></a>顺序表继承抽象类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_01ArrayListDooo</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">_00LineListAbstract</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">//得是数组里面元素的多少，不能是数组的长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//size在其他操作中动态变化</span><br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断插入位置是否合法</span><br>        <span class="hljs-keyword">if</span>(index &gt; size)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的位置插入异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//判断数组够不够长</span><br>        <span class="hljs-keyword">if</span>(size &gt;= arr.length)&#123;<br>            Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-built_in">this</span>.arr.length + <span class="hljs-number">10</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.arr.length; i++) &#123;<br>                arr[i] = <span class="hljs-built_in">this</span>.arr[i];<br>            &#125;<br>            <span class="hljs-built_in">this</span>.arr = arr;<br>        &#125;<br><br>        <span class="hljs-comment">//把后面的元素往后移,index是参数,必须倒着来啊！不然就撞了</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i &gt;= index)&#123;<br>            arr[i+<span class="hljs-number">1</span>] = arr[i];<br>            i--;<br>        &#125;<br>        <span class="hljs-comment">//插入</span><br>        arr[index] = e;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//只能删除存在的元素,查看删除位置是否合法</span><br>        <span class="hljs-keyword">if</span> (index &gt; size - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的位置插入异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//前移后面的元素（从index+1开始），不用删除，直接覆盖就行</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) arr[index];<br>        <span class="hljs-keyword">while</span> (i &lt;= size-<span class="hljs-number">1</span>) &#123;<br>            arr[i] = arr[i + <span class="hljs-number">1</span>];<br>            i++;<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//查询index位置的元素</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt;= size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<span class="hljs-string">&quot;无法访问到下标位置&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (E) arr[index];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="顺序表Main"><a href="#顺序表Main" class="headerlink" title="顺序表Main"></a>顺序表Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_01ArrayListMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _01ArrayListDooo&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_01ArrayListDooo</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 1</span><br>        list.add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 2 1</span><br>        list.add(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 3 2 1</span><br>        list.add(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 4 3 2 1</span><br>        list.add(<span class="hljs-number">5</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 5 4 3 2 1</span><br>        list.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//4 3 2 1</span><br>        System.out.println(list.get(<span class="hljs-number">1</span>));<span class="hljs-comment">//3</span><br>        System.out.println(list.size());<span class="hljs-comment">//4</span><br>        System.out.println(<span class="hljs-string">&quot;debug&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="链表继承抽象类"><a href="#链表继承抽象类" class="headerlink" title="链表继承抽象类"></a>链表继承抽象类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_02LinkListDooo</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">_00LineListAbstract</span>&lt;E&gt; &#123;<br><span class="hljs-comment">// 头结点 -&gt; 首结点 -&gt; ........-&gt; 尾结点</span><br><br>    <span class="hljs-comment">//类似&#x27;结点&#x27;结构体</span><br>    <span class="hljs-keyword">static</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt;&#123;<br>        <span class="hljs-comment">//左边，存储的元素</span><br>        <span class="hljs-keyword">private</span> E e;<br>        <span class="hljs-comment">//右边，下一个结点的引用</span><br>        <span class="hljs-keyword">private</span> Node&lt;E&gt; next;<br>        <span class="hljs-comment">//构造方法，创建结点直接赋值</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E e)</span>&#123;<br>            <span class="hljs-built_in">this</span>.e = e;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//创建一个头结点，里面没有值</span><br>    Node&lt;E&gt; head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//链表的长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">//返回链表的长度</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    <span class="hljs-comment">//插入一个结点</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//原理 e1 -&gt; e2 -&gt; e3，插入一个e0变成，e1 -&gt; e0 -&gt; e2 -&gt; e3</span><br>    <span class="hljs-comment">// ① e1 -&gt; e0 ② e0 -&gt; e2</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断对象是否合法，链表不需要扩容，也不需要移动后面的元素，只需要改变指针（在Java中是引用）</span><br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的插入位置！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//前驱节点，一开始什么都没有，前驱节点就是head</span><br>        Node&lt;E&gt; node = head;<br>        <span class="hljs-comment">//暂时先起个名字，一会儿代表后面的结点</span><br>        Node&lt;E&gt; temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br><br>            <span class="hljs-comment">//先让外面的结点移动到对应位置</span><br>            node = node.next;<br><br>            <span class="hljs-comment">//         e0</span><br>            <span class="hljs-comment">//    e1   -&gt;    e2   -&gt;   e3</span><br>            <span class="hljs-comment">//    |          |</span><br>            <span class="hljs-comment">//  (node)     (temp)</span><br><br>        &#125;<br>        temp = node.next;<br>        <span class="hljs-comment">//连接e1与e0</span><br>        node.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(e);<br>        <span class="hljs-comment">//连接e0 与 e2</span><br>        node.next.next = temp;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//删除一个结点</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断对象是否合法</span><br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的插入位置！&quot;</span>);<br>        &#125;<br>        Node&lt;E&gt; node = head,temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            <span class="hljs-comment">//移动指针</span><br>            node = node.next;<br>        &#125;<br><br>        <span class="hljs-comment">//    e1   -&gt;  e2  -&gt;    e3</span><br>        <span class="hljs-comment">//    |                  |</span><br>        <span class="hljs-comment">//   node   (remove)    temp</span><br>        <span class="hljs-comment">//①直接把e1 和 e3进行连接就好，让e1.next = e3.e</span><br>        temp = node.next;<br>        node.next = node.next.next;<br>        size --;<br>        <span class="hljs-keyword">return</span> temp.e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断对象是否合法</span><br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的插入位置！&quot;</span>);<br>        &#125;<br>        Node&lt;E&gt; node = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            node = node.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.e;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="链表Main"><a href="#链表Main" class="headerlink" title="链表Main"></a>链表Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_02LinkListMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _02LinkListDooo&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_02LinkListDooo</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        list.add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>        list.add(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>);<br>        list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(list.get(<span class="hljs-number">1</span>));<br>        System.out.println(list.size());<br>        System.out.println(<span class="hljs-number">1</span>);<span class="hljs-comment">//随便加上一个输出，方便看上一行的调试结果</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="栈抽象类"><a href="#栈抽象类" class="headerlink" title="栈抽象类"></a>栈抽象类</h4><p>实现：入栈操作，出栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象类型栈，待实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 元素类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_03StackAbstract</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 出栈操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 栈顶元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 入栈操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E e)</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="栈抽象类实现"><a href="#栈抽象类实现" class="headerlink" title="栈抽象类实现"></a>栈抽象类实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_03StackDooo</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">_03StackAbstract</span> &#123;<br><br>    <span class="hljs-comment">//用线性表存储</span><br>    <span class="hljs-keyword">private</span> Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">20</span>];<br>    <span class="hljs-comment">//长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//出栈</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (E) arr[(size--)-<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Object e)</span> &#123;<br>        <span class="hljs-comment">//扩容</span><br>        <span class="hljs-keyword">if</span>(size &gt;= arr.length)&#123;<br>            Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-built_in">this</span>.arr.length + <span class="hljs-number">10</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.arr.length; i++) &#123;<br>                arr[i] = <span class="hljs-built_in">this</span>.arr[i];<br>            &#125;<br>            <span class="hljs-built_in">this</span>.arr = arr;<br>        &#125;<br>        <span class="hljs-comment">//赋值的同时给size+1</span><br>        arr[size++] = e;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="栈Main"><a href="#栈Main" class="headerlink" title="栈Main"></a>栈Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_03StackMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _03StackDooo&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_03StackDooo</span>&lt;&gt;();<br>        stack.push(<span class="hljs-string">&quot;A&quot;</span>);<br>        stack.push(<span class="hljs-string">&quot;B&quot;</span>);<br>        stack.push(<span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-comment">//pop之后虽然数组没变，但是指针变了，所以后面再来数据会顶替掉，栈是一个你想象出来的数据结构。</span><br>        System.out.println(stack.pop());<br>        System.out.println(stack.pop());<br>        System.out.println(stack.pop());<br>        System.out.println(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="队列抽象类"><a href="#队列抽象类" class="headerlink" title="队列抽象类"></a>队列抽象类</h4><p>实现：入队，出队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_04QueneAbstract</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 进队操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span>;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 出队操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="队列抽象类实现"><a href="#队列抽象类实现" class="headerlink" title="队列抽象类实现"></a>队列抽象类实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_04QueneDooo</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">_04QueneAbstract</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">//底层数组</span><br>    <span class="hljs-keyword">private</span> Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">20</span>];<br>    <span class="hljs-comment">//队首队尾下标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//   e1  &lt;-  e2  &lt;-  e3  &lt;-  e4</span><br>    <span class="hljs-comment">//  head                    tail</span><br><br>    <span class="hljs-comment">//e5入队：</span><br>    <span class="hljs-comment">//  e1      e2     e3     e4     e5</span><br>    <span class="hljs-comment">// head                         tail</span><br><br>    <span class="hljs-comment">//e1出队：</span><br>    <span class="hljs-comment">//  e2      e3       e4       e5</span><br>    <span class="hljs-comment">// head                      tail</span><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//从队尾进队操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-comment">//取余能让尾巴从0开始循环开始,循环队列并没有真正的将head和tail进行连接，只是通过取余号让数值上进行循环</span><br>        <span class="hljs-comment">//一定要判断，tail不能超越head，next是预测的tail的下一个值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> (tail+<span class="hljs-number">1</span>) % arr.length;<br>        <span class="hljs-keyword">if</span> (next == head) &#123;<br>            <span class="hljs-comment">//要追上了，不行，违规了</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        arr[tail] = e;<br>        tail = next;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//队首出队操作</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//把队首的值存起来</span><br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) arr[head];<br>        <span class="hljs-comment">//移动head指针</span><br>        head = (head+<span class="hljs-number">1</span>) % arr.length;<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="队列Main"><a href="#队列Main" class="headerlink" title="队列Main"></a>队列Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_04QueneMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _04QueneDooo&lt;Integer&gt; Quene = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_04QueneDooo</span>&lt;&gt;();<br>        Quene.offer(<span class="hljs-number">123</span>);<br>        Quene.offer(<span class="hljs-number">456</span>);<br>        Quene.offer(<span class="hljs-number">789</span>);<br><br>        System.out.println(Quene.poll());<br>        System.out.println(Quene.poll());<br>        System.out.println(Quene.poll());<br>        System.out.println(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;E&gt; &#123;<br>    E e;<br>    _05TreeNodeDooo&lt;E&gt; left;<br>    _05TreeNodeDooo&lt;E&gt; right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">_05TreeNodeDooo</span><span class="hljs-params">(E e)</span>&#123;<br>        <span class="hljs-built_in">this</span>.e = e;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二叉树Main"><a href="#二叉树Main" class="headerlink" title="二叉树Main"></a>二叉树Main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> _13数据结构;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_05TreeNodeMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _05TreeNodeDooo&lt;String&gt; root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;A&quot;</span>);<br><br>        root.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;B&quot;</span>);<br>        root.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;E&quot;</span>);<br>        root.left.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;C&quot;</span>);<br>        root.left.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;D&quot;</span>);<br>        root.right.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;F&quot;</span>);<br>        preprint(root);<br>        System.out.println();<br>        midprint(root);<br>        System.out.println();<br>        backprint(root);<br>        System.out.println();<br><br>        <span class="hljs-comment">//                 A</span><br>        <span class="hljs-comment">//                / \</span><br>        <span class="hljs-comment">//              B     E</span><br>        <span class="hljs-comment">//             / \     \</span><br>        <span class="hljs-comment">//            C   D     F</span><br><br>    &#125;<br>    <span class="hljs-comment">//先序遍历</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preprint</span><span class="hljs-params">(_05TreeNodeDooo&lt;String&gt; root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">return</span>;&#125;<br>        System.out.print(root.e+<span class="hljs-string">&quot; &quot;</span>);<br>        preprint(root.left);<br>        preprint(root.right);<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">midprint</span><span class="hljs-params">(_05TreeNodeDooo&lt;String&gt; root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">return</span>;&#125;<br>        midprint(root.left);<br>        System.out.print(root.e+<span class="hljs-string">&quot; &quot;</span>);<br>        midprint(root.right);<br>    &#125;<br>    <span class="hljs-comment">//后序遍历</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backprint</span><span class="hljs-params">(_05TreeNodeDooo&lt;String&gt; root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">return</span>;&#125;<br>        backprint(root.left);<br>        backprint(root.right);<br>        System.out.print(root.e+<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL基础语句日常练习</title>
    <link href="/2022/06/05/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/06/05/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>一套数据库练习流程帮你练习常用SQL语句</p><span id="more"></span><h2 id="DDL-创建数据库，创建表"><a href="#DDL-创建数据库，创建表" class="headerlink" title="DDL(创建数据库，创建表)"></a>DDL(创建数据库，创建表)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs SQL">删除数据库<br>创建数据库<br>使用数据库<br><br>创建表<span class="hljs-number">1</span>student:<br>  学号，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），主键不空，备注学号主码<br>  姓名，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），不空，备注学生姓名<br>  性别，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），不空，备注学生性别<br>  生日，时间，备注学生出生年月<br>  班级，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），备注学生所在班级<br>创建表<span class="hljs-number">2</span>course:<br>  课程号，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），主键，非空，备注课程号（主码）<br>  课程名，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），非空，备注课程名称<br>  教师名，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），非空，备注教工编号<br>创建表<span class="hljs-number">3</span>score：<br>  序号，<span class="hljs-type">int</span>,主键，自增，备注主键自增<br>  学号，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注学号<br>  课程号，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注课程号<br>  成绩，从<span class="hljs-number">1</span>到<span class="hljs-number">4</span>，备注成绩<br>创建表<span class="hljs-number">4</span>teacher:<br>  教师号，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),主键非空，备注教工编号（主码）<br>  教师名字，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注教工姓名<br>  性别，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注教工性别<br>  生日，时间，备注教工出生年月<br>  职称（prof）,<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),备注职称<br>  部门，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注教工所在部门<br>  <br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> `test`;<br><br><span class="hljs-keyword">CREATE</span> DATABASE `test`;<br><br>USE `test`<br><br><br><span class="hljs-comment">-- 表一：student学生use)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student(<br>    sno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学号(主码)&#x27;</span>,<br>    sname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学生姓名&#x27;</span>,<br>    ssex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学生性别&#x27;</span>,<br>    sbirthday DATETIME COMMENT<span class="hljs-string">&#x27;学生出生年月&#x27;</span>,<br>    class <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT<span class="hljs-string">&#x27;学生所在班级&#x27;</span><br>);<br><span class="hljs-comment">-- 表（二）Course（课程表）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> course(<br>    cno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;课程号(主码)&#x27;</span>,<br>    cname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;课程名称&#x27;</span>,<br>    tno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工编号&#x27;</span><br>);<br><span class="hljs-comment">-- 表（三）Score(成绩表)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> score(<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT<span class="hljs-string">&#x27;主键自增&#x27;</span>,<br>    sno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学号&#x27;</span>,<br>    cno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;课程号&#x27;</span>,<br>    degree <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>) COMMENT<span class="hljs-string">&#x27;成绩&#x27;</span><br>);<br><span class="hljs-comment">-- 表四 teacher(教师表)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> teacher(<br>    tno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工编号(主码)&#x27;</span>,<br>    tname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工姓名&#x27;</span>,<br>    tsex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工性别&#x27;</span>,<br>    tbirthday DATETIME COMMENT<span class="hljs-string">&#x27;教工出生年月&#x27;</span>,<br>    prof <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT<span class="hljs-string">&#x27;职称&#x27;</span>,<br>    depart <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工所在部门&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>额外练习对表的修改和删除语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 创建表5以及字段</span><br>  <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `test`.`table5`(<br>   `id` <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;待修改&#x27;</span><br>   `id2` <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;待删除&#x27;</span><br>   );<br><span class="hljs-comment">-- 修改表名</span><br>RENAME <span class="hljs-keyword">TABLE</span> `test`.`table5` <span class="hljs-keyword">TO</span> `test`.`deleting`;<br><span class="hljs-comment">-- 修改字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `test`.`deleting` CHANGE `id` `id` <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;待删除&#x27;</span>;<br><span class="hljs-comment">-- 删除字段id2</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `test`.`deleting` <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> `id2`;<br></code></pre></td></tr></table></figure><h2 id="DML（针对数据的控制语言）"><a href="#DML（针对数据的控制语言）" class="headerlink" title="DML（针对数据的控制语言）"></a>DML（针对数据的控制语言）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 学生表数据的插入：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;108&#x27;</span>,<span class="hljs-string">&#x27;曾华&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>),<br>(<span class="hljs-string">&#x27;105&#x27;</span>,<span class="hljs-string">&#x27;匡明&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>),<br>(<span class="hljs-string">&#x27;107&#x27;</span>,<span class="hljs-string">&#x27;王丽&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>),<br>(<span class="hljs-string">&#x27;101&#x27;</span>,<span class="hljs-string">&#x27;李军&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>),<br>(<span class="hljs-string">&#x27;109&#x27;</span>,<span class="hljs-string">&#x27;王芳&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>),<br>(<span class="hljs-string">&#x27;103&#x27;</span>,<span class="hljs-string">&#x27;陆君&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>);<br><span class="hljs-comment">-- 课程表数据的插入：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;计算机导论&#x27;</span>,<span class="hljs-string">&#x27;825&#x27;</span>),<br>(<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;操作系统&#x27;</span>,<span class="hljs-string">&#x27;804&#x27;</span>),<br>(<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;数字电路&#x27;</span>,<span class="hljs-string">&#x27;856&#x27;</span>),<br>(<span class="hljs-string">&#x27;9-888&#x27;</span>,<span class="hljs-string">&#x27;高等数学&#x27;</span>,<span class="hljs-string">&#x27;831&#x27;</span>);<br><span class="hljs-comment">-- 成绩表数据的插入：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> score(sno,cno,degree) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;103&#x27;</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;86&#x27;</span>),<br>(<span class="hljs-string">&#x27;105&#x27;</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;75&#x27;</span>),<br>(<span class="hljs-string">&#x27;109&#x27;</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;68&#x27;</span>),<br>(<span class="hljs-string">&#x27;103&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;92&#x27;</span>),<br>(<span class="hljs-string">&#x27;105&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;88&#x27;</span>),<br>(<span class="hljs-string">&#x27;109&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;76&#x27;</span>),<br>(<span class="hljs-string">&#x27;101&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;64&#x27;</span>),<br>(<span class="hljs-string">&#x27;107&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;91&#x27;</span>),<br>(<span class="hljs-string">&#x27;108&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;78&#x27;</span>),<br>(<span class="hljs-string">&#x27;101&#x27;</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;85&#x27;</span>),<br>(<span class="hljs-string">&#x27;107&#x27;</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;79&#x27;</span>),<br>(<span class="hljs-string">&#x27;108&#x27;</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;81&#x27;</span>);<br><span class="hljs-comment">-- 教师表数据的插入：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;804&#x27;</span>,<span class="hljs-string">&#x27;李诚&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1958-12-02&#x27;</span>,<span class="hljs-string">&#x27;副教授&#x27;</span>,<span class="hljs-string">&#x27;计算机系&#x27;</span>),<br>(<span class="hljs-string">&#x27;856&#x27;</span>,<span class="hljs-string">&#x27;张旭&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1969-03-12&#x27;</span>,<span class="hljs-string">&#x27;讲师&#x27;</span>,<span class="hljs-string">&#x27;电子工程系&#x27;</span>),<br>(<span class="hljs-string">&#x27;825&#x27;</span>,<span class="hljs-string">&#x27;王萍&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1972-05-05&#x27;</span>,<span class="hljs-string">&#x27;助教&#x27;</span>,<span class="hljs-string">&#x27;计算机系&#x27;</span>),<br>(<span class="hljs-string">&#x27;831&#x27;</span>,<span class="hljs-string">&#x27;刘冰&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1977-08-14&#x27;</span>,<span class="hljs-string">&#x27;助教&#x27;</span>,<span class="hljs-string">&#x27;电子工程系&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h2 id="DQL-查询语言"><a href="#DQL-查询语言" class="headerlink" title="DQL(查询语言)"></a>DQL(查询语言)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- ===============题目================== </span><br><span class="hljs-comment">-- 1. 查询student表中的所有记录sname，ssex，class</span><br><span class="hljs-keyword">SELECT</span> `sname`,`ssex`,`class` <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 2. 查询所有教师单位不重复的depart列</span><br><br><span class="hljs-comment">-- 第一种方式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `depart` <span class="hljs-keyword">FROM</span> teacher;<br><br><span class="hljs-comment">-- 第二种方式</span><br><span class="hljs-keyword">SELECT</span> `depart` <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `depart`;<br><br><span class="hljs-comment">-- 3.查询student中所有记录</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 4. 查询score中成绩在60(包含)~80(不包含）的列</span><br><br><span class="hljs-comment">-- 第一种方式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree` <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">80</span>;<br><br><span class="hljs-comment">-- 第二种方式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">&gt;=</span><span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> `degree`<span class="hljs-operator">&lt;</span><span class="hljs-number">80</span>;<br><br><span class="hljs-comment">-- 5.查询成绩为85 86 或者88 记录</span><br><br><span class="hljs-comment">-- 第一种方式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">=</span><span class="hljs-number">85</span> <span class="hljs-keyword">OR</span> `degree`<span class="hljs-operator">=</span><span class="hljs-number">86</span> <span class="hljs-keyword">OR</span> `degree`<span class="hljs-operator">=</span><span class="hljs-number">88</span>;<br><br><span class="hljs-comment">-- 第二种方式</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree` <span class="hljs-keyword">IN</span>(<span class="hljs-number">85</span>,<span class="hljs-number">86</span>,<span class="hljs-number">88</span>);<br><br><span class="hljs-comment">-- 6.查询student表中“95031”班或性别为“女”的同学记录。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> class<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95031&#x27;</span> <span class="hljs-keyword">OR</span> ssex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span>;<br><br><span class="hljs-comment">-- 7. 以class降序查询student表的所有记录。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `class` <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 8.以cno升序、degree降序查询Score表的所有记录。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `cno` <span class="hljs-keyword">ASC</span> , `degree` <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 9.查询“95031”班的学生人数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(sno) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> class<span class="hljs-operator">=</span>&quot;95031&quot;;<br><br><span class="hljs-comment">-- 10. 查询Score表中的最高分的sno和cno。（子查询或者排序）</span><br><br><span class="hljs-comment">-- 子查询方式</span><br><span class="hljs-keyword">SELECT</span> `sno`,`cno` <span class="hljs-keyword">FROM</span> score<br><span class="hljs-keyword">WHERE</span> degree <span class="hljs-operator">=</span>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(`degree`) <span class="hljs-keyword">FROM</span> score<br>);<br><br><span class="hljs-comment">-- 排序</span><br><span class="hljs-keyword">SELECT</span> `sno`,`cno` <span class="hljs-keyword">FROM</span> score<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> degree <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br><br><br><span class="hljs-comment">-- 11.查询每门课的cno、总人数、平均成绩。</span><br><span class="hljs-keyword">SELECT</span> `cno`,<span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总人数&#x27;</span>,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `cno`;<br><br><br><span class="hljs-comment">-- 12.查询Score表中至少有5名学生选修的并以3开头的课程号的cno、总人数、平均分。</span><br><span class="hljs-keyword">SELECT</span> s.`cno`,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总人数&#x27;</span>,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> score  <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> course <span class="hljs-keyword">AS</span> c<br><span class="hljs-keyword">ON</span> c.`cno` <span class="hljs-operator">=</span> s.`cno`<br><span class="hljs-keyword">WHERE</span> c.`cno` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;3%&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c.`cno`<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span>;<br><br><span class="hljs-comment">-- 13.查询分数大于70，小于90的sno、degree。</span><br><br><span class="hljs-keyword">SELECT</span> `sno`,`degree` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">&gt;</span><span class="hljs-number">70</span> <span class="hljs-keyword">AND</span> `degree`<span class="hljs-operator">&lt;</span><span class="hljs-number">90</span>;<br><br><span class="hljs-comment">-- 14.查询所有学生的sname、cno和degree列。(多表查询)</span><br><br><span class="hljs-comment">-- 第一种方式</span><br><span class="hljs-keyword">SELECT</span> `sname`,`cno`,`degree` <span class="hljs-keyword">FROM</span> student,score<br><span class="hljs-keyword">WHERE</span> student.`sno`<span class="hljs-operator">=</span> score.`sno`;<br><br><span class="hljs-comment">-- 第二种方式：联合查询</span><br><span class="hljs-keyword">SELECT</span> `sname`,`cno`,`degree` <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score sc<br><span class="hljs-keyword">ON</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`;<br><br><br><span class="hljs-comment">-- 15.查询所有学生的sno、cname和degree列（如果学生没有cname 和 degree 也需要查询出来)。</span><br><br><span class="hljs-keyword">SELECT</span> sc.`sno`,`cname`,`degree` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">AS</span> sc<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> course <span class="hljs-keyword">AS</span> c<br><span class="hljs-keyword">ON</span> sc.`cno`<span class="hljs-operator">=</span>c.`cno`;<br><br><span class="hljs-comment">-- 16.查询“95033”班学生的cno,平均分(子查询和多表查询)。</span><br><br><span class="hljs-comment">-- 多表查询方式一</span><br><span class="hljs-keyword">SELECT</span> `cno`,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score sc<br><span class="hljs-keyword">ON</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`<br><span class="hljs-keyword">WHERE</span> `class`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95033&#x27;</span>;<br><br><span class="hljs-comment">-- 多表查询方式二</span><br><span class="hljs-keyword">SELECT</span> cno,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> score,student<br><span class="hljs-keyword">WHERE</span> score.`sno`<span class="hljs-operator">=</span>student.`sno` <span class="hljs-keyword">AND</span> student.`class`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95033&#x27;</span>;<br><br><span class="hljs-comment">-- 子查询</span><br><span class="hljs-keyword">SELECT</span> cno,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> score <br><span class="hljs-keyword">WHERE</span> sno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `sno` <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> `class`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95033&#x27;</span><br>);<br><br><br><span class="hljs-comment">-- 17.查询课程号为“3-105”课程且学号为“109”号同学成绩的记录（子查询和多边查询）。</span><br><br><span class="hljs-comment">-- 子查询</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <br><span class="hljs-keyword">WHERE</span> sno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `sno` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `cno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> `sno`<span class="hljs-operator">=</span><span class="hljs-number">109</span><br>);<br><br><span class="hljs-comment">-- 多表查询</span><br><br><span class="hljs-comment">-- 方式一</span><br><span class="hljs-keyword">SELECT</span> s.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s <br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc<br><span class="hljs-keyword">ON</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`<br><span class="hljs-keyword">WHERE</span> `cno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> sc.`sno`<span class="hljs-operator">=</span><span class="hljs-number">109</span>;<br><br><span class="hljs-comment">-- 方式二</span><br><span class="hljs-keyword">SELECT</span> s.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s,score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">WHERE</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`  <span class="hljs-keyword">AND</span> `cno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> sc.`sno`<span class="hljs-operator">=</span><span class="hljs-number">109</span>;<br><br><br><span class="hljs-comment">-- 18.查询score中选学2门课程的同学的sno、总成绩(且按照总成绩降序排序)。</span><br><span class="hljs-keyword">SELECT</span> `sno`,<span class="hljs-built_in">SUM</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总成绩&#x27;</span> <span class="hljs-keyword">FROM</span> score <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `sno`<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(`sno`)<span class="hljs-operator">=</span><span class="hljs-number">2</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">SUM</span>(`degree`) <span class="hljs-keyword">DESC</span><br><br><span class="hljs-comment">-- 19.查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。</span><br><br><span class="hljs-comment">-- 子查询</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">&gt;</span>(<br> <span class="hljs-keyword">SELECT</span> `degree` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span>  `sno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;109&#x27;</span> <span class="hljs-keyword">AND</span> `cno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3-105&#x27;</span><br>);<br><br><br><span class="hljs-comment">-- 20.查询和学号为108的同学同年出生的所有学生的sno、sname和sbirthday列。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> `sbirthday` <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `sbirthday` <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;108&#x27;</span><br>);<br><br><br><span class="hljs-comment">-- 21. 获取“张旭&quot;教师所交课程课程号以及课程名</span><br><br><span class="hljs-keyword">SELECT</span> `cno`,`cname` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">AS</span> c<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> teacher <span class="hljs-keyword">AS</span>  t<br><span class="hljs-keyword">ON</span> t.`tno`<span class="hljs-operator">=</span>c.`tno`<br><span class="hljs-keyword">WHERE</span> t.`tname`<span class="hljs-operator">=</span>&quot;张旭&quot;;<br><br><br><span class="hljs-comment">-- 21.查询“张旭“教师任课的学生成绩（姓名）。</span><br><br><span class="hljs-comment">-- 方式一</span><br><span class="hljs-keyword">SELECT</span> `sname`,`degree` <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> score<br><span class="hljs-keyword">ON</span> student.`sno`<span class="hljs-operator">=</span>score.`sno`<br><span class="hljs-keyword">WHERE</span> score.sno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> s.`sno` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">AS</span> c <br>  <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> teacher <span class="hljs-keyword">AS</span> t<br>  <span class="hljs-keyword">ON</span> c.`tno`<span class="hljs-operator">=</span>t.`tno`<br>  <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc<br>  <span class="hljs-keyword">ON</span> sc.`cno`<span class="hljs-operator">=</span>c.`cno`<br>  <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> student  <span class="hljs-keyword">AS</span> s<br>  <span class="hljs-keyword">ON</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`<br>  <span class="hljs-keyword">WHERE</span> t.`tname`<span class="hljs-operator">=</span>&quot;张旭&quot;<br>);<br><br><span class="hljs-comment">-- 方式二</span><br><span class="hljs-keyword">SELECT</span> `sname`,`degree` <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> score<br><span class="hljs-keyword">ON</span> student.`sno`<span class="hljs-operator">=</span>score.`sno`<br><span class="hljs-keyword">WHERE</span> score.sno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> s.sno <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s,score <span class="hljs-keyword">AS</span> sc<br>  <span class="hljs-keyword">WHERE</span> sc.`sno`<span class="hljs-operator">=</span>s.`sno` <span class="hljs-keyword">AND</span> cno <span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> cno <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">AS</span> c,teacher <span class="hljs-keyword">AS</span> t <span class="hljs-keyword">WHERE</span> c.`tno`<span class="hljs-operator">=</span>t.`tno` <span class="hljs-keyword">AND</span> t.`tname`<span class="hljs-operator">=</span>&quot;张旭&quot;)<br>);<br><br><br><span class="hljs-comment">-- 22 查询考计算机导论的学生成绩（子查询)</span><br><span class="hljs-keyword">SELECT</span> `degree` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `cno` <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `cno` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> cname<span class="hljs-operator">=</span>&quot;计算机导论&quot;<br>);<br><br><span class="hljs-comment">-- 23.教高等数学的老师是叫什么，哪个系的(子查询)</span><br><span class="hljs-keyword">SELECT</span> `tname`,`depart` <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> `tno` <span class="hljs-keyword">IN</span>(<br>    <span class="hljs-keyword">SELECT</span> `tno` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> `cname`<span class="hljs-operator">=</span>&quot;高等数学&quot;<br>);<br><br><br><span class="hljs-comment">-- 24.查询所有教师和同学的name、sex和birthday.(联合查询)</span><br><span class="hljs-keyword">SELECT</span> t.`tname` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;name&#x27;</span>,t.`tsex` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;sex&#x27;</span>,t.`tbirthday` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;birthday&#x27;</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">AS</span> t<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> s.`sname`,s.`ssex`,s.`sbirthday`  <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s;<br><br><br><span class="hljs-comment">-- 25.查询选修某课程的同学人数多于5人的教师姓名(子查询)。</span><br><span class="hljs-keyword">SELECT</span> `tname` <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> tno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `tno` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> `cno` <span class="hljs-keyword">IN</span>(<br>    <span class="hljs-keyword">SELECT</span> `cno` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `cno` <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(`sno`)<span class="hljs-operator">&gt;=</span><span class="hljs-number">5</span><br>  )<br>);<br><br><br><span class="hljs-comment">-- 26查询最高分同学的Sno、Cno和Degree列(子查询）。</span><br><br> <span class="hljs-keyword">SELECT</span> `sno`,`cno`,`degree` <span class="hljs-keyword">FROM</span>  score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">=</span>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(`degree`) <span class="hljs-keyword">FROM</span> score<br> );<br> <br> <br> <span class="hljs-comment">-- 27.查询Student表中不姓“王”的同学记录。</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> sno <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> sno <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> `sname` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;王%&#x27;</span><br> );<br> <br> <br> <span class="hljs-comment">-- 28.查询Student表中每个学生的姓名和年龄。</span><br><span class="hljs-keyword">SELECT</span> `sname`,  <span class="hljs-built_in">FLOOR</span>(DATEDIFF(CURDATE(),`sbirthday`)<span class="hljs-operator">/</span><span class="hljs-number">365.2422</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;年龄&#x27;</span> <span class="hljs-keyword">FROM</span> student; <br> <br><br> <br><span class="hljs-comment">-- 29.查询所有任课教师的Tname和Depart.</span><br><span class="hljs-keyword">SELECT</span> `tname`,`depart` <span class="hljs-keyword">FROM</span> teacher;<br><br><br><span class="hljs-comment">-- 30.查询所有成绩比3-105课程平均成绩低的同学的成绩表。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">&lt;</span>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> cno<span class="hljs-operator">=</span>&quot;3-105&quot;<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Linux环境变量每次要source /etc/profile问题</title>
    <link href="/2022/06/03/%E8%A7%A3%E5%86%B3Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AF%8F%E6%AC%A1%E8%A6%81source-etc-profile%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/03/%E8%A7%A3%E5%86%B3Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AF%8F%E6%AC%A1%E8%A6%81source-etc-profile%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Linux的profile与权限相关问题</p><span id="more"></span><h1 id="解决Linux环境变量每次要source-x2F-etc-x2F-profile问题"><a href="#解决Linux环境变量每次要source-x2F-etc-x2F-profile问题" class="headerlink" title="解决Linux环境变量每次要source &#x2F;etc&#x2F;profile问题"></a>解决Linux环境变量每次要source &#x2F;etc&#x2F;profile问题</h1><blockquote><p><strong>问题：</strong></p></blockquote><p>在&#x2F;etc&#x2F;profile中添加环境变量后，是使用<code>source /etc/profile</code>编译后只能在当前终端生效；重新开启一个终端后，该环境变量失效。</p><p>每次使用交叉编译链之前都要进行<code>source /etc/profile</code>才能进行编译</p><blockquote><p><strong>解决方法</strong></p></blockquote><p>使用<code>su - root</code>进入系统instead of <code>su</code>问题解决；</p><p>因为设置的环境变量，并没有真正生效，只是使用source 命令让临时运行而已。</p><blockquote><p><strong>原理上解析Linux中sudo,su与su -的异同</strong></p></blockquote><p>在linux系统中，由于root的权限过大，一般情况都不使用它。只有在一些特殊情况下才采用登录root执行管理任务，一般情况下临时使用root权限多采用su和sudo命令。<br><br></br></p><h4 id="su-命令（切换工作目录）："><a href="#su-命令（切换工作目录）：" class="headerlink" title="su - 命令（切换工作目录）："></a>su - 命令（切换工作目录）：</h4><p>su -，su -l或su –login 命令改变身份时，也同时变更工作目录，以及HOME，SHELL，USER，LOGNAME。此外，也会变更PATH变量。用su -命令则默认转换成成root用户了。</p><h4 id="su-命令："><a href="#su-命令：" class="headerlink" title="su 命令："></a>su 命令：</h4><p>su为switch user，即切换用户的简写。</p><p>格式为两种：</p><p>su -l USERNAME（-l为login，即登陆的简写）</p><p>su USERNAME</p><p>如果不指定USERNAME（用户名），默认即为root，所以切换到root的身份的命令即为：su -root或su -，su root 或su。</p><h4 id="su-USERNAME，与su-USERNAME的不同之处如下："><a href="#su-USERNAME，与su-USERNAME的不同之处如下：" class="headerlink" title="su USERNAME，与su - USERNAME的不同之处如下："></a>su USERNAME，与su - USERNAME的不同之处如下：</h4><p>su - USERNAME切换用户后，同时切换到新用户的工作环境中。</p><p>su USERNAME切换用户后，不改变原用户的工作目录，及其他环境变量目录。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/01/hello-world/"/>
    <url>/2022/06/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>HelloWorld表示尊敬！</p><span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
