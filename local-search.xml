<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于SSM+Security的图书管理系统</title>
    <link href="/2022/07/26/BookManagerSSM/"/>
    <url>/2022/07/26/BookManagerSSM/</url>
    
    <content type="html"><![CDATA[<p>本项目是基于SSM的图书管理系统，使用Thymeleaf作为前端模板，使用SpringSecurity进行用户登录权限相关的管理操作。</p><span id="more"></span><h3 id="项目成果展示"><a href="#项目成果展示" class="headerlink" title="项目成果展示"></a>项目成果展示</h3><p><img src="/image/22.07.26/shifan1.jpg"></p><p><img src="/image/22.07.26/shifan2.jpg"></p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li><p><input checked="" disabled="" type="checkbox"> 自定义登录登出</p></li><li><p><input checked="" disabled="" type="checkbox"> 针对不同权限规划不同页面</p></li><li><p><input checked="" disabled="" type="checkbox"> 学生的注册</p></li><li><p><input checked="" disabled="" type="checkbox"> 管理员的功能：增删书籍、查看全部借阅信息</p></li><li><p><input checked="" disabled="" type="checkbox"> 学生的功能：借阅归还书籍、查看自己的借阅信息</p></li></ul><h1 id="开发环境测试"><a href="#开发环境测试" class="headerlink" title="开发环境测试"></a>开发环境测试</h1><p>我们依然使用之前的前端模板来搭建图书管理系统项目。</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>导入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--Thymeleaf视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--  Spring框架依赖  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  持久层框架依赖  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zaxxer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>HikariCP<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  其他工具框架依赖：Lombok、Slf4j  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-jdk14<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  ServletAPI  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  JUnit依赖  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="删除无用文件夹"><a href="#删除无用文件夹" class="headerlink" title="删除无用文件夹"></a>删除无用文件夹</h3><p>删除JSP，初始化servlet等</p><p><img src="/image/22.07.26/image_qnhCBdqacn.png"></p><h3 id="创建初始化包"><a href="#创建初始化包" class="headerlink" title="创建初始化包"></a>创建初始化包</h3><p>接着创建Initializer（初始化包，专门来初始化的包）来配置Web应用程序</p><p><img src="/image/22.07.26/image_Ys3dnwa9sI.png"></p><h4 id="MVC初始化器"><a href="#MVC初始化器" class="headerlink" title="MVC初始化器"></a>MVC初始化器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;RootConfiguration.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;MvcConfiguration.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是将两个没有写的初始化器进行完善</p><p><img src="/image/22.07.26/image_lnfheZjmB-.png"></p><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><p>创建配置类</p><h4 id="Mvc配置类"><a href="#Mvc配置类" class="headerlink" title="Mvc配置类"></a>Mvc配置类</h4><p>mvc扫描Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&quot;book.manager.controller&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//我们需要使用ThymeleafViewResolver作为视图解析器，并解析我们的HTML页面</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ThymeleafViewResolver <span class="hljs-title function_">thymeleafViewResolver</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> SpringTemplateEngine springTemplateEngine)</span>&#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        resolver.setOrder(<span class="hljs-number">1</span>);<br>        resolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resolver.setTemplateEngine(springTemplateEngine);<br>        <span class="hljs-keyword">return</span> resolver;<br>    &#125;<br><br>    <span class="hljs-comment">//配置模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringResourceTemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SpringResourceTemplateResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringResourceTemplateResolver</span>();<br>        resolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        resolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/template/&quot;</span>);<br>        <span class="hljs-keyword">return</span> resolver;<br>    &#125;<br><br>    <span class="hljs-comment">//配置模板引擎Bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">springTemplateEngine</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> ITemplateResolver resolver)</span>&#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        engine.setTemplateResolver(resolver);<br>        <span class="hljs-keyword">return</span> engine;<br>    &#125;<br><br>    <span class="hljs-comment">//开启静态资源处理</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-comment">//静态资源路径配置</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/WEB-INF/static/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Root配置类"><a href="#Root配置类" class="headerlink" title="Root配置类"></a>Root配置类</h4><p>扫描Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;</span><br><span class="hljs-meta">        &quot;book.manager.service&quot;</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RootConfiguration</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>最后创建一个专用于响应页面的PageController即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 专用于处理页面响应的控制器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置前端相关文件夹"><a href="#配置前端相关文件夹" class="headerlink" title="配置前端相关文件夹"></a>配置前端相关文件夹</h4><p>将static直接放进WEB-INF文件夹中，再创建一个template文件夹专门用于放前端模板</p><p>接着我们需要将前端页面放到对应的文件夹中，然后开启服务器并通过浏览器，成功访问。</p><p><img src="/image/22.07.26/image_9ka_BERLcV.png"></p><h4 id="网站前缀"><a href="#网站前缀" class="headerlink" title="网站前缀"></a>网站前缀</h4><p>修改Tomcat服务器部署URL和应用程序上下文</p><p><img src="/image/22.07.26/image_hYPArvtsxz.png"></p><p><img src="/image/22.07.26/image_YPXlMFvBCb.png"></p><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>在默认地址后面输入index</p><p>访问成功！</p><p><img src="/image/22.07.26/image_BeDKTOyywR.png"></p><h1 id="配置Security环境"><a href="#配置Security环境" class="headerlink" title="配置Security环境"></a>配置Security环境</h1><h4 id="Security初始化器"><a href="#Security初始化器" class="headerlink" title="Security初始化器"></a>Security初始化器</h4><p>接着我们需要配置SpringSecurity，与Mvc一样，需要一个<em><strong>初始化器</strong></em>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSecurityWebApplicationInitializer</span> &#123;<br>    <span class="hljs-comment">//不用重写任何内容</span><br>    <span class="hljs-comment">//这里实际上会自动注册一个Filter，SpringSecurity底层就是依靠N个过滤器实现的，我们之后再探讨</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Security配置类"><a href="#Security配置类" class="headerlink" title="Security配置类"></a>Security配置类</h4><p>接着我们需要再创建一个配置类用于配置SpringSecurity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-comment">//继承WebSecurityConfigurerAdapter，之后会进行配置</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置MVC初始化器"><a href="#配置MVC初始化器" class="headerlink" title="配置MVC初始化器"></a>配置MVC初始化器</h4><p>接着在mvc容器中添加此配置文件即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;RootConfiguration.class, SecurityConfiguration.class&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，SpringSecurity的配置就完成了，我们再次运行项目，会发现无法进入的我们的页面中，无论我们访问哪个页面，都会进入到SpringSecurity为我们提供的一个默认登录页面，之后我们会讲解如何进行配置。</p><p>至此，项目环境搭建完成。</p><p>Security自动出现了一个登陆页面</p><p><img src="/image/22.07.26/image_0Vdhg55s_4.png"></p><h4 id="添加Thymeleaf对Security的支持"><a href="#添加Thymeleaf对Security的支持" class="headerlink" title="添加Thymeleaf对Security的支持"></a>添加Thymeleaf对Security的支持</h4><p>开始之前我们需要先配置一下Thymeleaf的SpringSecurity扩展，它针对SpringSecurity提供了更多额外的解析：</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MVC配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置模板引擎Bean</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">springTemplateEngine</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> ITemplateResolver resolver)</span>&#123;<br>    <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>    engine.setTemplateResolver(resolver);<br>    engine.addDialect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringSecurityDialect</span>());   <span class="hljs-comment">//添加针对于SpringSecurity的方言</span><br>    <span class="hljs-keyword">return</span> engine;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/22.07.26/image_nOaHvTkzsW.png"></p><p>前端头部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:sec</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="登录登出记住我"><a href="#登录登出记住我" class="headerlink" title="登录登出记住我"></a>登录登出记住我</h1><h2 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h2><p>我们知道前端输入的密码会被Security翻译成密文，这就导致我们数据库中存储的必须是经过翻译的密文，否则经过转换之后密码不能与之对应。</p><p>像是这种向数据库中查询的操作，因为数据库中已经有了数据，我们可以先写mapper进行查询，然后从Service中进行直接调用以及逻辑处理（说是Service实际上相当于ServiceImpl，注意此时应给配置RootConfiguration对mapper和service进行扫描，应该是Security有与之对应的Service，所以负责相对应的Impl就可以了）</p><p>再将Service传入到相应的应用部分（Security或者Controller）</p><p>我们这次是将Service传入SecurityConfiguration进行逻辑处理。</p><h3 id="配置数据库层"><a href="#配置数据库层" class="headerlink" title="配置数据库层"></a>配置数据库层</h3><p>前面我们已经实现了直接认证的方式，那么如何将其连接到数据库，通过查询数据库中的内容来进行用户登录呢？</p><h4 id="Test翻译密码为密文"><a href="#Test翻译密码为密文" class="headerlink" title="Test翻译密码为密文"></a>Test翻译密码为密文</h4><p>首先我们需要将加密后的密码添加到数据库中作为用户密码(注意不同的项目的翻译出来的密文不同)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>        System.out.println(encoder.encode(<span class="hljs-string">&quot;123456&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里编写一个测试来完成。</p><h4 id="查询密码Mapper"><a href="#查询密码Mapper" class="headerlink" title="查询密码Mapper"></a>查询密码Mapper</h4><p>别忘了在配置类中进行扫描，将其注册为Bean，接着我们需要编写一个Mapper用于和数据库交互：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select password from users where name = #&#123;username&#125;&quot;)</span><br>    String <span class="hljs-title function_">getPasswordByUsername</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="根容器配置"><a href="#根容器配置" class="headerlink" title="根容器配置"></a>根容器配置</h4><p>根容器用来扫描mapper和service，配置一下Mybatis和数据源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScans(&#123;</span><br><span class="hljs-meta">        @ComponentScan(&quot;book.manager.service&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@MapperScan(&quot;book.manager.mapper&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RootConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HikariDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage_ssm&quot;</span>);<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        bean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，登陆就会从数据库中进行查询。</p><h3 id="配置Service和Security逻辑"><a href="#配置Service和Security逻辑" class="headerlink" title="配置Service和Security逻辑"></a>配置Service和Security逻辑</h3><h4 id="比对密码Service"><a href="#比对密码Service" class="headerlink" title="比对密码Service"></a>比对密码Service</h4><p>然后我们需要创建一个Service实现，实现的是UserDetailsService，它支持我们自己返回一个UserDetails对象，我们只需直接返回一个包含数据库中的用户名、密码等信息的UserDetails即可，SpringSecurity会自动进行比对。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAuthService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    UserMapper mapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> mapper.getPasswordByUsername(s);  <span class="hljs-comment">//从数据库根据用户名获取密码</span><br>        <span class="hljs-keyword">if</span>(password == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;登录失败，用户名或密码错误！&quot;</span>);<br>        <span class="hljs-keyword">return</span> User   <span class="hljs-comment">//这里需要返回UserDetails，SpringSecurity会根据给定的信息进行比对</span><br>                .withUsername(s)<br>                .password(password)   <span class="hljs-comment">//直接从数据库取的密码</span><br>                .roles(<span class="hljs-string">&quot;user&quot;</span>)   <span class="hljs-comment">//用户角色</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Security配置"><a href="#Security配置" class="headerlink" title="Security配置"></a>Security配置</h4><p>最后再重新修改一下Security配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    auth<br>      .userDetailsService(service)   <span class="hljs-comment">//使用自定义的Service实现类进行验证</span><br>      .passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>());   <span class="hljs-comment">//依然使用BCryptPasswordEncoder</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登录页面自定义"><a href="#登录页面自定义" class="headerlink" title="登录页面自定义"></a>登录页面自定义</h2><p>首先我们关闭csrf，这个隐藏的框的作用是携带Token进入每一个网页，没携带的会自动被拦截。关闭了csrf之后可以不用继续在网页中携带Token,不过我们只是为了方便，在实际开发的时候不能本末倒置。</p><p>由于使用了SpringSecurity，我们所有的与登录以及权限相关的比如登录页，首页，登录跳转请求，等等都是在SecurityConfiguration中进行配置</p><p>在前端更换了Security对应的变量名，方法名，请求名之后，在Security中进行继续配置即可，虽然Security取代了部分的Controller的重定向跳转功能但是具体的网址对应的页面还是要Controller进行编写。</p><h3 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h3><h4 id="添加Login-html页面"><a href="#添加Login-html页面" class="headerlink" title="添加Login.html页面"></a>添加Login.html页面</h4><p><img src="/image/22.07.26/image_wb9DhJz_In.png"></p><h4 id="前端更改表单提交action"><a href="#前端更改表单提交action" class="headerlink" title="前端更改表单提交action"></a>前端更改表单提交action</h4><p>页面跳转链接我们都是通过Controller进行跳转，前端的按钮我们要在前端的action和method进行命名。</p><p><img src="/image/22.07.26/image_y5P5s38E1H.png"></p><h3 id="后端替换默认界面"><a href="#后端替换默认界面" class="headerlink" title="后端替换默认界面"></a>后端替换默认界面</h3><h4 id="SecurityConfiguration"><a href="#SecurityConfiguration" class="headerlink" title="SecurityConfiguration"></a>SecurityConfiguration</h4><p>接着我们就可以将我们自己的页面替换掉默认的页面了，我们需要重写另一个方法来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    http<br>            .authorizeRequests()   <span class="hljs-comment">//首先需要配置哪些请求会被拦截，哪些请求必须具有什么角色才能访问</span><br>            .antMatchers(<span class="hljs-string">&quot;/static/**&quot;</span>).permitAll()    <span class="hljs-comment">//静态资源，使用permitAll来运行任何人访问（注意一定要放在前面）</span><br>            .antMatchers(<span class="hljs-string">&quot;/**&quot;</span>).hasRole(<span class="hljs-string">&quot;user&quot;</span>)     <span class="hljs-comment">//所有请求必须登陆并且是user角色才可以访问（不包含上面的静态资源）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>首先我们需要配置拦截规则，也就是当用户未登录时，哪些路径可以访问，哪些路径不可以访问，如果不可以访问，那么会被自动重定向到登陆页面。</p><p>接着我们需要配置表单登陆和登录页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">.and()<br>.formLogin()       <span class="hljs-comment">//配置Form表单登陆</span><br>.loginPage(<span class="hljs-string">&quot;/login&quot;</span>)       <span class="hljs-comment">//登陆页面地址（GET）</span><br>.loginProcessingUrl(<span class="hljs-string">&quot;/doLogin&quot;</span>)    <span class="hljs-comment">//form表单提交地址（POST）</span><br>.defaultSuccessUrl(<span class="hljs-string">&quot;/index&quot;</span>，<span class="hljs-literal">true</span>)    <span class="hljs-comment">//登陆成功后跳转的页面，也可以通过Handler实现高度自定义</span><br>.permitAll()    <span class="hljs-comment">//登陆页面也需要允许所有人访问</span><br></code></pre></td></tr></table></figure><h3 id="关闭csrf"><a href="#关闭csrf" class="headerlink" title="关闭csrf"></a>关闭csrf</h3><p>由于我们在学习的过程中暂时用不到CSFR防护，因此可以将其关闭，这样直接使用get请求也可以退出登陆，并且登陆请求中无需再携带Token了，推荐关闭，因为不关闭后面可能会因为没考虑CSRF防护而遇到一连串的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">.and()<br>.csrf().disable();<br></code></pre></td></tr></table></figure><p>这样就可以直接关闭此功能了，但是注意，这样将会导致您的Web网站存在安全漏洞。（这里为了之后省事，就关闭保护了，但是一定要记得在不关闭的情况下需要携带Token访问）</p><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><p>需要配置登陆页面的地址和登陆请求发送的地址，这里登陆页面填写为<code>/login</code>，登陆请求地址为<code>/doLogin</code>，登陆页面需要我们自己去编写Controller来实现，登陆请求提交处理由SpringSecurity提供，只需要写路径就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登出功能实现"><a href="#登出功能实现" class="headerlink" title="登出功能实现"></a>登出功能实现</h2><p>退出的逻辑比登录要简单一点，Security自动对退出操作进行了身份删除，我们只需要简单的对两个地方进行修改</p><p>①前端的按钮名称以及方法名称</p><p>②SecurityConfiguration的logout的请求地址名称和退出后返回的网址</p><h4 id="SecurityConfiguration-1"><a href="#SecurityConfiguration-1" class="headerlink" title="SecurityConfiguration"></a>SecurityConfiguration</h4><p>配置好后，我们还需要配置一下退出登陆操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">.and()<br>.logout()<br>.logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>)    <span class="hljs-comment">//退出登陆的请求地址</span><br>.logoutSuccessUrl(<span class="hljs-string">&quot;/login&quot;</span>);    <span class="hljs-comment">//退出后重定向的地址</span><br></code></pre></td></tr></table></figure><h4 id="前端配置-1"><a href="#前端配置-1" class="headerlink" title="前端配置"></a>前端配置</h4><p>注意这里的退出登陆请求也必须是POST请求方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;logout&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>退出登陆<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>登陆成功后，点击退出登陆按钮，就可以成功退出并回到登陆界面了。</p><h2 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h2><p>由于之前的Cookie存储用户名和密码存在一定的危险，我们选择使用Security的两种记住我的形式。</p><p>①将Token存在内存中，不过重启服务器会导致Token失效，重启浏览器倒是没有什么关系。</p><p>②将Token存在数据库中，重启服务器时Security相关的配置会消失</p><h4 id="配置SecurityConfiguration"><a href="#配置SecurityConfiguration" class="headerlink" title="配置SecurityConfiguration"></a>配置SecurityConfiguration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">.and()<br>.rememberMe()   <span class="hljs-comment">//开启记住我功能</span><br>.rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>)  <span class="hljs-comment">//登陆请求表单中需要携带的参数，如果携带，那么本次登陆会被记住</span><br>.tokenRepository(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryTokenRepositoryImpl</span>())  <span class="hljs-comment">//这里使用的是直接在内存中保存的TokenRepository实现</span><br>  <span class="hljs-comment">//TokenRepository有很多种实现，InMemoryTokenRepositoryImpl直接基于Map实现的，缺点就是占内存、服务器重启后记住我功能将失效</span><br>  <span class="hljs-comment">//后面我们还会讲解如何使用数据库来持久化保存Token信息</span><br></code></pre></td></tr></table></figure><h4 id="前端修改"><a href="#前端修改" class="headerlink" title="前端修改"></a>前端修改</h4><p>接着我们需要在前端修改一下记住我勾选框的名称，将名称修改与上面一致，如果上面没有配置名称，那么默认使用”remember”作为名称：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-checkbox&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们启动服务器，在登陆时勾选记住我勾选框，观察Cookie的变化。</p><p><img src="/image/22.07.26/image_drMElTj5vn.png"></p><h4 id="重启服务器失效"><a href="#重启服务器失效" class="headerlink" title="重启服务器失效"></a>重启服务器失效</h4><p><em><strong>将Token存在内存中会导致服务器重启之后就消失</strong></em></p><p>虽然现在已经可以实现记住我功能了，但是还有一定的缺陷，如果服务器重新启动（因为Token信息全部存在HashMap中，也就是存在内存中），那么所有记录的Token信息将全部丢失，这时即使浏览器携带了之前的Token也无法恢复之前登陆的身份。</p><h1 id="学生注册"><a href="#学生注册" class="headerlink" title="学生注册"></a>学生注册</h1><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先我们找到一个注册页面对其进行内容相关的规划，进行数据库以及网页前端的统一。输入框的name。</p><p><em><strong>显示上</strong></em>：</p><p>我们设置一个前端链接get请求（实际上前端对method不需要有具体的限制）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;register&quot;</span>&gt;</span>注册用户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过前端的get请求传到Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册页面</span><br><span class="hljs-meta">@RequestMapping(&quot;/register&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;register&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候我们发现进入页面的时候不能进入，会重定向到主页，原因是我们在设置Security的时候没有对Registerye页面进行放行。（注意要在拦截的前面）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//register页面，匀速所有人进行访问</span><br>.antMatchers(<span class="hljs-string">&quot;/register&quot;</span>).permitAll()<br></code></pre></td></tr></table></figure><p><em><strong>数据上</strong></em>：</p><p>在数据流程上，我们将数据输入前端，以表单的方式将数据传到Controller中</p><p>Controller将数据提取出来放到变量里面，调用Service中的方法，以存取了数据的变量为参数传入进去。</p><p>实际上Service也只是调用了mapper的方法，继续将变量的值继续传入mapper定义的接口方法中。</p><p>在Mapper中定义的传入的参数名与数据库中的变量名并没有什么必然的联系，因为可以使用@Param注解将变量的值传入sql语句中。</p><p><em><strong>设计上</strong></em>：</p><p>我们先设计前端对应的名字到Controller的post方法中，将变量值与之对应。</p><h3 id="简单框架设计"><a href="#简单框架设计" class="headerlink" title="简单框架设计"></a>简单框架设计</h3><h4 id="重新设计数据库"><a href="#重新设计数据库" class="headerlink" title="重新设计数据库"></a>重新设计数据库</h4><p>我们重新设计数据库表主要是因为多了users这一张表，users关系着登陆权限和访问权限。</p><p>设置外键</p><p><img src="/image/22.07.26/image_KC3Dm6V9ZE.png"></p><p>我们让student表中的uid字段引用users的id字段。那么此时student就是从表，子表，外键。users表就是主表，父表，主键。</p><p>--创建时：先创建主键，再创建外键 &amp;#x20;</p><p>--删除时：先删除外键，再删建主键</p><p><a href="https://blog.csdn.net/qq_61122628/article/details/123763603">https://blog.csdn.net/qq_61122628/article/details/123763603</a></p><h4 id="前端配置-2"><a href="#前端配置-2" class="headerlink" title="前端配置"></a>前端配置</h4><p>输入框的name</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;性别&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;grade&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;年级&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-input&quot;</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>提交键使用button</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-auth-btn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-btn ad-login-member&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表单头使用doRegister连接，前面没有斜杠。注明请求方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;doRegister&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Controller的post方法"><a href="#Controller的post方法" class="headerlink" title="Controller的post方法"></a>Controller的post方法</h4><p>注意Controller类上要写出@Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册测试</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/doRegister&quot; , method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(&quot;sex&quot;)</span> String sex,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(&quot;grade&quot;)</span> String grade,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="前端传值到Controller测试"><a href="#前端传值到Controller测试" class="headerlink" title="前端传值到Controller测试"></a>前端传值到Controller测试</h3><blockquote><p>报错;至少有一个JAR被扫描用于TLD但尚未包含TLD。?</p><p>j解决：在设置catalina.properties中，将&#x2F;转换成 *.jar</p></blockquote><blockquote><p>报错：没有直接跳转到调试页面</p><p>解决：因为Security将doRegister这个Post方法挡住了！！！我们要对“&#x2F;doRegister”方法进行放行</p></blockquote><blockquote><p>报错：前端传入的值“男”乱码</p><p>解决：在MvcInitializer中添加Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置前端传值乱码Filter(无效，因为SpringSecurity的Filter自动前置)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>(<span class="hljs-string">&quot;utf-8&quot;</span>,<span class="hljs-literal">true</span>)&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>正常情况下这样配置是没有问题的。但是没有什么用，因为SpringSecurity会把自己的Filter放在最前面，我们自己写的被放在后面，数据来的时候已经就乱码了。</p><p>所以我们应该弄个前置方法，在里面设置Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置前端传值乱码Filter(领先于Security的Filters)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartup</span><span class="hljs-params">(ServletContext servletContext)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    servletContext.addFilter(<span class="hljs-string">&quot;characterEncodingFilter&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>,<span class="hljs-literal">true</span>))<br>            .addMappingForUrlPatterns(<span class="hljs-literal">null</span>,<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;/*&quot;</span>);<br>    <span class="hljs-built_in">super</span>.onStartup(servletContext);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/22.07.26/image_n3-buJRBrZ.png"></p></blockquote><h3 id="配置后端代码"><a href="#配置后端代码" class="headerlink" title="配置后端代码"></a>配置后端代码</h3><h4 id="AuthService"><a href="#AuthService" class="headerlink" title="AuthService"></a>AuthService</h4><p>创建AuthService使用来专门负责与用户登录授权相关的Service操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthService</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String username,String sex,String grade,String password)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><p>新增了回写实体类的操作：我们在插入了用户信息表之后需要获取到uid，在后续插入学生表的时候需要用到。这时候我们选择的就是插入之后回写到实体类的一个操作（因为如果反过来进行查询的话，可能会出现重名不同uid的情况，就算进行时间上的排序也是比较麻烦）</p><p>我们的思路流程是先将信息插入user表中，然后通过回写实体类的机制将uid返回到实体类，我们在获取实体类之后将uid输入到student表中</p><p>mapper新增了@Option注解，会将信息对实体类有所反馈.</p><p>将传入的参数改成了实体类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select password from users where name = #&#123;username&#125;&quot;)</span><br>    AuthUser <span class="hljs-title function_">getPasswordByUsername</span><span class="hljs-params">(String username)</span>;<br><br>    <span class="hljs-comment">//注册时插入users</span><br>    <span class="hljs-comment">//options表示的是一层对应关系。true的意思是主键是自动生成的，keyColomn表示的数据库的主键，keyProperty表示的时对应的实体类中的键</span><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true,keyColumn = &quot;id&quot;,keyProperty = &quot;id&quot;)</span><br>    <span class="hljs-meta">@Insert(&quot;insert into users(name,role,password) values(#&#123;username&#125;,#&#123;role&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">(AuthUser user)</span>;<br><br>    <span class="hljs-comment">//注册时插入student</span><br>    <span class="hljs-meta">@Insert(&quot;insert into student(uid,name,grade,sex) values(#&#123;uid&#125;,#&#123;name&#125;,#&#123;grade&#125;,#&#123;sex&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addStudentInfo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;uid&quot;)</span> <span class="hljs-type">int</span> uid,<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,<span class="hljs-meta">@Param(&quot;grade&quot;)</span> String grade,<span class="hljs-meta">@Param(&quot;sex&quot;)</span> String sex)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="完善AuthServiceImpl"><a href="#完善AuthServiceImpl" class="headerlink" title="完善AuthServiceImpl"></a>完善AuthServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    UserMapper mapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String username, String sex, String grade, String password)</span> &#123;<br>        <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>        <span class="hljs-type">AuthUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthUser</span>(<span class="hljs-number">0</span>,username,encoder.encode(password),<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">if</span>(mapper.registerUser(user)&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户信息添加失败！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(mapper.addStudentInfo(user.getId(),username,grade,sex)&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;学生信息插入失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller关联Service"><a href="#Controller关联Service" class="headerlink" title="Controller关联Service"></a>Controller关联Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    AuthService service;<br><br>    <span class="hljs-comment">//注册测试</span><br>    <span class="hljs-meta">@RequestMapping(value=&quot;/doRegister&quot; , method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;sex&quot;)</span> String sex,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;grade&quot;)</span> String grade,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span>&#123;<br>        service.register(username, sex, grade, password);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="将注册的Service中的返回值改成void"><a href="#将注册的Service中的返回值改成void" class="headerlink" title="将注册的Service中的返回值改成void"></a>将注册的Service中的返回值改成void</h4><p>没必要写成boolean，因为我们直接抛出异常</p><blockquote><p>报错：Controller类找不到Service bean</p><p>原因：我们应该给Service的Impl实现类加上@Service接口，来让RootConfiguration找到他。</p></blockquote><blockquote><p>users表中出现了数据，但是数据没有加入到student中。</p><p>2.我们在ServiceImpl中进行插入学生的操作时，将学生的sex写成了password，导致传值失败</p></blockquote><p><img src="/image/22.07.26/image_TEwfWmq9I5.png"></p><p>我们应该做一个事务，让他们要不就都插入，要不就都失败。</p><h3 id="student和users的事务操作"><a href="#student和users的事务操作" class="headerlink" title="student和users的事务操作"></a>student和users的事务操作</h3><p>我们将插入uesrs和student表的操作设置成一个事务，这样就能保证原子性。</p><p>在Spring阶段深入Mybatis框架中，使用Spring进行事务管理的具体方法是三步①给RootConfiguration配置类加上注解②给RootConfiguration加上一个事务支持的方法③将要执行的事务放在Service的一个方法中，在方法上打上注解</p><h4 id="RootConf设置"><a href="#RootConf设置" class="headerlink" title="RootConf设置"></a>RootConf设置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScans(&#123;</span><br><span class="hljs-meta">        @ComponentScan(&quot;book.manager.service&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@MapperScan(&quot;book.manager.mapper&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//开启Spring事务</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RootConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HikariDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage_ssm&quot;</span>);<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        bean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">//开启事务管理</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource dataSource)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(dataSource);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Service注解"><a href="#Service注解" class="headerlink" title="Service注解"></a>Service注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>UserMapper mapper;<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String username, String sex, String grade, String password)</span> &#123;<br>    <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    <span class="hljs-type">AuthUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthUser</span>(<span class="hljs-number">0</span>,username,encoder.encode(password),<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-keyword">if</span>(mapper.registerUser(user)&lt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户信息添加失败！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mapper.addStudentInfo(user.getId(),username,grade,sex)&lt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;学生信息插入失败！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>关于test用户密码无效的问题</p><p>就算是相同的用户名和密码注册，生成的密码都是不同的，因为翻译的时候加了盐。所以不同的用户，相同的密码，密文不同也是很正常的事情。test换了个性别就可以正常登录了，应该是浏览器或则Security的奇怪缓存问题导致的。暂时没有更好的解决办法。</p><p>解决：其实是我们刚开始对数据进行字符串校验的时候，后来开始将字符串类型改成了AuthUser对象类型。在AuthUserService部分代码（String转换成AuthUser）没有进行修改。而且mapper语句也要继续修改成<code>select * </code>因为我们现在要进行搜索的是整个对象了</p><p>思路：查密码主要分为两个思路，一个是通过用户名查找密码，但是此时我们也需要获得role相关的信息，所以我们通过整个实体类对象进行查找比较方便。</p><p>我们在前端设置了doLogin之后直接创建一个AuthUserService，继承自Security的UserDetailsService类。因为是Security的自动识别，我们没有Controller，也不用对Service进行引用。只需要继承Security的类就行。</p><p>Service类引用mapper，mapper查询的是对应名字的用户的所有信息，方便我们后面将信息封装成一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from users where name = #&#123;username&#125;&quot;)</span><br>AuthUser <span class="hljs-title function_">getPasswordByUsername</span><span class="hljs-params">(String username)</span>;<br></code></pre></td></tr></table></figure><p>在Service创建对象为mapper的,Security将前端输入信息和返回的对象进行信息比对。</p><p>Security将前端输入信息和返回的对象进行信息比对。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-type">AuthUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getPasswordByUsername(s);  <span class="hljs-comment">//从数据库根据用户名获取密码</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;登录失败，用户名或密码错误！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> User   <span class="hljs-comment">//这里需要返回UserDetails，SpringSecurity会根据给定的信息进行比对</span><br>                .withUsername(user.getName())<br>                .password(user.getPassword())   <span class="hljs-comment">//直接从数据库取的密码</span><br>                .roles(user.getRole())   <span class="hljs-comment">//用户角色</span><br>                .build();<br>    &#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="User表中的名字设置不能重复"><a href="#User表中的名字设置不能重复" class="headerlink" title="User表中的名字设置不能重复"></a>User表中的名字设置不能重复</h4><p>由于如果出现了重复的字段，我们进行密码验证就会出现错误，所以我们要给name进行unique限制。由于name不是主键不能设置主键unique，所以我们要在索引中对name进行限制。</p><p><img src="/image/22.07.26/image_LS2BQEIQE_.png"></p><h3 id="统一Security对“-x2F-api-x2F-auth”路径的放行"><a href="#统一Security对“-x2F-api-x2F-auth”路径的放行" class="headerlink" title="统一Security对“&#x2F;api&#x2F;auth”路径的放行"></a>统一Security对“&#x2F;api&#x2F;auth”路径的放行</h3><p>我们给AuthController加上了<code>/api/auth</code>前缀，然后在Security中对此路径进行放行。</p><p>在Security中对注册和登录和注册提交的POST请求进行了前缀放行</p><p>在前端对命令进行了修改注意前端的action前面不带斜杠，但是Security中的命令都是带斜杠</p><p>然后修改Controller中的重定向命令，因为我们在整个类上面加上了前缀，所以我们要对重定向写上完整的也买你返回路径。（注意重定向的写法）</p><h4 id="AuthController-重定向"><a href="#AuthController-重定向" class="headerlink" title="AuthController+重定向"></a>AuthController+重定向</h4><p>给页面加上了个名字前缀</p><p>注意重定向写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/auth&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    AuthService service;<br><br>    <span class="hljs-comment">//注册测试</span><br>    <span class="hljs-meta">@RequestMapping(value=&quot;/register&quot; , method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;sex&quot;)</span> String sex,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;grade&quot;)</span> String grade,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span>&#123;<br>        service.register(name, sex, grade, password);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/login&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SecurityConfiguration-2"><a href="#SecurityConfiguration-2" class="headerlink" title="SecurityConfiguration"></a>SecurityConfiguration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">http<br>    <span class="hljs-comment">//拦截放行</span><br>    .authorizeRequests()   <span class="hljs-comment">//首先需要配置哪些请求会被拦截，哪些请求必须具有什么角色才能访问</span><br>    .antMatchers(<span class="hljs-string">&quot;/static/**&quot;</span>,<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-string">&quot;/api/auth/**&quot;</span>).permitAll()    <span class="hljs-comment">//静态资源，使用permitAll来运行任何人访问（注意一定要放在前面）</span><br>    .anyRequest().hasRole(<span class="hljs-string">&quot;user&quot;</span>)     <span class="hljs-comment">//所有请求必须登陆并且是user角色才可以访问（不包含上面的静态资源）</span><br><br>    <span class="hljs-comment">//自定义登陆页面</span><br>    .and()<br>    .formLogin()       <span class="hljs-comment">//配置Form表单登陆</span><br>    .loginPage(<span class="hljs-string">&quot;/login&quot;</span>)       <span class="hljs-comment">//登陆页面地址（GET）</span><br>    .loginProcessingUrl(<span class="hljs-string">&quot;/api/auth/login&quot;</span>)    <span class="hljs-comment">//form表单提交地址（POST）</span><br>    .defaultSuccessUrl(<span class="hljs-string">&quot;/index&quot;</span>,<span class="hljs-literal">true</span>)    <span class="hljs-comment">//登陆成功后跳转的页面，也可以通过Handler实现高度自定义</span><br>    .permitAll()    <span class="hljs-comment">//登陆页面也需要允许所有人访问</span><br><br>    <span class="hljs-comment">//退出</span><br>    .and()<br>    .logout()<br>    .logoutUrl(<span class="hljs-string">&quot;/api/auth/logout&quot;</span>)    <span class="hljs-comment">//退出登陆的请求地址</span><br>    .logoutSuccessUrl(<span class="hljs-string">&quot;/login&quot;</span>)    <span class="hljs-comment">//退出后重定向的地址</span><br></code></pre></td></tr></table></figure><h4 id="前端对应进行修改"><a href="#前端对应进行修改" class="headerlink" title="前端对应进行修改"></a>前端对应进行修改</h4><p>提交表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--注册表单请求--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;api/auth/register&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--登录表达请求--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;api/auth/login&quot;</span>    <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--退出按钮请求--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;api/auth/logout&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fas fa-sign-out-alt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> logout<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>在登陆时出现了奇怪的bug，就是使用中文用户名的时候，不能登录，显示bug。但是调试的时候却可以进行登录。然后在我清除浏览器缓存之后，maven-clean，重新构建Maven项目，RebuildProject之后，可以正常登陆了，暂时归结为缓存问题。</p></blockquote><h1 id="主页搭建"><a href="#主页搭建" class="headerlink" title="主页搭建"></a>主页搭建</h1><h2 id="主页总体框架搭建"><a href="#主页总体框架搭建" class="headerlink" title="主页总体框架搭建"></a>主页总体框架搭建</h2><h4 id="中文乱码再次优化"><a href="#中文乱码再次优化" class="headerlink" title="中文乱码再次优化"></a>中文乱码再次优化</h4><p>我们发现中文乱码写在MvcInitializer中依旧不是最前面的</p><p>我们可以写在SecurityInitializer中，这里应该是最前面了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解决中文传入Security乱码的问题</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeSpringSecurityFilterChain</span><span class="hljs-params">(ServletContext servletContext)</span> &#123;<br>    servletContext.addFilter(<span class="hljs-string">&quot;characterEncodingFilter&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>,<span class="hljs-literal">true</span>))<br>            .addMappingForUrlPatterns(<span class="hljs-literal">null</span>,<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;/*&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分析人物模块"><a href="#分析人物模块" class="headerlink" title="分析人物模块"></a>分析人物模块</h4><p>管理员：书籍管理、借阅列表</p><p>同学：书籍借阅、自己的借阅列表</p><h4 id="前端页面修改"><a href="#前端页面修改" class="headerlink" title="前端页面修改"></a>前端页面修改</h4><h3 id="用户信息读取-传入Thymeleaf"><a href="#用户信息读取-传入Thymeleaf" class="headerlink" title="用户信息读取+传入Thymeleaf"></a>用户信息读取+传入Thymeleaf</h3><p>我们想在进入index界面的时候直接获取用户信息（包括用户名和用户身份）</p><p>在Controller进行用户信息读取有很多种方法。其中一种是利用SecurityContext，还有就是从Session获取信息。</p><p>我们在SecurityConfiguration登陆成功之后加了一部分操作。我们先从Session中获取用户信息，然后再通过重定向的方式进行主页的跳转。</p><h4 id="SecurityConfigutation"><a href="#SecurityConfigutation" class="headerlink" title="SecurityConfigutation"></a>SecurityConfigutation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取用户信息</span><br><span class="hljs-meta">@Resource</span><br>UserMapper mapper;<br><br><span class="hljs-comment">//lambda表达式获取用户信息</span><br>http.successHandler(<span class="hljs-built_in">this</span>::onAuthenticationSuccess)<br><br><span class="hljs-comment">//获取用户信息</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> httpServletRequest.getSession();<br>    <span class="hljs-type">AuthUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getPasswordByUsername(authentication.getName());<br>    session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>    httpServletResponse.sendRedirect(<span class="hljs-string">&quot;/bookmanager/index&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="PageController"><a href="#PageController" class="headerlink" title="PageController"></a>PageController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-meta">@SessionAttribute(&quot;user&quot;)</span> AuthUser user , Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端传入值"><a href="#前端传入值" class="headerlink" title="前端传入值"></a>前端传入值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.getName()&#125;&quot;</span>&gt;</span>John Brown<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.getRole().equals(&#x27;user&#x27;)?&#x27;普通学生&#x27; : &#x27;管理员&#x27;&#125;&quot;</span>&gt;</span>UI | UX Designer<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="不同权限显示不同页面"><a href="#不同权限显示不同页面" class="headerlink" title="不同权限显示不同页面"></a>不同权限显示不同页面</h2><p>我们制作一个主页，但是里面的内容划分根据不同的权限会有不同的消失效果，这就利用到了Security对Thymeleaf的支持。</p><h4 id="数据库输入信息"><a href="#数据库输入信息" class="headerlink" title="数据库输入信息"></a>数据库输入信息</h4><p>由于主页只能注册学生相关信息，所以管理员信息只能通过数据库进行输入。</p><p><img src="/image/22.07.26/image_4Qj1J4YqQb.png"></p><h4 id="Security赋予管理员登陆权限"><a href="#Security赋予管理员登陆权限" class="headerlink" title="Security赋予管理员登陆权限"></a>Security赋予管理员登陆权限</h4><p>我们将<code>hasRole()</code>改成<code>hasAnyRole()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">.anyRequest().hasAnyRole(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)     <span class="hljs-comment">//所有请求必须登陆并且是user角色才可以访问（不包含上面的静态资源）</span><br></code></pre></td></tr></table></figure><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>菜单栏我们并不会进行两个页面的书写，但是我们会不同的显示进行不同的划分。</p><h4 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--图书管理员菜单--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;admin&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;all-product.html&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-menu feather-icon&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">viewbox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;currentColor&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-linecap</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">stroke-linejoin</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;feather feather-home&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">polyline</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">polyline</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-text&quot;</span>&gt;</span><br>            借阅信息<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;admin&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;orders.html&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-menu feather-icon&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">viewbox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;currentColor&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-linecap</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">stroke-linejoin</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;feather feather-truck&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;15&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;13&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rect</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">polygon</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;16 8 20 8 23 11 23 16 16 16 16 8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">polygon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;5.5&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;18.5&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;2.5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;18.5&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;18.5&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;2.5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-text&quot;</span>&gt;</span><br>            图书管理<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="学生菜单"><a href="#学生菜单" class="headerlink" title="学生菜单"></a>学生菜单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--学生菜单--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;user&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;all-product.html&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-menu feather-icon&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">viewbox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;currentColor&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-linecap</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">stroke-linejoin</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;feather feather-home&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">polyline</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">polyline</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-text&quot;</span>&gt;</span><br>            本人借阅信息<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;user&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;orders.html&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-menu feather-icon&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">viewbox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;currentColor&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-linecap</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">stroke-linejoin</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;feather feather-truck&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;15&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;13&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rect</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">polygon</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;16 8 20 8 23 11 23 16 16 16 16 8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">polygon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;5.5&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;18.5&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;2.5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;18.5&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;18.5&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;2.5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-text&quot;</span>&gt;</span><br>            图书借阅<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="想要每次进入都直接访问主页"><a href="#想要每次进入都直接访问主页" class="headerlink" title="想要每次进入都直接访问主页"></a>想要每次进入都直接访问主页</h2><p>思路一：让其登陆直接进入主页，先去session找，再去数据库找(找到了给session）,如果都没有，就给你送回登陆页面。</p><p>思路二：登陆直接进入登陆页面，如果找到了登录信息（先session后数据库）那么给你送到主页。（本项目不回写思路二，因为在两个地方进行判断没有必要并且容易出现多次重定向）</p><p>①采用数据库保存Token的方法</p><p>②如果直接访问主页，如果访问主页没有权限，那么从数据库中寻找权限，否则跳转回登陆页面。</p><p>③如果直接访问登陆页面，且有 登录信息，那么直接跳转到主页。</p><h4 id="设置数据库形式的记住我"><a href="#设置数据库形式的记住我" class="headerlink" title="设置数据库形式的记住我"></a>设置数据库形式的记住我</h4><p><em><strong>SecurityConfiguration</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>PersistentTokenRepository repository;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> PersistentTokenRepository <span class="hljs-title function_">jdbcRepository</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> DataSource dataSource)</span>&#123;<br>    <span class="hljs-type">JdbcTokenRepositoryImpl</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenRepositoryImpl</span>();  <span class="hljs-comment">//使用基于JDBC的实现</span><br>    repository.setDataSource(dataSource);   <span class="hljs-comment">//配置数据源</span><br>    repository.setCreateTableOnStartup(<span class="hljs-literal">true</span>);   <span class="hljs-comment">//启动时自动创建用于存储Token的表（建议第一次启动之后删除该行）</span><br>    <span class="hljs-keyword">return</span> repository;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">.and()<br>.rememberMe()<br>.rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>)<br>.tokenRepository(repository)<br>.tokenValiditySeconds(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>)  <span class="hljs-comment">//Token的有效时间（秒）默认为14天</span><br></code></pre></td></tr></table></figure><p>出现了报错：</p><p>因为我们的记住我是在跳转index之前对Cookie进行了一个user值的存入。我们现在直接进入index，因为没有user的权限，所以被拦下来了。</p><h4 id="配置index的Controller"><a href="#配置index的Controller" class="headerlink" title="配置index的Controller"></a>配置index的Controller</h4><p>我们对用户携带的Cookie进行了判断。</p><p>如果有user这个Session那么我们直接把他进行一个model设置。</p><p>如果没有，我们将获取被记住的登陆者的名字，通过名字查找用户的信息，将其封装在一个user对象中。然后对其进行session设置，最后再进行model设置。</p><p>model是给前端的user变量传值，方便进行身份判断。在此做出区别，model传给的是前端的参数，session传给的是Cookie中的信息。并不相等，但无论如何model都是要进行传值的，session可以进行传递，但是model只有在当前的controller才能进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>UserMapper mapper;<br><br><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>    <span class="hljs-type">AuthUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (AuthUser) session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>        user = mapper.getPasswordByUsername(authentication.getName());<br>        session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>    &#125;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="页面内容和划分"><a href="#页面内容和划分" class="headerlink" title="页面内容和划分"></a>页面内容和划分</h1><p>&amp;#x20; 已知管理员有两个页面（所有的借阅信息，增删改书籍），学生有两个界面（显示自己的借阅信息，借书还书）。</p><p>为了节省代码量，并且也没有必要将所有的信息进行展示然后再进行权限控制，我们决定设置一个头部模板，将前面相关的，相似的页面进行套用。</p><h3 id="页面位置分配"><a href="#页面位置分配" class="headerlink" title="页面位置分配"></a>页面位置分配</h3><h4 id="页面模板"><a href="#页面模板" class="headerlink" title="页面模板"></a>页面模板</h4><p>侧边栏和用户名放到template模板中</p><p>给其中的模板进行命名备注<code>th:fragment</code>。</p><p><img src="/image/22.07.26/image_Kfv48rgeIq.png"></p><p>引用部分：</p><p><img src="/image/22.07.26/image_Ih7viWkpVA.png"></p><h4 id="页面重组"><a href="#页面重组" class="headerlink" title="页面重组"></a>页面重组</h4><p>我们对整个项目的页面进行结构重组。在页面中给页面分成admin和user两部分。在controller中将页面分成api和page两部分。方便页面进行访问，也方便Security进行控制划分。</p><p>注意：修改了Controller的前缀之后一定要在SecurityConfiguration中对路径进行修改。</p><p><img src="/image/22.07.26/image_1QGBnroC7J.png"></p><p><img src="/image/22.07.26/image_Ku721e1qeS.png"></p><p><img src="/image/22.07.26/image_yi6akLGasb.png"></p><h4 id="修改SecurityConfiguration相关地址"><a href="#修改SecurityConfiguration相关地址" class="headerlink" title="修改SecurityConfiguration相关地址"></a>修改SecurityConfiguration相关地址</h4><p>我们给Controller加过前缀之后，必须要给Security配置了的地址转向进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拦截放行</span><br>.authorizeRequests()   <span class="hljs-comment">//首先需要配置哪些请求会被拦截，哪些请求必须具有什么角色才能访问</span><br>.antMatchers(<span class="hljs-string">&quot;/static/**&quot;</span>,<span class="hljs-string">&quot;/page/auth/**&quot;</span>,<span class="hljs-string">&quot;/api/auth/**&quot;</span>).permitAll()    <span class="hljs-comment">//静态资源，使用permitAll来运行任何人访问（注意一定要放在前面）</span><br>.antMatchers(<span class="hljs-string">&quot;/page/user/**&quot;</span>).hasRole(<span class="hljs-string">&quot;user&quot;</span>)<br>.antMatchers(<span class="hljs-string">&quot;/page/admin/**&quot;</span>).hasRole(<span class="hljs-string">&quot;admin&quot;</span>)<br>.anyRequest().hasAnyRole(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)     <span class="hljs-comment">//所有请求必须登陆并且是user角色才可以访问（不包含上面的静态资源）</span><br><br><span class="hljs-comment">//自定义登陆页面</span><br>.and()<br>.formLogin()       <span class="hljs-comment">//配置Form表单登陆</span><br>.loginPage(<span class="hljs-string">&quot;/page/auth/login&quot;</span>)       <span class="hljs-comment">//登陆页面地址（GET）</span><br>.loginProcessingUrl(<span class="hljs-string">&quot;/api/auth/login&quot;</span>)    <span class="hljs-comment">//form表单提交地址（POST）</span><br><span class="hljs-comment">//lambda表达式获取用户信息</span><br>.successHandler(<span class="hljs-built_in">this</span>::onAuthenticationSuccess)<br>.permitAll()    <span class="hljs-comment">//登陆页面也需要允许所有人访问</span><br><br><span class="hljs-comment">//退出</span><br>.and()<br>.logout()<br>.logoutUrl(<span class="hljs-string">&quot;/api/auth/logout&quot;</span>)    <span class="hljs-comment">//退出登陆的请求地址</span><br>.logoutSuccessUrl(<span class="hljs-string">&quot;/page/auth/login&quot;</span>)    <span class="hljs-comment">//退出后重定向的地址</span><br></code></pre></td></tr></table></figure><h4 id="静态文件调整"><a href="#静态文件调整" class="headerlink" title="静态文件调整"></a>静态文件调整</h4><p>单独对文件夹外面的静态资源的地址进行配置</p><p><em><strong>thymeleaf链接地址</strong></em>要加斜杠表示的是WEB-INF根目录,如果不加斜杠表示的就是当前目录。</p><p>本项目的一大工程就是将原文的链接换成thymeleaf版本的链接</p><p>包括html文件夹中的资源地址</p><p><img src="/image/22.07.26/image_hfZIEGY5m4.png"></p><p>MvcConfiguration</p><p>静态文件并不需要多做任何改变。</p><h4 id="重定向index分类工作"><a href="#重定向index分类工作" class="headerlink" title="重定向index分类工作"></a>重定向index分类工作</h4><h4 id="登录POST请求报错"><a href="#登录POST请求报错" class="headerlink" title="登录POST请求报错"></a>登录POST请求报错</h4><p>原来的请求登录doLogin请求换成Thymeleaf样式的连接并且加上斜杠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/api/auth/login&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="页面搭建"><a href="#页面搭建" class="headerlink" title="页面搭建"></a>页面搭建</h3><h4 id="Controller权限"><a href="#Controller权限" class="headerlink" title="Controller权限"></a>Controller权限</h4><p>我象征的东拼西凑了一下网页，结果发现点book按钮的时候，不能进去（网页一片白）？</p><p>结果发现是没有获取用户信息，所以给我拦住了所以我们新对Controller进行修改.</p><p>我们在写Controller的时候设置了两个参数，一个是Session，session让我们通过Security，model是为了向前端传入数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">book</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,service.findUser(session));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/admin/book&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="–管理员图书管理"><a href="#–管理员图书管理" class="headerlink" title="–管理员图书管理"></a>–管理员图书管理</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>首先将前端页面配置好。再实现网页进入（包括点击侧边栏的Thymeleaf链接和Controller中的身份认证页面跳转）</p><p><img src="/image/22.07.26/image_YqIbYEI-EE.png"></p><h3 id="页面上"><a href="#页面上" class="headerlink" title="页面上"></a>页面上</h3><p>可以设置图书展示和图书删除在一个页面，增加图书再另一个界面。</p><h3 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h3><p>我们将展示放在admin页面controller中，将添加删除放在admin api controller中，将页面和操作明确区分开来。</p><h2 id="查询图书列表"><a href="#查询图书列表" class="headerlink" title="查询图书列表"></a>查询图书列表</h2><p>思路就是先写前端对应的输出位置，然后从后端实体类→mapper→service→Controller→前端</p><h4 id="Book实体类"><a href="#Book实体类" class="headerlink" title="Book实体类"></a>Book实体类</h4><p>想要查询书籍列表我们首先要有实体类依托</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    String title;<br>    String desc;<br>    <span class="hljs-type">double</span> price;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BookMapper"><a href="#BookMapper" class="headerlink" title="BookMapper"></a>BookMapper</h4><p>有了实体类我们可以通过List&lt;实体类&gt;进行查询图书列表合集</p><p>要打上<code>@Mapper</code>注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from book&quot;)</span><br>    List&lt;Book&gt; <span class="hljs-title function_">allBook</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BookService"><a href="#BookService" class="headerlink" title="BookService"></a>BookService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BookServiceImpl"><a href="#BookServiceImpl" class="headerlink" title="BookServiceImpl"></a>BookServiceImpl</h4><p>我们将mapper查到的东西原封不动的返回到Controller</p><p>Service调用mapper的方法</p><p>使用<code>@Service</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    BookMapper mapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mapper.allBook();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AdminPageController"><a href="#AdminPageController" class="headerlink" title="AdminPageController"></a>AdminPageController</h4><p>Controller调用Service方法</p><p>我们通过model变量将查到的列表再一并传给前端页面，我们的目的是直接让Thymeleaf模板进行解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>BookService bookService;<br><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">book</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,service.findUser(session));<br>    model.addAttribute(<span class="hljs-string">&quot;bookList&quot;</span>, bookService.getAllBook());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/admin/book&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="book-html"><a href="#book-html" class="headerlink" title="book.html"></a>book.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--源代码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;abook : $&#123;bookList&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;#&#x27;+$&#123;abook.getId()&#125;&quot;</span>&gt;</span>#JH2033<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;《&#x27;+$&#123;abook.getTitle()&#125;+&#x27;》&#x27;&quot;</span>&gt;</span>#JH2033<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;abook.getDesc()&#125;&quot;</span>&gt;</span>22/06/2021<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;￥&#x27;+$&#123;abook.getPrice()&#125;&quot;</span>&gt;</span>$600<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;relative&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--删除书籍--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;action-btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--th:href=&quot;&#x27;delete-book?bid=&#x27;+$&#123;book.getBid()&#125;&quot;&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;default-size &quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 341.333 341.333 &quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">g</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">g</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">g</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M170.667,85.333c23.573,0,42.667-19.093,42.667-42.667C213.333,19.093,194.24,0,170.667,0S128,19.093,128,42.667 C128,66.24,147.093,85.333,170.667,85.333z &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M170.667,128C147.093,128,128,147.093,128,170.667s19.093,42.667,42.667,42.667s42.667-19.093,42.667-42.667 S194.24,128,170.667,128z &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M170.667,256C147.093,256,128,275.093,128,298.667c0,23.573,19.093,42.667,42.667,42.667s42.667-19.093,42.667-42.667 C213.333,275.093,194.24,256,170.667,256z &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/image/22.07.26/image_fyFy3Rit4X.png"></p><p><img src="/image/22.07.26/image_a0sUQexnbG.png"></p><h4 id="怎么书籍id都是0-呢"><a href="#怎么书籍id都是0-呢" class="headerlink" title="怎么书籍id都是0 呢"></a>怎么书籍id都是0 呢</h4><p>是没有映射好，我们数据库中的字段是bid，我们应该给<strong>实体类中的字段和前端页面改成bid</strong>，这样就可以了。中间不用改，因为中间没涉及到具体的参数。</p><h2 id="删除图书"><a href="#删除图书" class="headerlink" title="删除图书"></a>删除图书</h2><h4 id="BookMapper-1"><a href="#BookMapper-1" class="headerlink" title="BookMapper"></a>BookMapper</h4><p>我们知道删除的依据是id</p><p>我们先在mapper中进行通过id删除书籍的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Delete(&quot;delete from book where bid = #&#123;bid&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(<span class="hljs-type">int</span> bid)</span>;<br></code></pre></td></tr></table></figure><h4 id="BookService-1"><a href="#BookService-1" class="headerlink" title="BookService"></a>BookService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(<span class="hljs-type">int</span> bid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BookServiceImpl-1"><a href="#BookServiceImpl-1" class="headerlink" title="BookServiceImpl"></a>BookServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(<span class="hljs-type">int</span> bid)</span> &#123;<br>    mapper.deleteBook(bid);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller-3"><a href="#Controller-3" class="headerlink" title="Controller"></a>Controller</h4><p>Controller部分我们进行详细的划分，将删除操作划分到api&#x2F;admin中，将展示和操作划分成两个部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminApiController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    BookService service;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/del-book&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        service.deleteBook(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/page/admin/book&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Security权限配置"><a href="#Security权限配置" class="headerlink" title="Security权限配置"></a>Security权限配置</h4><p>将api&#x2F;admin的权限分配给admin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/page/user/**&quot;</span>,<span class="hljs-string">&quot;/api/user/**&quot;</span>).hasRole(<span class="hljs-string">&quot;user&quot;</span>)<br>.antMatchers(<span class="hljs-string">&quot;/page/admin/**&quot;</span>,<span class="hljs-string">&quot;/api/admin/**&quot;</span>).hasRole(<span class="hljs-string">&quot;admin&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="触发器配置"><a href="#触发器配置" class="headerlink" title="触发器配置"></a>触发器配置</h4><p>删除书之前，删除借阅信息</p><p>所以：触发器设置给book表，在删除操作之前从borrow中删除bid&#x3D;old.bid</p><p><img src="/image/22.07.26/image_T-939rAeUQ.png"></p><h4 id="book-html-1"><a href="#book-html-1" class="headerlink" title="book.html"></a>book.html</h4><p>路径极其容易出错。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;action-btn&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/api/admin/del-book?id=&#125;+$&#123;abook.getBid()&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="增加图书"><a href="#增加图书" class="headerlink" title="增加图书"></a>增加图书</h2><h3 id="按钮进入页面page"><a href="#按钮进入页面page" class="headerlink" title="按钮进入页面page"></a>按钮进入页面page</h3><h4 id="前端按钮"><a href="#前端按钮" class="headerlink" title="前端按钮"></a>前端按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-btn&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/page/admin/add-book&#125;&quot;</span>&gt;</span>添加图书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="AdminPageController-1"><a href="#AdminPageController-1" class="headerlink" title="AdminPageController"></a>AdminPageController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/add-book&quot;,method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,service.findUser(session));<br>    model.addAttribute(<span class="hljs-string">&quot;bookList&quot;</span>, bookService.getAllBook());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/admin/add-book&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p>我象征的东拼西凑了一下网页，结果发现点book按钮的时候，不能进去（网页一片白）？</p><p>结果发现是没有获取用户信息，所以给我拦住了所以我们新对Controller进行修改.</p><p>我们在写Controller的时候设置了两个参数，一个是Session，session让我们通过Security，model是为了向前端传入数值。</p><h3 id="添加图书api"><a href="#添加图书api" class="headerlink" title="添加图书api"></a>添加图书api</h3><h4 id="简单写一下Controller"><a href="#简单写一下Controller" class="headerlink" title="简单写一下Controller"></a>简单写一下Controller</h4><p>简单写一下add-book的apiController，将前端的数值传入Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/add-book&quot;,method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;title&quot;)</span> String title,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;desc&quot;)</span> String desc,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;price&quot;)</span> String price)</span>&#123;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/page/admin/add-book&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BookMapper-2"><a href="#BookMapper-2" class="headerlink" title="BookMapper"></a>BookMapper</h4><p>desc是关键字，所以我们要加上飘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;insert into book(title,`desc`,price) values(#&#123;title&#125;,#&#123;desc&#125;,#&#123;price&#125;)&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;title&quot;)</span> String title, <span class="hljs-meta">@Param(&quot;desc&quot;)</span> String desc,<span class="hljs-meta">@Param(&quot;price&quot;)</span> <span class="hljs-type">double</span> price)</span>;<br><br></code></pre></td></tr></table></figure><h4 id="BookService-2"><a href="#BookService-2" class="headerlink" title="BookService"></a>BookService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(String title,String desc,<span class="hljs-type">double</span> price)</span>;<br></code></pre></td></tr></table></figure><h4 id="BookServiceImpl-2"><a href="#BookServiceImpl-2" class="headerlink" title="BookServiceImpl"></a>BookServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(String title, String desc, <span class="hljs-type">double</span> price)</span> &#123;<br>    mapper.addBook(title,desc,price);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller-4"><a href="#Controller-4" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/add-book&quot;,method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addBook</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;title&quot;)</span> String title,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;desc&quot;)</span> String desc,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(&quot;price&quot;)</span> <span class="hljs-type">double</span> price)</span>&#123;<br>    service.addBook(title,desc,price);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/page/admin/book&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="–学生借阅管理"><a href="#–学生借阅管理" class="headerlink" title="–学生借阅管理"></a>–学生借阅管理</h1><h2 id="显示在馆书籍list"><a href="#显示在馆书籍list" class="headerlink" title="显示在馆书籍list"></a>显示在馆书籍list</h2><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>可以通过sql语句进行筛选，我们在这里选择的是通过Service进行筛选。</p><p>先通过bookmapper查到所有书籍，再通过borrowmapper查到所有的借阅信息。</p><p>怎么才能进行筛选呢？</p><p>我们在Service中利用实体类获取了所有的borrow的bid成了一个数字列表。</p><p>再将books中bid再数字列表中的book对象删掉。</p><h4 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h4><p>bookmapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from book&quot;)</span><br>List&lt;Book&gt; <span class="hljs-title function_">allBook</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>borrowmapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from borrow&quot;)</span><br>List&lt;Borrow&gt; <span class="hljs-title function_">borrowList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取全部书籍信息</span><br>List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//获取在馆书籍</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBookWithoutBorrow</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="ServiceImpl"><a href="#ServiceImpl" class="headerlink" title="ServiceImpl"></a>ServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>BookMapper mapper;<br><span class="hljs-meta">@Resource</span><br>BorrowMapper borrowmapper;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBook</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mapper.allBook();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAllBookWithoutBorrow</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Book&gt; books = mapper.allBook();<br>    List&lt;Integer&gt; borrows = borrowmapper.borrowList()<br>            .stream()<br>            .map(Borrow::getBid)<br>            .collect(Collectors.toList());<br>    <span class="hljs-keyword">return</span> books<br>            .stream()<br>            .filter(book -&gt; !borrows.contains(book.getBid()))<br>            .collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller-5"><a href="#Controller-5" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,service.findUser(session));<br>    model.addAttribute(<span class="hljs-string">&quot;bookList&quot;</span>, bookService.getAllBookWithoutBorrow());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/user/index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;bbook:$&#123;bookList&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;#&#x27;+$&#123;bbook.getBid()&#125;&quot;</span>&gt;</span>书籍id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;《&#x27;+$&#123;bbook.getTitle()&#125;+&#x27;》&#x27;&quot;</span>&gt;</span>可借书籍<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;bbook.getDesc()&#125;&quot;</span>&gt;</span>书籍描述<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;bbook.getPrice()&#125;&quot;</span>&gt;</span>书籍价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="图书借阅api-amp-x20"><a href="#图书借阅api-amp-x20" class="headerlink" title="图书借阅api&amp;#x20;"></a>图书借阅api&amp;#x20;</h2><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>我们的本意其实只是想输入sid和bid直接进行添加，可是虽然bid我们能获取到，但是sid我们并不能从页面中直接获取。（但是我们可以获得uid）</p><p>我们之前在student表中通过uid查找到sid，把sid传到service，由service调用mapper的添加操作。</p><h4 id="Mapper-2"><a href="#Mapper-2" class="headerlink" title="Mapper"></a>Mapper</h4><p>borrowmapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;insert into borrow(bid,sid,`time`) values(#&#123;bid&#125;,#&#123;sid&#125;,NOW())&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;bid&quot;)</span> <span class="hljs-type">int</span> bid,<span class="hljs-meta">@Param(&quot;sid&quot;)</span> <span class="hljs-type">int</span> sid)</span>;<br></code></pre></td></tr></table></figure><p>usermapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select sid from student where uid = #&#123;uid&#125;&quot;)</span><br>Integer <span class="hljs-title function_">getSidByUserId</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;<br><br></code></pre></td></tr></table></figure><h4 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//借书</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">borrowBook</span><span class="hljs-params">(<span class="hljs-type">int</span> bid,<span class="hljs-type">int</span> sid)</span>;<br></code></pre></td></tr></table></figure><h4 id="ServiceImpl-1"><a href="#ServiceImpl-1" class="headerlink" title="ServiceImpl"></a>ServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>BorrowMapper mapper;<br><span class="hljs-meta">@Resource</span><br>UserMapper usermapper;<br><span class="hljs-comment">//借书</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">borrowBook</span><span class="hljs-params">(<span class="hljs-type">int</span> bid,<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> usermapper.getSidByUserId(id);<br>    <span class="hljs-keyword">if</span>(sid==<span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">return</span>;&#125;<br>    mapper.addBorrow(bid,sid);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller-6"><a href="#Controller-6" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserApiController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    BorrowService service;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/borrow-book&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">borrowBook</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> <span class="hljs-type">int</span> bid,</span><br><span class="hljs-params">                             <span class="hljs-meta">@SessionAttribute(&quot;user&quot;)</span>AuthUser user)</span>&#123;<br>        service.borrowBook(bid, user.getId());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/page/user/book&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;action-btn&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/api/user/borrow-book?id=&#125;+$&#123;bbook.getBid()&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="–借阅信息展示"><a href="#–借阅信息展示" class="headerlink" title="–借阅信息展示"></a>–借阅信息展示</h1><h3 id="所有借阅信息"><a href="#所有借阅信息" class="headerlink" title="所有借阅信息"></a>所有借阅信息</h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>在查询所有书籍时逻辑较为简单，我们定义一个比较全面的borrow实体类，想要通过多表联查的方式将列表（List&lt;Borrow&gt;）直接查到并放到前端进行解析。在Controller层，除了让页面可以正常展示的user授权过程，另加了一个列表赋值的过程。</p><h4 id="Borrow实体类"><a href="#Borrow实体类" class="headerlink" title="Borrow实体类"></a>Borrow实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Borrow</span> &#123;<br>    <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-type">int</span> bid;<br>    String title;<br>    String desc;<br>    <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-type">int</span> sid;<br>    String name;<br>    String sex;<br>    String grade;<br><br>    Date time;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BorrowMapper"><a href="#BorrowMapper" class="headerlink" title="BorrowMapper"></a>BorrowMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查看所有借阅信息</span><br><span class="hljs-meta">@Select(&quot;SELECT * FROM (SELECT * FROM borrow LEFT JOIN book USING (bid)) e LEFT JOIN student USING (sid)&quot;)</span><br>List&lt;Borrow&gt; <span class="hljs-title function_">allBorrowList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="Service-2"><a href="#Service-2" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示所有借阅信息</span><br>List&lt;Borrow&gt; <span class="hljs-title function_">allBorrowList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="ServiceImpl-2"><a href="#ServiceImpl-2" class="headerlink" title="ServiceImpl"></a>ServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查看所有借阅信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Borrow&gt; <span class="hljs-title function_">allBorrowList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mapper.allBorrowList();<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Controller-7"><a href="#Controller-7" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,service.findUser(session));<br>    model.addAttribute(<span class="hljs-string">&quot;allBorrowList&quot;</span>,borrowservice.allBorrowList());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/admin/index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端页面-2"><a href="#前端页面-2" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;borrow:$&#123;allBorrowList&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;#&#x27;+$&#123;borrow.getId()&#125;&quot;</span>&gt;</span>借阅ID<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;《&#x27;+$&#123;borrow.getTitle()&#125;+&#x27;》&#x27;&quot;</span>&gt;</span>书籍名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;borrow.getName()&#125;&quot;</span>&gt;</span>借阅人<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;#&#x27;+$&#123;borrow.getSid()&#125;&quot;</span>&gt;</span>借阅人学号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;borrow.getTime()&#125;&quot;</span>&gt;</span>借阅时间<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="学生借阅信息"><a href="#学生借阅信息" class="headerlink" title="学生借阅信息"></a>学生借阅信息</h3><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>我们获得个人借阅信息后，可以通过多表联查的方式获取到当前学生的借阅列表，将列表传到service，再传到controller，controller直接传到Thymeleaf进行列表解析。</p><p>此过程比查询全部的列表就多在要将sid从前端传到mapepr中。可是我们没有什么直接的post请求，确实，但是我们发现我们可以从id入手。我们在Service中通过id查找sid，再在service中将sid放入查询所用的mapper中，这样就可以完美的查到了。</p><p>前端的id传到service，由service变成sid传给mapper，mapper查到的再返回给service，通过service返回给Controller，可见service在其中的重要作用。</p><h4 id="BorrowMapper-1"><a href="#BorrowMapper-1" class="headerlink" title="BorrowMapper"></a>BorrowMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查看个人借阅信息</span><br><span class="hljs-meta">@Select(&quot;SELECT * FROM (SELECT * FROM borrow LEFT JOIN book USING (bid)) e LEFT JOIN student USING (sid) WHERE sid = #&#123;sid&#125;&quot;)</span><br>List&lt;Borrow&gt; <span class="hljs-title function_">ownBorrowList</span><span class="hljs-params">(<span class="hljs-type">int</span> sid)</span>;<br></code></pre></td></tr></table></figure><h4 id="Service-3"><a href="#Service-3" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示个人借阅信息</span><br>List&lt;Borrow&gt; <span class="hljs-title function_">ownBorrowList</span><span class="hljs-params">(HttpSession session)</span>;<br></code></pre></td></tr></table></figure><h4 id="ServiceImpl-3"><a href="#ServiceImpl-3" class="headerlink" title="ServiceImpl"></a>ServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示个人借阅信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Borrow&gt; <span class="hljs-title function_">ownBorrowList</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    <span class="hljs-type">AuthUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (AuthUser) session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> usermapper.getSidByUserId(user.getId());<br>    <span class="hljs-keyword">return</span> mapper.ownBorrowList(sid);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller-8"><a href="#Controller-8" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">book</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,service.findUser(session));<br>    model.addAttribute(<span class="hljs-string">&quot;borrowList&quot;</span>, borrowService.ownBorrowList(session));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/user/book&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端页面-3"><a href="#前端页面-3" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;borrow:$&#123;borrowList&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;#&#x27;+$&#123;borrow.getBid()&#125;&quot;</span>&gt;</span>书籍ID<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;《&#x27;+$&#123;borrow.getTitle()&#125;+&#x27;》&#x27;&quot;</span>&gt;</span>书籍名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;borrow.getDesc()&#125;&quot;</span>&gt;</span>简介<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;borrow.getPrice()&#125;&quot;</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;borrow.getTime()&#125;&quot;</span>&gt;</span>借阅时间<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="报错部分"><a href="#报错部分" class="headerlink" title="报错部分"></a>报错部分</h3><blockquote><p>mapper传多个值要有@Param</p></blockquote><blockquote><p>报错说del-borrow不可用</p><p><img src="/image/22.07.26/image_G59qvD8Xtl.png"></p><p>解决：果然是前端页面和mapper网址相关部分写错了。borrow写成了borrpw</p></blockquote><blockquote><p>借阅时间不能正常显示问题</p><p>因为在实体类中将时间定义的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Date date;<br></code></pre></td></tr></table></figure><p>前端<code>getDate()</code></p><p>正确应该定义成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Date time;<br></code></pre></td></tr></table></figure><p>前端<code>getTime()</code></p></blockquote><h1 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h1><h3 id="四小块"><a href="#四小块" class="headerlink" title="四小块"></a>四小块</h3><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>我们创建了一个实体类，将数据存储在其中。在我们service中创建实体类对象在其中设置值。因为我们将这个对象返回到Controller，所以我们可以直接调用其中的属性进行前端解析。</p><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShowCount</span> &#123;<br>    <span class="hljs-type">int</span> bookCount;<br>    <span class="hljs-type">int</span> studentCount;<br>    <span class="hljs-type">int</span> borrowCount;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ShowService"><a href="#ShowService" class="headerlink" title="ShowService"></a>ShowService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShowService</span> &#123;<br>    ShowCount <span class="hljs-title function_">showCount</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ShowServiceImpl"><a href="#ShowServiceImpl" class="headerlink" title="ShowServiceImpl"></a>ShowServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShowServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShowService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    BookMapper bookMapper;<br>    <span class="hljs-meta">@Resource</span><br>    BorrowMapper borrowMapper;<br>    <span class="hljs-meta">@Resource</span><br>    UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ShowCount <span class="hljs-title function_">showCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShowCount</span>(userMapper.getStudentCount(),<br>                bookMapper.getBookCount(),<br>                borrowMapper.getBorrowCount());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller-9"><a href="#Controller-9" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpSession session, Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,service.findUser(session));<br>    model.addAttribute(<span class="hljs-string">&quot;allBorrowList&quot;</span>,borrowservice.allBorrowList());<br>    model.addAttribute(<span class="hljs-string">&quot;bookCounts&quot;</span>,showService.showCount());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/admin/index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-title&quot;</span>&gt;</span>学生数量<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-card-title&quot;</span>  <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;bookCounts.studentCount&#125;&quot;</span>&gt;</span>66k<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-title&quot;</span>&gt;</span>书籍数量<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-card-title&quot;</span>  <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;bookCounts.bookCount&#125;&quot;</span>&gt;</span>15k<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-title&quot;</span>&gt;</span>借阅数量<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-card-title&quot;</span>  <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;bookCounts.borrowCount&#125;&quot;</span>&gt;</span>420k<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>                                                                       <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Java Web的图书管理系统</title>
    <link href="/2022/07/06/JavaWeb/"/>
    <url>/2022/07/06/JavaWeb/</url>
    
    <content type="html"><![CDATA[<p>使用Servlet+Mybatis+Thymeleaf等框架与技术对控制台管理系统的进一步完善，使用Thymeleaf作为前端模板进行展示实现有效的前后端分离。</p><span id="more"></span><h2 id="项目成果展示"><a href="#项目成果展示" class="headerlink" title="项目成果展示"></a>项目成果展示</h2><p><img src="/image/22.07.06/shifan1.jpg"></p><p><img src="/image/22.07.06/shifan2.jpg"></p><h2 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h2><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><ul><li><p><input checked="" disabled="" type="checkbox"> 图书管理员的登陆、权限校验、拦截</p></li><li><p><input checked="" disabled="" type="checkbox"> 用户退出</p></li><li><p><input checked="" disabled="" type="checkbox"> 图书的列表浏览（包括书籍是否被借出的状态也要进行显示）</p></li><li><p><input checked="" disabled="" type="checkbox"> 学生的列表浏览</p></li><li><p><input checked="" disabled="" type="checkbox"> 查看所有的借阅列表</p></li><li><p><input checked="" disabled="" type="checkbox"> 添加借阅信息</p></li><li><p><input checked="" disabled="" type="checkbox"> 图书的添加和删除</p></li><li><p><input checked="" disabled="" type="checkbox"> 学生的添加和删除</p></li></ul><h3 id="框架结构分析"><a href="#框架结构分析" class="headerlink" title="框架结构分析"></a>框架结构分析</h3><p>本次实战使用到的框架：Servlet+Mybatis+Thymeleaf</p><p>在编写的时候，为了使得整体的代码简洁高效，我们严格遵守三层架构模式：</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/08/1535337833-4838-1359192395-1143.png"></p><p>**表示层(前端页面+Servlet)**：Servlet向service层索要数据，接收前端页面的请求（发送页面解析）与响应（上下文）</p><p>**业务逻辑层(Service+ServiceImpl)**：才是用于进行数据处理的地方。逻辑层通过mapper索要数据，向servlet反应数据。</p><p><strong>数据访问层（Mybatis+mapper）</strong>：数据访问层向下管数据库索要数据，向上为Service提供接口方法。</p><p><strong>实体类</strong>：实体类贯穿三大层次，将数据封装在实体类中，以便于数据在三层架构中进行数据传递。</p><h3 id="关于Thymeleaf"><a href="#关于Thymeleaf" class="headerlink" title="关于Thymeleaf"></a>关于Thymeleaf</h3><p>使用Thymeleaf可以有效地避免前后端耦合的情况，不过由于并没有Spring配置文件可以调整Thymeleaf的编码，项目的编码问题一直都在servlet和html中进行调配解决，在全局项目和当前项目都设置为utf-8之后，将html(thymeleaf编码设置为gbk)，并在servlet需要的方法中（doGet或者doPost中进行编码设置）可以使中文不会乱码。</p><p>前端模板如下：</p><p><a href="file/SplashDash_ZSnPE0iiz_.7z">SplashDash.7z</a></p><h2 id="Login页面的搭建以及相关配置"><a href="#Login页面的搭建以及相关配置" class="headerlink" title="Login页面的搭建以及相关配置"></a>Login页面的搭建以及相关配置</h2><p>此处进行数据库表格的搭建、创建项目环境、进行Login页面的简单进入。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="创建admin表并插入数据"><a href="#创建admin表并插入数据" class="headerlink" title="创建admin表并插入数据"></a>创建admin表并插入数据</h4><p><img src="/image/22.07.06/image_OBZKWh9UWr.png"></p><p><img src="/image/22.07.06/image_3lzQw7bc_o.png"></p><h3 id="新建项目BookManagerWeb"><a href="#新建项目BookManagerWeb" class="headerlink" title="新建项目BookManagerWeb"></a>新建项目BookManagerWeb</h3><p><img src="/image/22.07.06/image_GnQxHLJYWI.png"></p><p><img src="/image/22.07.06/image_nrQCuQ1psE.png"></p><p>清空自带的文件</p><p><img src="/image/22.07.06/image_aSmJiQ-T2U.png"></p><h3 id="添加Maven依赖和插件"><a href="#添加Maven依赖和插件" class="headerlink" title="添加Maven依赖和插件"></a>添加Maven依赖和插件</h3><p>①如果是Tomcat10以上的版本要修改servlet</p><p>②添加lombok，junit5，jdbc，mybaits</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Lombok--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--JDBC--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>③Maven构建</p><h3 id="导入login页面和static资源"><a href="#导入login页面和static资源" class="headerlink" title="导入login页面和static资源"></a>导入login页面和static资源</h3><p>加上thymeleaf约束</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">xmlns:th=&quot;http://www.thymeleaf.org&quot;<br></code></pre></td></tr></table></figure><p><img src="/image/22.07.06/image_85j3ZuwKSv.png"></p><blockquote><p>问题：为什么login.html文件放在resources文件夹？</p><p>答案：因为login页面需要被Thymeleaf进行动态解析</p></blockquote><h3 id="创建Servlet文件夹以及LoginServlet"><a href="#创建Servlet文件夹以及LoginServlet" class="headerlink" title="创建Servlet文件夹以及LoginServlet"></a>创建Servlet文件夹以及LoginServlet</h3><p><img src="/image/22.07.06/image_flKqCoBYFH.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        ThymeleafUtil.process(<span class="hljs-string">&quot;login.html&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(),resp.getWriter());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="修改Tomcat默认url和部署路径"><a href="#修改Tomcat默认url和部署路径" class="headerlink" title="修改Tomcat默认url和部署路径"></a>修改Tomcat默认url和部署路径</h3><p><img src="/image/22.07.06/image_-KXgxZq4zp.png"></p><p><img src="/image/22.07.06/image_J112XgIKPM.png"></p><h3 id="创建工具类文件夹以及Thymeleaf工具类"><a href="#创建工具类文件夹以及Thymeleaf工具类" class="headerlink" title="创建工具类文件夹以及Thymeleaf工具类"></a>创建工具类文件夹以及Thymeleaf工具类</h3><p>对调用的工具类方法进行优化</p><p>原代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> TemplateEngine engine;<br>    <span class="hljs-keyword">static</span>  &#123;<br>        engine = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateEngine</span>();<br>        <span class="hljs-type">ClassLoaderTemplateResolver</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoaderTemplateResolver</span>();<br>        engine.setTemplateResolver(r);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TemplateEngine <span class="hljs-title function_">getEngine</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> engine;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化后节省了传值的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> TemplateEngine engine;<br>    <span class="hljs-keyword">static</span>  &#123;<br>        engine = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateEngine</span>();<br>        <span class="hljs-type">ClassLoaderTemplateResolver</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoaderTemplateResolver</span>();<br>        engine.setTemplateResolver(r);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String template, IContext context, Writer writer)</span>&#123;<br>        engine.process(template, context, writer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="进行运行试验"><a href="#进行运行试验" class="headerlink" title="进行运行试验"></a>进行运行试验</h3><blockquote><p>报错：至少有一个JAR被扫描用于TLD但尚未包含TLD。一个或多个筛选器启动失败</p><p>解决：<code>@WebServlet</code>错写成了<code>@WebFilter</code>，改回去就好了（查了三小时，裂开）</p><p>成功的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-comment">//设置编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        ThymeleafUtil.getEngine().process(<span class="hljs-string">&quot;login.html&quot;</span>, context, resp.getWriter());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>失败的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        ThymeleafUtil.process(<span class="hljs-string">&quot;login.html&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(),resp.getWriter());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="登陆权限的设置"><a href="#登陆权限的设置" class="headerlink" title="登陆权限的设置"></a>登陆权限的设置</h2><p>在此处我们要设置登陆权限的控制（验证身份）。在设置了全局过滤器的情况下，只能通过提交用户密码进行登录。对表单中的数据进行收集，通过doPost方法进行提交之后，servlet调用ServiceImpl方法进行验证，如果true则输出LoginSuccess。ServiceImpl属于实现Service，Service调用Mapper中的方法，Mapper链接Mybatis可以对数据库进行操作。</p><h3 id="设置Servlet字符编码"><a href="#设置Servlet字符编码" class="headerlink" title="设置Servlet字符编码"></a>设置Servlet字符编码</h3><p>html不设置gbk会出现中文乱码，Servlet不设置req resp为utf-8会显示问号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置编码</span><br>req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="设置表单和LoginServlet的doPOST"><a href="#设置表单和LoginServlet的doPOST" class="headerlink" title="设置表单和LoginServlet的doPOST"></a>设置表单和LoginServlet的doPOST</h3><p>给Form加上method   action   修改username password remember-me button</p><p>给username和password加上name</p><p><img src="/image/22.07.06/image_7wKsp5l5uW.png"></p><p><img src="/image/22.07.06/image_LWObiFgZst.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ad-btn ad-login-member&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>doPost</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="先设置过滤器"><a href="#先设置过滤器" class="headerlink" title="先设置过滤器"></a>先设置过滤器</h3><p>①可以让你访问静态资源</p><p>②不是静态资源就要验证登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br>        <span class="hljs-comment">//判断是否为静态资源,如果是静态资源就放行。如果不是，并且没登陆，那就得回去登陆了。</span><br>        <span class="hljs-comment">//如果不是静态资源，user还是空，您登陆的不是login,你就得去登陆</span><br>        <span class="hljs-comment">//其他情况都给你钥匙</span><br>        <span class="hljs-keyword">if</span>(!url.contains(<span class="hljs-string">&quot;/static/&quot;</span>)&amp;&amp;!url.endsWith(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            <span class="hljs-comment">//验证登录</span><br>        &#125;<br>        <span class="hljs-comment">//交给过滤链处理</span><br>        chain.doFilter(req, res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设置User实体类"><a href="#设置User实体类" class="headerlink" title="设置User实体类"></a>设置User实体类</h3><p>以进行数值查询与比对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    String username;<br>    String nickname;<br>    String password;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完善Filter中的判断语句"><a href="#完善Filter中的判断语句" class="headerlink" title="完善Filter中的判断语句"></a>完善Filter中的判断语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(!url.contains(<span class="hljs-string">&quot;/static/&quot;</span>)&amp;&amp;!url.endsWith(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>            <span class="hljs-comment">//判断是否未登陆</span><br>            <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span> &amp;&amp; !url.endsWith(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>                res.sendRedirect(<span class="hljs-string">&quot;login&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//交给过滤链处理</span><br>        chain.doFilter(req, res);<br></code></pre></td></tr></table></figure><p>此验证的是登录成功之后，LoginServlet给你的user值，主要对比数据库还是在LoginServlet中</p><blockquote><p>问题：为什么允许静态变量进行访问呢？</p><p>答：因为主页的一些js,css都是属于静态变量中的一个部分。不允许访问主页会显示乱码。</p></blockquote><h3 id="配置Mybatis"><a href="#配置Mybatis" class="headerlink" title="配置Mybatis"></a>配置Mybatis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;com.book.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置了Mybatis当然要写Mapper接口-操作数据库的这一层"><a href="#配置了Mybatis当然要写Mapper接口-操作数据库的这一层" class="headerlink" title="配置了Mybatis当然要写Mapper接口(操作数据库的这一层)"></a>配置了Mybatis当然要写Mapper接口(操作数据库的这一层)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <br>    <span class="hljs-meta">@Select(&quot;select * from admin where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span><br>    User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username,<span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mybatis工具类"><a href="#Mybatis工具类" class="headerlink" title="Mybatis工具类"></a>Mybatis工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="业务逻辑层Service"><a href="#业务逻辑层Service" class="headerlink" title="业务逻辑层Service"></a>业务逻辑层Service</h3><p>(用于判断数据库中有没有用户名加密码，如果有就丢一个Session，原来是在Servlet,详情查看WebTest项目)</p><p>写UserService接口，在impl(implement实现)里面写上接口的实现类</p><p>我们验证结束后丢给Session,丢个User对象</p><p><img src="/image/22.07.06/image_x_TmOZByLy.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserService</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">auth</span><span class="hljs-params">(String username, String password, HttpSession session)</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserServiceImpl</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">auth</span><span class="hljs-params">(String username, String password, HttpSession session)</span> &#123;<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlsession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession())&#123;<br>            <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlsession.getMapper(UserMapper.class);<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUser(username,password);<br>            <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="LoginServlet的init和Post完善"><a href="#LoginServlet的init和Post完善" class="headerlink" title="LoginServlet的init和Post完善"></a>LoginServlet的init和Post完善</h3><p>对表单提交，以及登陆错误显示失败的逻辑进行完善</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    UserService service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-keyword">if</span>(req.getSession().getAttribute(<span class="hljs-string">&quot;login-failure&quot;</span>)!=<span class="hljs-literal">null</span>)&#123;<br>            context.setVariable(<span class="hljs-string">&quot;failure&quot;</span>,<span class="hljs-literal">true</span>);<br>            req.getSession().removeAttribute(<span class="hljs-string">&quot;login-failure&quot;</span>);<br>        &#125;<br>        ThymeleafUtil.process(<span class="hljs-string">&quot;login.html&quot;</span>,context,resp.getWriter());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">remember</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;remember&quot;</span>);<br>        <span class="hljs-keyword">if</span>(service.auth(username,password,req.getSession()))&#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;Login Success!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;login-failure&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>            <span class="hljs-built_in">this</span>.doGet(req,resp);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在Login-html加上if判断"><a href="#在Login-html加上if判断" class="headerlink" title="在Login.html加上if判断"></a>在Login.html加上if判断</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;failure&#125;&quot;</span>&gt;</span>请输出用户名和密码进行登陆<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;failure&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>您的用户名或密码输入不正确<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="将Mapper文件加改名成了dao"><a href="#将Mapper文件加改名成了dao" class="headerlink" title="将Mapper文件加改名成了dao"></a>将Mapper文件加改名成了dao</h3><h3 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h3><p><img src="/image/22.07.06/image_sd--Ze1IH_.png"></p><blockquote><p>报错：点了登录键没有效果</p><p>答：登录键没有改成button，并且设置了<code>JavaScript：void(0);</code>意思是不让人点。</p><p><img src="/image/22.07.06/image_DTpWoQYY9K.png"></p><p>改成</p><p><img src="/image/22.07.06/image_0PwOr-uLeP.png"></p></blockquote><h3 id="流程回顾"><a href="#流程回顾" class="headerlink" title="流程回顾"></a>流程回顾</h3><p>①用户输入的数据通过前端表单，到Servlet的doPost，使用Service的方法，Service使用Mapper定义的映射规则进行查询user对象，返回一个true或者false &amp;#x20;<br>②如果验证成功Servlet显示下一个页面 &amp;#x20;<br>③如果失败，会带着失败属性跳转到doGet请求，然后通过前端的if判断显示登陆失败。</p><h2 id="其他主要页面的搭建-退出功能"><a href="#其他主要页面的搭建-退出功能" class="headerlink" title="其他主要页面的搭建+退出功能"></a>其他主要页面的搭建+退出功能</h2><p>配置了其他页面的前端链接并对对应的链接编写了Servlet与之对应，并添加了退出逻辑。之前登录的之后，之所以可以全局页面进行浏览就是因为我们的请求中携带了session在Cookie中，退出逻辑正是对session进行清除并对主页进行重定向，所有的页面访问都会一并消失。</p><h3 id="添加页面测试"><a href="#添加页面测试" class="headerlink" title="添加页面测试"></a>添加页面测试</h3><p>插入index.html（框架支持和gbk）</p><p>IndexServlet以及doGet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//创建一个上下文对象</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-comment">//内容修改</span><br>        <span class="hljs-comment">//获取username放在页面右上角</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) req.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        context.setVariable(<span class="hljs-string">&quot;nickname&quot;</span>,user.getNickname());<br>        <span class="hljs-comment">//提交修改</span><br>        ThymeleafUtil.process(<span class="hljs-string">&quot;index.html&quot;</span>,context,resp.getWriter());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>登陆成功（Login-doPost）直接重定向，已经登陆的(Login-doGet)请求登陆页面也重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//取得表单中的用户信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">remember</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;remember-me&quot;</span>);<br>        <span class="hljs-comment">//采用Service中的逻辑语句进行比对</span><br>        <span class="hljs-comment">// 如果true则重定向到index</span><br>        <span class="hljs-keyword">if</span>(service.auth(username,password,req.getSession()))&#123;<br>            resp.sendRedirect(<span class="hljs-string">&quot;index&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//如果false则滚去重新进行登陆页面</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;login-failure&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>            <span class="hljs-built_in">this</span>.doGet(req,resp);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>进行测试是否可以正常打开</p><blockquote><p><strong>报错：加了页面之后还是没有，报错500</strong></p><p>解决：可以通过Maven-clean解决，如果clean之后还是报错再看程序问题</p></blockquote><h3 id="左侧面板设计"><a href="#左侧面板设计" class="headerlink" title="左侧面板设计"></a>左侧面板设计</h3><p>借阅信息（index）</p><p>图书列表浏览（books）</p><p>学生列表(students)</p><p><img src="/image/22.07.06/image_m3nxICxT6k.png"></p><h3 id="退出登录操作"><a href="#退出登录操作" class="headerlink" title="退出登录操作"></a>退出登录操作</h3><p>新建LogoutServlet，顺便整理Servlet包为不同的Servlet进行随意分类</p><p>如果有人想退出就请求logout，链接到LogoutServlet，servlet负责清除session以及重定向到主页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//LogoutSservlet</span><br><span class="hljs-meta">@WebServlet(&quot;/logout&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogoutServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//清除session</span><br>        req.getSession().removeAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//重定向</span><br>        resp.sendRedirect(<span class="hljs-string">&quot;login&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="index页面修改"><a href="#index页面修改" class="headerlink" title="index页面修改"></a>index页面修改</h3><p>删除不要的东西(收缩)</p><p>对应修改的内容放在Thymeleaf-doGet里面做替换</p><p>删除后可以建立Thymeleaf模板header.html，创建链接，主页面进行使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-wrapper main-header&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的模板使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 头部菜单栏引用模板header.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;header.html::title&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="添加Students和Books页面"><a href="#添加Students和Books页面" class="headerlink" title="添加Students和Books页面"></a>添加Students和Books页面</h3><p>简单配置好两个页面的html文件（从index复制过来进行修改）和对应的Servlet文件（对页面的主体内容进行修改）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookServlet</span><br><span class="hljs-meta">@WebServlet(&quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//创建一个上下文对象</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-comment">//提交修改</span><br>        ThymeleafUtil.process(<span class="hljs-string">&quot;books.html&quot;</span>,context,resp.getWriter());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//StudentServlet</span><br><span class="hljs-meta">@WebServlet(&quot;/students&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//创建一个上下文对象</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-comment">//提交修改</span><br>        ThymeleafUtil.process(<span class="hljs-string">&quot;students.html&quot;</span>,context,resp.getWriter());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h3><blockquote><p><strong>报错：BookServlet中的url链接错误</strong></p><p>解决：原因是Book中的@WebServlet(“”)中的book前没加斜杠</p></blockquote><h2 id="查询借阅信息"><a href="#查询借阅信息" class="headerlink" title="查询借阅信息"></a>查询借阅信息</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们要在删除和添加操作前面做查询操作，因为添加和删除操作没有设置返回值，成功与否都是查询进行反馈。首先实现的是借阅的信息，借阅信息通过mapper的联查语句对数据库进行操作（小知识，联查语句可以提前在可视化工具进行实验，避免之后发生问题），与添加和删除不同的是，查询运用到了集合类，将serviceimpl查到的结果列表整个返回给Servlet，Servlet也将整个列表返回给Thymeleaf，因为Thymeleaf可以自己解析列表，通过前端语句进行输出。</p><h3 id="Mapper按包注册"><a href="#Mapper按包注册" class="headerlink" title="Mapper按包注册"></a>Mapper按包注册</h3><p>修改mybatis的mapper注册，修改为一个包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mapper注册--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;com.book.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="Borrow实体类"><a href="#Borrow实体类" class="headerlink" title="Borrow实体类"></a>Borrow实体类</h3><p>创建borrow实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//borrow实体类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Borrow</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> book_id;<br>    String book_name;<br>    Date time;<br>    String student_name;<br>    <span class="hljs-type">int</span> student_id;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="BookService"><a href="#BookService" class="headerlink" title="BookService"></a>BookService</h3><p>书写接口方法等待ServiceImpl去进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//bookservice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    List&lt;Borrow&gt; <span class="hljs-title function_">getBorrorList</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="BookServiceImpl"><a href="#BookServiceImpl" class="headerlink" title="BookServiceImpl"></a>BookServiceImpl</h3><p>ServiceImpl每实现一个方法都要先创建sqlsession数据库连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ServiceImpl</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Borrow&gt; <span class="hljs-title function_">getBorrorList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//创建当前数据库连接对象</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlsession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession())&#123;<br>            <span class="hljs-type">BookMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlsession.getMapper(BookMapper.class);<br>            <span class="hljs-comment">//按照mapper查询借阅信息</span><br>            <span class="hljs-keyword">return</span> mapper.getBorrowList();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="BookMapper"><a href="#BookMapper" class="headerlink" title="BookMapper"></a>BookMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookMapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br><br>    <span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span><br><span class="hljs-meta">        @Result(column = &quot;bid&quot;,property = &quot;book_id&quot;),</span><br><span class="hljs-meta">        @Result(column = &quot;title&quot;,property = &quot;book_name&quot;),</span><br><span class="hljs-meta">        @Result(column = &quot;time&quot;,property = &quot;time&quot;),</span><br><span class="hljs-meta">        @Result(column = &quot;name&quot;,property = &quot;student_name&quot;),</span><br><span class="hljs-meta">        @Result(column = &quot;sid&quot;,property = &quot;student_id&quot;)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-meta">@Select(&quot;select * from borrow,student,book where borrow.bid = book.bid and borrow.sid = student.sid&quot;)</span><br>    List&lt;Borrow&gt; <span class="hljs-title function_">getBorrowList</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="IndexServlet"><a href="#IndexServlet" class="headerlink" title="IndexServlet"></a>IndexServlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">//获取借阅信息</span><br>    BookService service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//创建一个上下文对象</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        <span class="hljs-comment">//内容修改</span><br>        <span class="hljs-comment">//获取username放在页面右上角</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) req.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        context.setVariable(<span class="hljs-string">&quot;nickname&quot;</span>,user.getNickname());<br>        <span class="hljs-comment">//借阅信息列表整个返回到前端</span><br>        context.setVariable(<span class="hljs-string">&quot;borrow_list&quot;</span>,service.getBorrorList());<br>        <span class="hljs-comment">//提交修改</span><br>        ThymeleafUtil.process(<span class="hljs-string">&quot;index.html&quot;</span>,context,resp.getWriter());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>Servlet将整个列表返回给前端页面，通过前端的each循环进行对应展示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--前端输出--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span> = <span class="hljs-string">&quot;borrow:$&#123;borrow_list&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;#&#x27;+$&#123;borrow.getBook_id()&#125;&quot;</span>&gt;</span>我是ID<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;borrow.getBook_name()&#125;&quot;</span>&gt;</span>我是书名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;borrow.getTime()&#125;&quot;</span>&gt;</span>22/06/2021<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;borrow.getStudent_name()&#125;&quot;</span>&gt;</span>我是借阅人<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;#&#x27;+$&#123;borrow.getStudent_id()&#125;&quot;</span>&gt;</span>20191701<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="归还操作"><a href="#归还操作" class="headerlink" title="归还操作"></a>归还操作</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>归还操作类似后面的删除书籍、学生操作。在点击归还按钮之后，前端带着有id的doPost请求向Servlet进行申请。Servlet将ID转化为int形式然后传到Service，Service执行mapper中定义的删除方法。</p><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><p>点击归还操作后带着id提交申请到对应servlet</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;relative&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;action-btn &quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;return-book?id=&#x27;+$&#123;borrow.getId()&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="ReturnServlet"><a href="#ReturnServlet" class="headerlink" title="ReturnServlet"></a>ReturnServlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/return-book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">//获取借阅信息</span><br>    BookService service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//归还的是什么记录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-comment">//执行归还行为</span><br>        service.returnBook(id);<br>        <span class="hljs-comment">//归还之后重定向index</span><br>        resp.sendRedirect(<span class="hljs-string">&quot;index&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BookService-1"><a href="#BookService-1" class="headerlink" title="BookService"></a>BookService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    List&lt;Borrow&gt; <span class="hljs-title function_">getBorrorList</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnBook</span><span class="hljs-params">(String id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BookServiceImpl-1"><a href="#BookServiceImpl-1" class="headerlink" title="BookServiceImpl"></a>BookServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnBook</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-comment">//创建当前数据库连接对象</span><br>    <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlsession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession())&#123;<br>        <span class="hljs-type">BookMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlsession.getMapper(BookMapper.class);<br>        <span class="hljs-comment">//按照mapper删除借阅信息</span><br>        mapper.deleteBorrow(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BookMapper-1"><a href="#BookMapper-1" class="headerlink" title="BookMapper"></a>BookMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br><br>    <span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">            @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;bid&quot;,property = &quot;book_id&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;title&quot;,property = &quot;book_name&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;time&quot;,property = &quot;time&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;name&quot;,property = &quot;student_name&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;sid&quot;,property = &quot;student_id&quot;)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-meta">@Select(&quot;select * from borrow,student,book where borrow.bid = book.bid and borrow.sid = student.sid&quot;)</span><br>    List&lt;Borrow&gt; <span class="hljs-title function_">getBorrowList</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from borrow where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBorrow</span><span class="hljs-params">(String id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加借阅信息"><a href="#添加借阅信息" class="headerlink" title="添加借阅信息"></a>添加借阅信息</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>发送请求进行跳转的方法：</p><ol><li><p>单个使用html链接的方式进行直接的链接跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;add-borrow&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary squer-btn sm-btn&quot;</span>&gt;</span>添加借阅信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>如果是表单的话使用button（submit）+form(action和method)+name(每个属性有对应名字)</p></li></ol><p>添加借阅信息首先只能显示可以外借的图书，就要在列表中删除已经外借的书。为加强逻辑层的理解，我们将本应放在mapper层的图书筛选放到了Service层。</p><p>Get部分：我们点击href按钮进入doGet的addBorrow界面，mapper查到的是全部的书，service层将全部的书中已经借阅的部分按照id进行删除，返回剩余部分的列表返回给Servlet,前端通过select+option的each方法进行选择。学生部分逻辑相似只不过没有筛选部分相对简单。</p><p>Post部分：表单数据传到Servlet,Servlet将表单转换成数据。编写Mapper中的添加规则，Service浅浅实现，Impl具体实现。Servlet调用添加书籍的方法，重定向到index。</p><p>添加书籍和添加学生的逻辑类似，只不过要在doPost方法中进行文件编码转化。</p><h3 id="Get部分"><a href="#Get部分" class="headerlink" title="Get部分"></a>Get部分</h3><p>前端部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;region&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-form-label&quot;</span>&gt;</span>书籍<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;select2 form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;region&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;book.getBid()&#125;&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;book : $&#123;book_list&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;book.getTitle()&#125;&quot;</span>&gt;</span>Hawaii<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Servlet部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//设置编码</span><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>    <span class="hljs-comment">//创建一个上下文对象</span><br>    <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>    <span class="hljs-comment">//图书栏</span><br>    context.setVariable(<span class="hljs-string">&quot;book_list&quot;</span>,service.getActiveBookList());<br>    <span class="hljs-comment">//学生选择栏</span><br>    context.setVariable(<span class="hljs-string">&quot;student_list&quot;</span>,service.getStudentList());<br>    <span class="hljs-comment">//提交修改</span><br>    ThymeleafUtil.process(<span class="hljs-string">&quot;add-borrow.html&quot;</span>,context,resp.getWriter());<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Service部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查看过滤版本的书（borrow）</span><br>List&lt;Book&gt; <span class="hljs-title function_">getActiveBookList</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//查看借书的学生</span><br>List&lt;Student&gt; <span class="hljs-title function_">getStudentList</span><span class="hljs-params">()</span>;<br><br></code></pre></td></tr></table></figure><p>ServiceImpl部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取还能借的书</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getActiveBookList</span><span class="hljs-params">()</span> &#123;<br>    Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    <span class="hljs-built_in">this</span>.getBorrorList().forEach(borrow -&gt; set.add(borrow.getBook_id()));<br>    <span class="hljs-comment">//创建当前数据库连接对象</span><br>    <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlsession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession())&#123;<br>        <span class="hljs-type">BookMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlsession.getMapper(BookMapper.class);<br>        <span class="hljs-comment">//进行已经借出的不显示</span><br>        <span class="hljs-keyword">return</span> mapper.getBookList()<br>                    .stream()<br>                    .filter(book -&gt; !set.contains(book.getBid()))<br>                    .collect(Collectors.toList());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//获取全部学生信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">getStudentList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//创建当前数据库连接对象</span><br>    <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlsession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession())&#123;<br>        <span class="hljs-type">BookMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlsession.getMapper(BookMapper.class);<br>        <span class="hljs-comment">//得到全部的学生信息</span><br>        <span class="hljs-keyword">return</span> mapper.getStudentList();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>mapper部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取全部图书</span><br><span class="hljs-meta">@Select(&quot;select * from book&quot;)</span><br>List&lt;Book&gt; <span class="hljs-title function_">getBookList</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//获取全部学生</span><br><span class="hljs-meta">@Select(&quot;select * from student&quot;)</span><br>List&lt;Student&gt; <span class="hljs-title function_">getStudentList</span><span class="hljs-params">()</span>;<br><br></code></pre></td></tr></table></figure><h3 id="Post部分"><a href="#Post部分" class="headerlink" title="Post部分"></a>Post部分</h3><p>前端部分的name,form和button的配置每一项都缺一不可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;separate-form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;add-borrow&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-4 mb-4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;from-title mb-1&quot;</span>&gt;</span>信息选择<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;region&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-form-label&quot;</span>&gt;</span>书籍<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;select2 form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;region&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;book.getBid()&#125;&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;book : $&#123;book_list&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;book.getTitle()&#125;&quot;</span>&gt;</span>Hawaii<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-form-label&quot;</span>&gt;</span>学生<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;select2 form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;student.getSid()&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;student.getName()&#125;&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;student : $&#123;student_list&#125;&quot;</span>&gt;</span>Alaska<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group mb-0&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Servlet部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//获取表单中的数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> Integer.parseInt(req.getParameter(<span class="hljs-string">&quot;student&quot;</span>));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">bid</span> <span class="hljs-operator">=</span> Integer.parseInt(req.getParameter(<span class="hljs-string">&quot;book&quot;</span>));<br>    <span class="hljs-comment">//调用service对mapper的实现</span><br>    service.addBorrow(sid,bid);<br>    resp.sendRedirect(<span class="hljs-string">&quot;index&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Service部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//借书</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(<span class="hljs-type">int</span> sid,<span class="hljs-type">int</span> bid)</span>;<br></code></pre></td></tr></table></figure><p>ServiceImpl部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加借阅信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(<span class="hljs-type">int</span> sid, <span class="hljs-type">int</span> bid)</span> &#123;<br>    <span class="hljs-comment">//创建当前数据库连接对象</span><br>    <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlsession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession())&#123;<br>        <span class="hljs-type">BookMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlsession.getMapper(BookMapper.class);<br>        mapper.addBorrow(sid, bid);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>mapper部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加借阅信息</span><br><span class="hljs-meta">@Insert(&quot;insert into borrow(sid,bid,time) values(#&#123;sid&#125;,#&#123;bid&#125;,NOW())&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span><span class="hljs-type">int</span> sid,<span class="hljs-meta">@Param(&quot;bid&quot;)</span><span class="hljs-type">int</span> bid)</span>;<br></code></pre></td></tr></table></figure><h2 id="书籍页面"><a href="#书籍页面" class="headerlink" title="书籍页面"></a>书籍页面</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>书籍页面主要进行的操作有显示书籍（查询列表），添加书籍和删除书籍。</p><p>添加书籍和前面的添加借阅信息类似，只不过针对要手动输入汉字，汉字再传入Servlet的情况，我们要在doPost方法中加入编码调整。前端是按钮转到链接，提交表单，Servlet,调用Service方法,Service调用mapper进行查询。</p><p>删除书籍也是点击按钮进行链接操作，删除之后再进行重定向。</p><p>主要进行的就是查询书籍操作，查询书籍要显示书籍的借阅状态，</p><h3 id="显示书籍（doGet）"><a href="#显示书籍（doGet）" class="headerlink" title="显示书籍（doGet）"></a>显示书籍（doGet）</h3><p>Html（对书籍的状态进行了if选择语句）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍标题<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍简介<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>借阅状态<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>删除书籍<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;book,iterStat: $&#123;book_list&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;#&#x27;+$&#123;book.getBid&#125;&quot;</span>&gt;</span>#JH2033<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;《&#x27;+$&#123;book.getTitle()&#125;+&#x27;》&#x27;&quot;</span>&gt;</span>#JH2033<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;book.getDesc()&#125;&quot;</span>&gt;</span>22/06/2021<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;￥&#x27;+$&#123;book.getPrice()&#125;&quot;</span>&gt;</span>$600<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0 badge badge-primary&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-original-title</span>=<span class="hljs-string">&quot;Pending&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;book_list_status.get(iterStat.index)&#125;&quot;</span>&gt;</span>正在借阅<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0 badge badge-success&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-original-title</span>=<span class="hljs-string">&quot;Pending&quot;</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;book_list_status.get(iterStat.index)&#125;&quot;</span>&gt;</span>可借阅<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;relative&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;action-btn &quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;delete-book?bid=&#x27;+$&#123;book.getBid()&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;default-size &quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 341.333 341.333 &quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">g</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">g</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">g</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M170.667,85.333c23.573,0,42.667-19.093,42.667-42.667C213.333,19.093,194.24,0,170.667,0S128,19.093,128,42.667 C128,66.24,147.093,85.333,170.667,85.333z &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M170.667,128C147.093,128,128,147.093,128,170.667s19.093,42.667,42.667,42.667s42.667-19.093,42.667-42.667 S194.24,128,170.667,128z &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M170.667,256C147.093,256,128,275.093,128,298.667c0,23.573,19.093,42.667,42.667,42.667s42.667-19.093,42.667-42.667 C213.333,275.093,194.24,256,170.667,256z &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取借阅信息</span><br>BookService service;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//设置编码</span><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>    <span class="hljs-comment">//创建一个上下文对象</span><br>    <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>    <span class="hljs-comment">//获取username</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) req.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>    context.setVariable(<span class="hljs-string">&quot;nickname&quot;</span>,user.getNickname());<br>    <span class="hljs-comment">//获取书籍信息</span><br>    context.setVariable(<span class="hljs-string">&quot;book_list&quot;</span>,service.getBookList().keySet());<br>    context.setVariable(<span class="hljs-string">&quot;book_list_status&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(service.getBookList().values()));<br>    <span class="hljs-comment">//提交修改</span><br>    ThymeleafUtil.process(<span class="hljs-string">&quot;books.html&quot;</span>,context,resp.getWriter());<br>&#125;<br></code></pre></td></tr></table></figure><p>Service</p><p>在定义时key代表列表，value代表是否借阅中，所以，进而传到Servlet中时可以直接使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取书籍信息</span><br>context.setVariable(<span class="hljs-string">&quot;book_list&quot;</span>,service.getBookList().keySet());<br><span class="hljs-comment">//获取书籍状态</span><br>context.setVariable(<span class="hljs-string">&quot;book_list_status&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(service.getBookList().values()));<br></code></pre></td></tr></table></figure><p>ServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取全部书籍（要看借阅状态的）</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Map&lt;Book, Boolean&gt; <span class="hljs-title function_">getBookList</span><span class="hljs-params">()</span> &#123;<br>    Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    <span class="hljs-built_in">this</span>.getBorrorList().forEach(borrow -&gt; set.add(borrow.getBook_id()));<br>    <span class="hljs-comment">//创建当前数据库连接对象</span><br>    <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlsession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession())&#123;<br>        Map&lt;Book,Boolean&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        <span class="hljs-type">BookMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlsession.getMapper(BookMapper.class);<br>        mapper.getBookList().forEach(book -&gt;map.put(book, set.contains(book.getBid())));<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加书籍-doPost"><a href="#添加书籍-doPost" class="headerlink" title="添加书籍(doPost)"></a>添加书籍(doPost)</h3><p>往常请求页面都是在Servlet-doGet中进行代码修改，之前再添加选择信息是也是传递的是英文字母为Value，添加书籍和学生都应该在doPost中进行代码修改，才能使前端页面传到服务器的值是正确的UTF-8（在项目代码编码中设置全局项目和本项目都是UTF-8）</p><p><img src="/image/22.07.06/image_SrB_3dX8LH.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//设置输入的编码</span><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>    <span class="hljs-comment">//取得前端表单</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;title&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;desc&quot;</span>);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> Double.parseDouble(req.getParameter(<span class="hljs-string">&quot;price&quot;</span>));<br>    <span class="hljs-comment">//System.out.println(title+desc+price);</span><br>    service.addBook(title,desc,price);<br>    resp.sendRedirect(<span class="hljs-string">&quot;books&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="“记住我”功能的实现"><a href="#“记住我”功能的实现" class="headerlink" title="“记住我”功能的实现"></a>“记住我”功能的实现</h2><p>如果登陆成功，就把用户的信息扔给Cookie</p><p>（创建Cookie，添加Cookie，设置时间，进行重定向）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果true则重定向到index</span><br><span class="hljs-keyword">if</span> (service.auth(username, password, req.getSession())) &#123;<br>    <span class="hljs-comment">//记住我+doGet</span><br>    <span class="hljs-keyword">if</span> (remember != <span class="hljs-literal">null</span>) &#123;<br><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie_username</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        cookie_username.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>);<br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie_password</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;password&quot;</span>, password);<br>        cookie_password.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>);<br>        <span class="hljs-comment">//给回响的Cookie加上数据</span><br>        resp.addCookie(cookie_username);<br>        resp.addCookie(cookie_password);<br>    &#125;<br>    resp.sendRedirect(<span class="hljs-string">&quot;index&quot;</span>);<br>&#125;<br><span class="hljs-comment">//如果false则滚去重新进行登陆页面</span><br><span class="hljs-keyword">else</span> &#123;<br>    req.getSession().setAttribute(<span class="hljs-string">&quot;login-failure&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>    <span class="hljs-built_in">this</span>.doGet(req, resp);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>问题：退出时又自动登录</p><p>解决：原因是退出到主页时，原来的Cookie还在，所以会默认登陆。所以我们要在LogoutServlet操作中加入清除Cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//清除Cookie</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie_username</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>);<br>cookie_username.setMaxAge(<span class="hljs-number">0</span>);<br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie_password</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>);<br>cookie_password.setMaxAge(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//给回响的Cookie加上数据</span><br>resp.addCookie(cookie_username);<br>resp.addCookie(cookie_password);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>问题：项目中分别设置Cookie与Session，开始和结束两个操作的关系。</p><p>答：Session的作用时让注册过的用户可以访问所有的页面。Cookie的作用是让用户在下一次打开网页时可以直接免登录。</p><p>虽然说本地的服务器写一个“记住我”的功能没有大的必要，但是如果布置到网上，就会显得很有用，比如每次登录Github都会默认登陆。</p><p>Cookie和Session有相似点，可他们的功能互不干扰。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Mybatis的图书管理系统</title>
    <link href="/2022/06/27/%E5%9F%BA%E4%BA%8EMybatis-JUL-Lombok-Maven%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%B8%A6%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%89/"/>
    <url>/2022/06/27/%E5%9F%BA%E4%BA%8EMybatis-JUL-Lombok-Maven%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%B8%A6%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本项目是基于Mybatis+JUL+Lombok+Maven的图书管理系统（带单元测试）</p><span id="more"></span><h2 id="成果示范"><a href="#成果示范" class="headerlink" title="成果示范"></a>成果示范</h2><p><img src="/image/22.06.27/shifan1.jpg"></p><p><img src="/image/22.06.27/shifan2.jpg"></p><h2 id="项目需求："><a href="#项目需求：" class="headerlink" title="项目需求："></a>项目需求：</h2><ul><li><p><input checked="" disabled="" type="checkbox"> 在线录入学生信息和书籍信息</p></li><li><p><input checked="" disabled="" type="checkbox"> 在线录入借阅信息</p></li><li><p><input checked="" disabled="" type="checkbox"> 查询书籍信息列表</p></li><li><p><input checked="" disabled="" type="checkbox"> 查询学生信息列表</p></li><li><p><input checked="" disabled="" type="checkbox"> 查询借阅信息列表</p></li><li><p><input checked="" disabled="" type="checkbox"> 完整的日志系统</p></li><li><p><input checked="" disabled="" type="checkbox"> Maven打包项目jar并在桌面运行</p></li></ul><h2 id="设计数据库"><a href="#设计数据库" class="headerlink" title="设计数据库"></a>设计数据库</h2><h3 id="建立数据库（book-manage）"><a href="#建立数据库（book-manage）" class="headerlink" title="建立数据库（book_manage）"></a>建立数据库（book_manage）</h3><p>字符集要修改，否则可能出现乱码</p><p><img src="/image/22.06.27/image_Hg9JN7wbuE.png"></p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>学生表（student）:</p><p><img src="/image/22.06.27/image_fMKaaMzQeu.png"></p><p>书籍表(book)</p><p><img src="/image/22.06.27/image_KWKhubcCx5.png"></p><p>书籍借阅信息(borrow)</p><p><img src="/image/22.06.27/image_MDMhkr5A_L.png"></p><h3 id="设置外键"><a href="#设置外键" class="headerlink" title="设置外键"></a>设置外键</h3><p>注意，外键设置在borrow表，可以理解为一个二维表。</p><p><img src="/image/22.06.27/image_75zEfqRmKK.png"></p><h3 id="设置删除外键的触发器"><a href="#设置删除外键的触发器" class="headerlink" title="设置删除外键的触发器"></a>设置删除外键的触发器</h3><p>注意，触发器设置在book和student表。</p><p>被设计触发器的表并不是外键表，而是进行操作的表。</p><p>我设计一个书籍信息表，设计一个学生表，设计一个学生借书表，外键存在于学生借书表（理解为二维表），触发器存在于学生表和书籍信息表（理解为一维表）。</p><p><img src="/image/22.06.27/image_4DAZskfU9L.png"></p><p>student表中触发器的命令是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> borrow <span class="hljs-keyword">where</span> sid <span class="hljs-operator">=</span> old.sid<br></code></pre></td></tr></table></figure><p>可以看到触发器中是delete,触发器本身的触发条件的定义也是delete，二者本身其实毫无关系。该语句联系到外部的”删除”，可以解释为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">在删除学生表中的信息之前，要删除借阅表中进行约束的外键，因为进行的是删除操作，所以要去old表中寻找sid<br>（从借阅表中删除你删除的sid对应的那行外键）<br></code></pre></td></tr></table></figure><p>另一侧book表同理</p><p><img src="/image/22.06.27/image_PfB65z6Sgz.png"></p><h3 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h3><p>我们写一个学生，写一本书，写一个借阅关系。</p><p><img src="/image/22.06.27/image_7TcTRYOna9.png"></p><p>发现删除学生<strong>或者</strong>书后，borrow对应的借阅行也随之删除。触发器设置成功。</p><p>下面我们实现需求1：在线录入书籍信息，学生信息。</p><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p><img src="/image/22.06.27/image__eRcHGmwtB.png"></p><h3 id="pom-xml中写入依赖"><a href="#pom-xml中写入依赖" class="headerlink" title="pom.xml中写入依赖"></a>pom.xml中写入依赖</h3><p>(Mybatis+jdbc+JUnit+Lombok)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--pom.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Lombok--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--JUnit5--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--JDBC--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>配置后进行Maven加载</p><p><img src="/image/22.06.27/image_xO50OenHIi.png"></p><p>测试</p><p><img src="/image/22.06.27/image_Z-PtXW13yn.png"></p><p>项目运行成功。</p><h2 id="IDEA连接数据库"><a href="#IDEA连接数据库" class="headerlink" title="IDEA连接数据库"></a>IDEA连接数据库</h2><p><img src="/image/22.06.27/image_WIBfnXr571.png"></p><p><img src="/image/22.06.27/image_cWtulSSW6K.png"></p><h2 id="测试Insert功能"><a href="#测试Insert功能" class="headerlink" title="测试Insert功能"></a>测试Insert功能</h2><h3 id="Mybatis配置文件mybatis-config-xml"><a href="#Mybatis配置文件mybatis-config-xml" class="headerlink" title="Mybatis配置文件mybatis-config.xml"></a>Mybatis配置文件mybatis-config.xml</h3><p>在默认的文件夹中创建mybatis文件mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>报错1：显示dtd注册</p><p>解决方法：在设置中添加<code>&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</code>到默认dtd中</p><p><img src="/image/22.06.27/image_pn-o1XjO72.png"></p><h3 id="定义实体类（Lombok）"><a href="#定义实体类（Lombok）" class="headerlink" title="定义实体类（Lombok）"></a>定义实体类（Lombok）</h3><p>student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> sid;<br>    <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">final</span> String sex;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> grade;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>Book</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-type">int</span> bid;<br>    <span class="hljs-keyword">final</span> String title;<br>    <span class="hljs-keyword">final</span> String desc;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> price;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>我们发现数据库中的enum，在实体类中我们定义的是String</p><p>数据库中的decimal,我们定义的是double</p><p>由此可见并不需要完全对应，只要能让数值进行大致对应即可。</p><h3 id="配置mybatis-xml中的mapper"><a href="#配置mybatis-xml中的mapper" class="headerlink" title="配置mybatis.xml中的mapper"></a>配置mybatis.xml中的mapper</h3><p>在mybatis-config.xml中进行配置mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book.manage.mapper.BookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>问题1：我记得有一个作用整个包,就小写的是什么来着？</p><p>答：是mybatis-config.xml中可以对实体类整个包进行默认读取，mapper.xml中可以直接使用别名以来连接接口方法和实体类进行映射关系的构造。</p><p>问题2：使用接口注解是什么实现流程？使用mapper.xml是什么操作流程？</p><p>①接口注解：用resources方法读取mybatis配置文件，可以知道mapper接口文件的位置，然后opensession相当于打开了一次会话，读取mapper相当于打开了一个映射关系合集。</p><p>②mapper配置文件：使用简单的IO方法读取mybatis配置文件。配置文件读取了mapper.xml映射规则将接口和实体类进行连接。Main调用接口，接口调用实体类按照之前设定的关系进行连接。</p><h3 id="创建接口-用注解代替mapper-xml"><a href="#创建接口-用注解代替mapper-xml" class="headerlink" title="创建接口(用注解代替mapper.xml)"></a>创建接口(用注解代替mapper.xml)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.mapper;<br><br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br>    <span class="hljs-meta">@Insert(&quot;insert into student(name,sex,grade) value(#&#123;name&#125;,#&#123;sex&#125;,#&#123;grade&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Main进行测试"><a href="#Main进行测试" class="headerlink" title="Main进行测试"></a>Main进行测试</h3><p>SqlSessionfactorybuilder(读取mybatis.xml)→factory</p><p>factory.opensession()→sqlssion</p><p>sqlssion.getmapper(mapper)→mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage;<br><br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> book.manage.mapper.BookMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.defaults.DefaultSqlSessionFactory;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>))&#123;<br>            <span class="hljs-type">BookMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(BookMapper.class);<br><br>            System.out.println(mapper.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-number">2019</span>)));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>报错2：传入数据时候，由于lombok的构造参数，默认输入的是sid,</p><p>解决办法：①删除Student中的<code>@AllArgsConstructor</code>,再插入时就会与接口编写的sql语句进行对应②在接口中形参设置为<code>Student student</code>③给实体类的变量加上final（final加了就会去找没有sid的构造函数，因为数据库字段非空，sid可以自增）</p><p>报错3:进行Insert操作的测试时，没有读取到mybatis-comfig.xml文件</p><p><img src="/image/22.06.27/image_u3xO_IuiMX.png"></p><p>原因：读取resources文件的函数用错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//错误代码</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br><br><span class="hljs-comment">//正确代码</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br><br></code></pre></td></tr></table></figure><p><code>new FileInputStream</code>读取文件时必须加上详细的文件地址，<code>Resources.getResourceAsReader</code>可以直接读取resources文件夹里面的文件</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>生效了一行</p><p><img src="/image/22.06.27/image_xUUMzIAz4e.png"></p><p>数据库结果</p><p><img src="/image/22.06.27/image_UTQ9zlBZnt.png"></p><p><img src="/image/22.06.27/image_hVsMuNA0WJ.png"></p><h3 id="插入书籍信息同理"><a href="#插入书籍信息同理" class="headerlink" title="插入书籍信息同理"></a>插入书籍信息同理</h3><p>报错：插入数据失败</p><p>解决：</p><p>①书的描述不能使用”<code>DESC</code>“作为关键字，<code>DESC</code>时数据库排序的关键字，把<code>DESC</code>换成<code>des</code>成功插入。</p><p><strong>②或者给sql语句中的desc加上单引号，变成’desc’,如果是关键字就要加上飘。</strong></p><p>主要思路：</p><p>①创建实体类</p><p>②编写Mapper.java接口</p><p>③编写Main</p><h2 id="优化sqlsession"><a href="#优化sqlsession" class="headerlink" title="优化sqlsession"></a>优化sqlsession</h2><p><em><strong>用SqlUtil创建sqlsession</strong></em></p><p>将创建sqlsession的过程单独放在一个工具类中,只需要在主函数中对mapper文件进行getmapper即可。此项目再次简化，将创建mapper的过程也放在SqlUtil过程中。</p><p>SqlSessionfactorybuilder(读取mybatis.xml)→factory</p><p>factory.opensession()→sqlssion</p><p>sqlssion.getmapper(mapper)→mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.sql;<br><br><span class="hljs-keyword">import</span> book.manage.mapper.BookMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Wahoyu* </span><br><span class="hljs-comment">/</span><br><span class="hljs-comment">public class SqlUtil &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private SqlUtil()&#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private static SqlSessionFactory factory;</span><br><span class="hljs-comment">    static &#123;</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;));</span><br><span class="hljs-comment">        &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public static void doSqlWork(Consumer&lt;BookMapper&gt; consumer)&#123;</span><br><span class="hljs-comment">        try(SqlSession sqlSession = factory.openSession(true))&#123;</span><br><span class="hljs-comment">            BookMapper bookMapper = sqlSession.getMapper(BookMapper.class);</span><br><span class="hljs-comment">            consumer.accept(bookMapper);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p>这样主函数就可以直接创建sqlsession,之间创建不同的mapper,针对mapper很多的情况非常方便。</p><h2 id="Main主菜单格式"><a href="#Main主菜单格式" class="headerlink" title="Main主菜单格式"></a>Main主菜单格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;************************* *&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;1.录入学生信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;2.录入书籍信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;输入你想要执行的操作（输入其他任意数字退出）：&quot;</span>);<br>                <span class="hljs-type">int</span> input;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    input = scanner.nextInt();<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">switch</span>(input)&#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="/image/22.06.27/image_QCS_R6b8wJ.png"></p><h2 id="代码整理一"><a href="#代码整理一" class="headerlink" title="代码整理一"></a>代码整理一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Main</span><br><span class="hljs-keyword">package</span> book.manage;<br><br><br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> book.manage.sql.SqlUtil;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;************************* *&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;1.录入学生信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;2.录入书籍信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;输入你想要执行的操作（输入其他任意数字退出）：&quot;</span>);<br>                <span class="hljs-type">int</span> input;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    input = scanner.nextInt();<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">//清理换行符</span><br>                scanner.nextLine();<br>                <span class="hljs-keyword">switch</span>(input)&#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        addStudent(scanner);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入学生名字：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入学生的性别（男/女）：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;请输入学生的年级：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> Integer.parseInt(grade);<br><br>        <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(name,sex,g);<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addStudent(student);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SqlUtil</span><br><span class="hljs-keyword">package</span> book.manage.sql;<br><br><span class="hljs-keyword">import</span> book.manage.mapper.BookMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/*** </span><br><span class="hljs-comment"> <span class="hljs-doctag">@author</span> Wahoyu* </span><br><span class="hljs-comment">/</span><br><span class="hljs-comment">public class SqlUtil &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private SqlUtil()&#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private static SqlSessionFactory factory;</span><br><span class="hljs-comment">    static &#123;</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;));</span><br><span class="hljs-comment">        &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public static void doSqlWork(Consumer&lt;BookMapper&gt; consumer)&#123;</span><br><span class="hljs-comment">        try(SqlSession sqlSession = factory.openSession(true))&#123;</span><br><span class="hljs-comment">            BookMapper bookMapper = sqlSession.getMapper(BookMapper.class);</span><br><span class="hljs-comment">            consumer.accept(bookMapper);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Mybatisconfig.xml--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book.manage.mapper.BookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//mapper.java</span><br><span class="hljs-keyword">package</span> book.manage.mapper;<br><br><span class="hljs-keyword">import</span> book.manage.entity.Book;<br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into student(name,sex,grade) value(#&#123;name&#125;,#&#123;sex&#125;,#&#123;grade&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into book(title,`desc`,price) value(#&#123;title&#125;,#&#123;desc&#125;,#&#123;price&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from student where sid = #&#123;sid&#125;&quot;)</span><br>    Student <span class="hljs-title function_">getStudentBySid</span><span class="hljs-params">(<span class="hljs-type">int</span> sid)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select*  from book where bid = #&#123;bid&#125;&quot;)</span><br>    Book <span class="hljs-title function_">getBookByBid</span><span class="hljs-params">(<span class="hljs-type">int</span> bid)</span>;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Student</span><br><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> sid;<br>    <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">final</span> String sex;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> grade;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//book</span><br><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-type">int</span> bid;<br>    <span class="hljs-keyword">final</span> String title;<br>    <span class="hljs-keyword">final</span> String desc;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> price;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="/image/22.06.27/image_5RXbHaH6rc.png"></p><h2 id="开始配置日志系统"><a href="#开始配置日志系统" class="headerlink" title="开始配置日志系统"></a>开始配置日志系统</h2><ul><li>[x] 敏感操作进行日志输出，输出到文件</li></ul><h3 id="配置（日志配置）文件"><a href="#配置（日志配置）文件" class="headerlink" title="配置（日志配置）文件"></a>配置（日志配置）文件</h3><p>logging.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs .properties">#设置输出级别<br>#不用控制台打印，用文件打印<br>handlers= java.util.logging.FileHandler<br>.level= All<br><br>#命名输出文件<br>java.util.logging.FileHandler=console.log<br>#设置输出格式为默认<br>java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter<br><br><br></code></pre></td></tr></table></figure><h3 id="主函数配置日志"><a href="#主函数配置日志" class="headerlink" title="主函数配置日志"></a>主函数配置日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//日志配置</span><br><span class="hljs-type">LogManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> LogManager.getLogManager();<br>manager.readConfiguration(Resources.getResourceAsStream(<span class="hljs-string">&quot;logging.properties&quot;</span>));<br></code></pre></td></tr></table></figure><p>报错1：不能使用log.info（）；</p><p><img src="/image/22.06.27/image_cC-3sXLxOu.png"></p><p>解决：在Main类上添加注解@Log</p><p><img src="/image/22.06.27/image_NdME8uxuDf.png"></p><p>报错2：(.level)附近的日志配置文件书写格式错误</p><p><img src="/image/22.06.27/image_7WRS2s4tKa.png"></p><p>解决：ALL应该全部大写</p><p>报错3：输出到文件中的日志都是标签格式的</p><p><img src="/image/22.06.27/image_oCwzP3kYPV.png"></p><p>解决：单词打错，应该是handler,影响了日志文件格式的定义。</p><h3 id="让日志追加打印"><a href="#让日志追加打印" class="headerlink" title="让日志追加打印"></a>让日志追加打印</h3><p>配置logging.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs .properties">#设置输出级别<br>#不用控制台打印，用文件打印<br>handlers= java.util.logging.FileHandler<br>.level= INFO<br><br>#命名输出文件<br>java.util.logging.FileHandler.pattern=console.log<br>#设置输出格式为默认<br>java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter<br>#追加打印<br>java.util.logging.FileHandler.append=true<br><br></code></pre></td></tr></table></figure><p><img src="/image/22.06.27/image_jzDx-gKICf.png"></p><h2 id="编写学生借书操作"><a href="#编写学生借书操作" class="headerlink" title="编写学生借书操作"></a>编写学生借书操作</h2><p>1.编写菜单和提示输入界面</p><p><img src="/image/22.06.27/image_ub-6kqqtCC.png"></p><p><img src="/image/22.06.27/image_m3d-OWOWgk.png"></p><p><img src="/image/22.06.27/image_p8v0162hIq.png"></p><p>2.分析数据库表的设计</p><p>插入bid和sid即可</p><p>3.编写mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;isnert into borrow(sid,bid) values(#&#123;sid&#125;,#&#123;bid&#125;)&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(<span class="hljs-type">int</span> sid,<span class="hljs-type">int</span> bid)</span>;<br></code></pre></td></tr></table></figure><p>4.编写Main中对应创建对象的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//借书</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入书的编号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bid</span> <span class="hljs-operator">=</span> Integer.parseInt(a);<br>        System.out.print(<span class="hljs-string">&quot;请输入学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> Integer.parseInt(b);<br><br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addBorrow(sid,bid);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;添加一条借阅信息&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    <span class="hljs-keyword">try</span>&#123;addBorrow(scanner);&#125;<br>    <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        System.out.println(<span class="hljs-string">&quot;录入失败！（可能录入重复）&quot;</span>);<br>        <span class="hljs-keyword">break</span>;&#125;<br></code></pre></td></tr></table></figure><p>5.完善main</p><p>提问：为什么借阅信息不需要实体类？</p><p>解答：后面进行查询就需要实体类了，查询的时候要把数据库中的东西拿出来，放在实体类中，通过实体类进行表达。</p><p>报错：sid没有找到，mapper中输入两个数，导致sid和bid没有对应上</p><p><img src="/image/22.06.27/image_2jKuS2refE.png"></p><p>解决：加注解表示哪个对用的是哪个</p><p><img src="/image/22.06.27/image_X4fjPCTaV9.png"></p><h2 id="代码整理二"><a href="#代码整理二" class="headerlink" title="代码整理二"></a>代码整理二</h2><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage;<br><br><br><span class="hljs-keyword">import</span> book.manage.entity.Book;<br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> book.manage.sql.SqlUtil;<br><span class="hljs-keyword">import</span> lombok.extern.java.Log;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.logging.LogManager;<br><br><span class="hljs-meta">@Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            <span class="hljs-comment">//日志配置</span><br>            <span class="hljs-type">LogManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> LogManager.getLogManager();<br>            manager.readConfiguration(Resources.getResourceAsStream(<span class="hljs-string">&quot;logging.properties&quot;</span>));<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;1.录入学生信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;2.录入书籍信息&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;3.添加借阅信息&quot;</span>);<br>                System.out.print(<span class="hljs-string">&quot;输入你想要执行的操作（输入其他任意数字退出）：&quot;</span>);<br>                <span class="hljs-type">int</span> input;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    input = scanner.nextInt();<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-comment">//清理换行符</span><br>                scanner.nextLine();<br>                <span class="hljs-keyword">switch</span>(input)&#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        addStudent(scanner);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        addBook(scanner);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                        <span class="hljs-keyword">try</span>&#123;addBorrow(scanner);&#125;<br>                        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                            System.out.println(<span class="hljs-string">&quot;录入失败！（可能录入重复）&quot;</span>);<br>                            <span class="hljs-keyword">break</span>;&#125;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//借书</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入书的编号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bid</span> <span class="hljs-operator">=</span> Integer.parseInt(a);<br>        System.out.print(<span class="hljs-string">&quot;请输入学号:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> Integer.parseInt(b);<br><br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addBorrow(sid,bid);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;添加一条借阅信息&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">//插入学生</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入学生名字：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入学生的性别（男/女）：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入学生的年级：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> Integer.parseInt(grade);<br><br>        <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(name,sex,g);<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addStudent(student);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;新添加一条学生信息&quot;</span>+student);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">//插入书</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入书名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入书籍简介：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.print(<span class="hljs-string">&quot;请输入书的价格&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">double</span> p= Double.parseDouble((price));<br><br>        <span class="hljs-comment">//创建书籍对象</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(title,desc,p);<br><br>        <span class="hljs-comment">//匿名内部类其实就是在new的时候，直接对接口或是抽象类的实现</span><br>        <span class="hljs-comment">//lambda表达式其实就是我们接口匿名实现的简化</span><br>        <span class="hljs-comment">//(传入doSqlWork方法的参数)-&gt;&#123;实现接口方法的方法体&#125;</span><br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapper.addBook(book);<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入成功！&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;新添加了一条书籍信息&quot;</span>+book);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;录入失败，请重试！&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>SqlUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.sql;<br><br><span class="hljs-keyword">import</span> book.manage.mapper.BookMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/*** </span><br><span class="hljs-comment"> <span class="hljs-doctag">@author</span> Wahoyu* </span><br><span class="hljs-comment">/</span><br><span class="hljs-comment">public class SqlUtil &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private SqlUtil()&#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    private static SqlSessionFactory factory;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //静态代码块只执行一次，创建一次factory</span><br><span class="hljs-comment">    static &#123;</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;));</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        catch (IOException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //Consumer是lambda表达式中的一个接口</span><br><span class="hljs-comment">    public static void doSqlWork(Consumer&lt;BookMapper&gt; consumer)&#123;</span><br><span class="hljs-comment">        try(SqlSession sqlSession = factory.openSession(true))&#123;</span><br><span class="hljs-comment">            BookMapper bookMapper = sqlSession.getMapper(BookMapper.class);</span><br><span class="hljs-comment">            consumer.accept(bookMapper);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p>mapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.mapper;<br><br><span class="hljs-keyword">import</span> book.manage.entity.Book;<br><span class="hljs-keyword">import</span> book.manage.entity.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into student(name,sex,grade) value(#&#123;name&#125;,#&#123;sex&#125;,#&#123;grade&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into book(title,`desc`,price) value(#&#123;title&#125;,#&#123;desc&#125;,#&#123;price&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select*  from student where sid = #&#123;sid&#125;&quot;)</span><br>    Student <span class="hljs-title function_">getStudentBySid</span><span class="hljs-params">(<span class="hljs-type">int</span> sid)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select*  from book where bid = #&#123;bid&#125;&quot;)</span><br>    Book <span class="hljs-title function_">getBookByBid</span><span class="hljs-params">(<span class="hljs-type">int</span> bid)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into borrow(sid,bid) values(#&#123;sid&#125;,#&#123;bid&#125;)&quot;)</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBorrow</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span><span class="hljs-type">int</span> sid,<span class="hljs-meta">@Param(&quot;bid&quot;)</span><span class="hljs-type">int</span> bid)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>mybaits.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置日志管理系统--&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;NO_LOGGING&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/book_manage&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book.manage.mapper.BookMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>logging.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs .properties">#设置输出级别<br>#不用控制台打印，用文件打印<br>handlers= java.util.logging.FileHandler<br>.level= INFO<br><br>#命名输出文件<br>java.util.logging.FileHandler.pattern=console.log<br>#设置输出格式为默认<br>java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter<br>#追加打印<br>java.util.logging.FileHandler.append=true<br><br></code></pre></td></tr></table></figure><p>Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> sid;<br>    <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">final</span> String sex;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> grade;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Book</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-type">int</span> bid;<br>    <span class="hljs-keyword">final</span> String title;<br>    <span class="hljs-keyword">final</span> String desc;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> price;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="查询全部借阅信息"><a href="#查询全部借阅信息" class="headerlink" title="查询全部借阅信息"></a>查询全部借阅信息</h2><p>查询操作就需要创建实体类，封装成一个类，不然没办法查。</p><p>在接口中定义&lt;List&gt;实体类</p><p>前面的插入数据的时候可以用int 进行创建对象</p><h3 id="封装一个查询对象"><a href="#封装一个查询对象" class="headerlink" title="封装一个查询对象"></a>封装一个查询对象</h3><p>borrow实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> book.manage.entity;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Borrow</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <br>    <span class="hljs-comment">//做个映射</span><br>    Student student;<br>    Book book;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用TestMain进行测试"><a href="#使用TestMain进行测试" class="headerlink" title="使用TestMain进行测试"></a>使用TestMain进行测试</h3><p>好处：</p><p>①不会真正对数据库进行操作</p><p>②不会真正对日志进行改写</p><p>TestMain.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">import</span> book.manage.sql.SqlUtil;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            mapper.getBorrowList().forEach(System.out::println);<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>报错1：“sex”无法与“女”进行对应</p><p>解决方法：①给book和student都加上<code>@NoArgsConstructor</code>,去掉成员属性中的final,加上一个不带主键的构造方法。</p><p>②给borrow加上<code>@Data</code></p><p><img src="/image/22.06.27/image_mPBmimEb_3.png"></p><p>测试结束后给主方法添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBorrow</span><span class="hljs-params">(Scanner scanner)</span>&#123;<br>        <span class="hljs-comment">//不输入直接显示全部</span><br>        SqlUtil.doSqlWork(mapper -&gt;&#123;<br>            mapper.getBorrowList().forEach(borrow -&gt; &#123;<br>                    System.out.println(borrow.getStudent().getName()+<span class="hljs-string">&quot; -&gt; &quot;</span>+borrow.getBook().getTitle());<br>            &#125;);<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="查询全部的书籍和学生信息"><a href="#查询全部的书籍和学生信息" class="headerlink" title="查询全部的书籍和学生信息"></a>查询全部的书籍和学生信息</h2><h3 id="编写mapper"><a href="#编写mapper" class="headerlink" title="编写mapper"></a>编写mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from student&quot;)</span><br>    List&lt;Student&gt; <span class="hljs-title function_">getStudentList</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select*  from book&quot;)</span><br>    List&lt;Book&gt; <span class="hljs-title function_">getBookList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h3 id="在TestMain中测试"><a href="#在TestMain中测试" class="headerlink" title="在TestMain中测试"></a>在TestMain中测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//三重借阅</span><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            mapper.getBorrowList().forEach(System.out::println);<br>        &#125;);<br>    &#125;<br>        <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            mapper.getStudentList().forEach(System.out::println);<br>        &#125;);<br>    &#125;<br>        <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        SqlUtil.doSqlWork(mapper -&gt; &#123;<br>            mapper.getBookList().forEach(System.out::println);<br>        &#125;);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>报错：在执行插入借阅关系后总是会默认打印出所有的借阅关系？</p><p>原因：因为在case3后面并没有执行finally{break;}，在没有case4的时候，case3会自动结束，但是如果有了case 4，case 3就不会结束，自动运行case4。</p><p>疑问：为什么在<code>查看所有借阅关系</code>上面要明确对应出每一个人和书籍</p><p>原因：因为借阅关系存入的时候存的是学号，但是显示出来的是姓名和书名。所以我们要通过号来查到对象，然后通过对象获取到名字。</p><h2 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h2><p>打包成jar文件</p><p>在Maven中配置打包插件 （plugin放在build-plugins标签中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.test.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JUnit5的插件也要拿过来，因为版本太新，尚未兼容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- JUnit 5 requires Surefire version 2.22.0 or higher --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行打包package</p><p><img src="/image/22.06.27/image_dB8Y1jCBCV.png"></p><p>运行jar文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs .properties">java -jar 拖动文件到此<br></code></pre></td></tr></table></figure><p>报错：无法加载主类com.test.Main</p><p>解决：属于路径错误问题。Main前面应该指定正确的路径，比如如果Main文件是<code>package book.manage;</code></p><p>那么路径就应该写<code>book.manege.Main</code></p><p><img src="/image/22.06.27/image_rj1G3P14gB.png"></p><p><img src="/image/22.06.27/image_stLIXM_c1v.png"></p><h3 id="关于运行jar包的日志文件生成"><a href="#关于运行jar包的日志文件生成" class="headerlink" title="关于运行jar包的日志文件生成"></a>关于运行jar包的日志文件生成</h3><p>windows默认在C：\Users\用户名\</p><p><img src="/image/22.06.27/image_ayDo7ZA37A.png"></p><h2 id="后续相关优化"><a href="#后续相关优化" class="headerlink" title="后续相关优化"></a>后续相关优化</h2><p>1.改变日志生成位置</p><p>如果想改的话可以改logging.properties文件中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs .properties">#命名输出文件<br>java.util.logging.FileHandler.pattern=C\\Users\\64570\\Desktop\\console.log<br></code></pre></td></tr></table></figure><p>就会默认输出到桌面了。</p><p>2.给书籍价格加上小数点</p><p>原因：是书籍的数据库表格建立的问题，给price加上小数点就OK了</p><p><img src="/image/22.06.27/image_lxMzmRiFMP.png"></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于反射与注解的理解与总结</title>
    <link href="/2022/06/19/%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <url>/2022/06/19/%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>反向追寻创建class对象并对class进行修改</p><span id="more"></span><h2 id="1、静态语言vs动态语言"><a href="#1、静态语言vs动态语言" class="headerlink" title="1、静态语言vs动态语言"></a>1、静态语言vs动态语言</h2><p>动态语言</p><ul><li>是一类在运行时可以改变其结构的语言：例如新的函数，对象，甚至代码可以被引进，已有的函数可以被删除或者其他结构上的变化。通俗点说就是在<strong>运行时代码可以根据某些条件改变自身结构</strong>。</li><li>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</li></ul><p>静态语言</p><ul><li><p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如 Java、C、C++。</p></li><li><p>Java不是动态语言，但是Java可以称之为 “准动态语言” 。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活。</p></li></ul><h3 id="1-1、反射的定义和作用概括"><a href="#1-1、反射的定义和作用概括" class="headerlink" title="1.1、反射的定义和作用概括"></a>1.1、反射的定义和作用概括</h3><p>反射就是把Java类中的各个成分映射成一个个的Java对象。即在运行状态中，对于任意一个类，都能够知道这个类所有的属性和方法，对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息及动态调用对象方法的功能叫Java的反射机制。</p><p>我们可以通过反射机制，获取到类的一些属性，包括类里面有哪些字段，方法，继承自哪个类，甚至还能获取到泛型！</p><p>它的权限非常高，慎重使用！</p><h2 id="2、类加载的机制"><a href="#2、类加载的机制" class="headerlink" title="2、类加载的机制"></a>2、类加载的机制</h2><p>在学习Java的反射机制之前，我们需要先了解一下类的加载机制，一个类是如何被加载和使用的：</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg3.itboth.com%2F60%2F50%2FUrUVN3.png&refer=http%3A%2F%2Fimg3.itboth.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1637635409&t=f25ea82c853619c26897ff5b4d041d5b"></p><h3 id="2-1、引出反射利用的（一一对应的）Class文件"><a href="#2-1、引出反射利用的（一一对应的）Class文件" class="headerlink" title="2.1、引出反射利用的（一一对应的）Class文件"></a>2.1、引出反射利用的（一一对应的）Class文件</h3><p>在Java程序启动时，JVM会将一部分类（class文件）先加载（并不是所有的类都会在一开始加载），通过ClassLoader将类加载，在加载过程中，会将类的信息提取出来（存放在元空间中，JDK1.8之前存放在永久代），同时也会生成一个Class对象存放在内存（堆内存），注意此Class对象只会存在一个，与加载的类唯一对应！</p><h3 id="2-2、手写String引出双亲委派机制"><a href="#2-2、手写String引出双亲委派机制" class="headerlink" title="2.2、手写String引出双亲委派机制"></a>2.2、手写String引出双亲委派机制</h3><p><strong>思考：</strong> 既然说和与加载的类唯一对应，那如果我们手动创建一个与JDK包名一样，同时类名也保持一致，那么JVM会加载这个类吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> &#123;    <span class="hljs-comment">//JDK提供的String类也是</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我姓🐴，我叫🐴nb&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，会出现以下报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br></code></pre></td></tr></table></figure><p>但是我们明明在自己写的String类中定义了main方法啊，为什么会找不到此方法呢？实际上这是ClassLoader的<code>双亲委派机制</code>在保护Java程序的正常运行：</p><h3 id="2-3、类加载流程："><a href="#2-3、类加载流程：" class="headerlink" title="2.3、类加载流程："></a>2.3、类加载流程：</h3><p>①已经加载过的会在out里面</p><p>②AppClassLoader是自己写的类，ExtClassLoader是拓展类，BootstrapClassLoader是jdk默认自带的类.(String在Boot就被拦下来了)</p><p><img src="https://img-blog.csdnimg.cn/20201217213314510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGV5YW5iYW8=,size_16,color_FFFFFF,t_70"></p><p>实际上我们的类最开始是由BootstarpClassLoader进行加载，BootstarpClassLoader用于加载JDK提供的类，而我们自己编写的类实际上是AppClassLoader，只有BootstarpClassLoader都没有加载的类，才会让AppClassLoader来加载，因此我们自己编写的同名包同名类不会被加载，而<strong>实际要去启动的是真正的String类</strong>，也就自然找不到<code>main</code>方法了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Main.class.getClassLoader());   <span class="hljs-comment">//查看当前类的类加载器</span><br>        System.out.println(Main.class.getClassLoader().getParent());  <span class="hljs-comment">//父加载器</span><br>        System.out.println(Main.class.getClassLoader().getParent().getParent());  <span class="hljs-comment">//爷爷加载器</span><br>        System.out.println(String.class.getClassLoader());   <span class="hljs-comment">//String类的加载器</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于BootstarpClassLoader是C++编写的，我们在Java中是获取不到的。</p><h2 id="3、Class对象"><a href="#3、Class对象" class="headerlink" title="3、Class对象"></a>3、Class对象</h2><h3 id="3-1、获取每个类对应的class"><a href="#3-1、获取每个类对应的class" class="headerlink" title="3.1、获取每个类对应的class"></a>3.1、获取每个类对应的class</h3><p>通过前面，我们了解了类的加载，同时会提取一个类的信息生成Class对象存放在内存中，而反射机制其实就是利用这些存放的类信息，来获取类的信息和操作类。那么如何<strong>获取到每个类对应的Class对象</strong>呢，我们可以通过以下方式（class泛型类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br><span class="hljs-comment">//（1）使用class关键字，通过类名获取对应的class对象</span><br>    Class&lt;String&gt; clazz = String.class;<br>    Class&lt;类名&gt; clazz = 类名.class;<br>    <br><span class="hljs-comment">//（2）使用Class类的静态方法 forName()。通过包名.类名获取对应的class对象</span><br>    <span class="hljs-comment">//注意返回值是Class&lt;?&gt;  通配符</span><br>    Class&lt;?&gt; clazz2 = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>    Class&lt;?&gt; clazz2 = Class.forName(<span class="hljs-string">&quot;位置.类名&quot;</span>);<br>    <br><span class="hljs-comment">//（3）通过实例对象获取对应的class对象</span><br>    Class&lt;?&gt; clazz3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;cpdd&quot;</span>).getClass();  <br>    Class&lt;?&gt; clazz3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;cpdd&quot;</span>).getClass();<br>&#125;<br></code></pre></td></tr></table></figure><p>?&gt; clazz3 &#x3D; new String(“cpdd”).getClass();<br>Class&lt;?&gt; clazz3 &#x3D; new String(“cpdd”).getClass();<br>}</p><p>注意Class类也是一个泛型类，只有第一种方法，能够直接获取到对应类型的Class对象，而以下两种方法使用了<code>?</code>通配符作为返回值，但是实际上都和第一个返回的是同一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;String&gt; clazz = String.class;   <span class="hljs-comment">//使用class关键字，通过类名获取</span><br>Class&lt;?&gt; clazz2 = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);   <span class="hljs-comment">//使用Class类静态方法forName()，通过包名.类名获取，注意返回值是Class&lt;?&gt;</span><br>Class&lt;?&gt; clazz3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;cpdd&quot;</span>).getClass();<br><br>System.out.println(clazz == clazz2);<br>System.out.println(clazz == clazz3);<br></code></pre></td></tr></table></figure><h3 id="3-2、基本类型的class对象本质上是包装类（表现为int）"><a href="#3-2、基本类型的class对象本质上是包装类（表现为int）" class="headerlink" title="3.2、基本类型的class对象本质上是包装类（表现为int）"></a>3.2、基本类型的class对象本质上是包装类（表现为int）</h3><p>通过比较，验证了我们一开始的结论，在<strong>JVM中每个类始终只存在一个Class对象</strong>，无论通过什么方法获取，都是一样的。现在我们再来看看这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Class&lt;?&gt; clazz = <span class="hljs-type">int</span>.class;   <span class="hljs-comment">//基本数据类型有Class对象吗？</span><br>    System.out.println(clazz);<span class="hljs-comment">//int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>迷了，不是每个类才有Class对象吗，基本数据类型又不是类，这也行吗？实际上，基本数据类型也有对应的Class对象（反射操作可能需要用到），而且我们不仅可以通过class关键字获取，其实<strong>本质上是定义在对应的包装类</strong>中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> Class&#125; instance representing the primitive type</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> int&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span>   JDK1.1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(<span class="hljs-string">&quot;int&quot;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Return the Virtual Machine&#x27;s Class object for the named</span><br><span class="hljs-comment"> * primitive type</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getPrimitiveClass(String name);   <span class="hljs-comment">//C++实现，并非Java定义</span><br></code></pre></td></tr></table></figure><p>每个包装类中（包括Void），都有一个获取原始类型Class方法，注意，<strong>getPrimitiveClass获取的是原始类型，并不是包装类型</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Class&lt;?&gt; clazz = <span class="hljs-type">int</span>.class;<br>    System.out.println(Integer.TYPE == <span class="hljs-type">int</span>.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过对比，我们发现实际上包装类型都有一个TYPE，其实也就是基本类型的Class，那么包装类的Class和基本类的Class一样吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(Integer.TYPE == Integer.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，<strong>包装类型的Class对象 &#x3D;&#x3D; 基本类型Class对象</strong>。数组类型也是一种类型，只是编程不可见，因此我们可以直接获取数组的Class对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Class&lt;String[]&gt; clazz = String[].class;<br>    System.out.println(clazz.getName());  <span class="hljs-comment">//获取类名称（得到的是包名+类名的完整名称）</span><br>    System.out.println(clazz.getSimpleName());<br>    System.out.println(clazz.getTypeName());<br>    System.out.println(clazz.getClassLoader());   <span class="hljs-comment">//获取它的类加载器</span><br>    System.out.println(clazz.cast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-string">&quot;10&quot;</span>)));   <span class="hljs-comment">//强制类型转换</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3、再谈instanceof"><a href="#3-3、再谈instanceof" class="headerlink" title="3.3、再谈instanceof"></a>3.3、再谈instanceof</h3><p>正常情况下，我们使用instanceof进行类型比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    System.out.println(str <span class="hljs-keyword">instanceof</span> String);<br>&#125;<br></code></pre></td></tr></table></figure><p>它可以判断一个对象是否为此接口或是类的实现或是子类，而现在我们有了更多的方式去判断类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    System.out.println(str.getClass() == String.class);   <span class="hljs-comment">//直接判断是否为这个类型</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要判断是否为子类或是接口&#x2F;抽象类的实现，我们可以使用<code>asSubClass()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    i.getClass().asSubclass(Number.class);   <span class="hljs-comment">//当Integer不是Number的子类时，会产生异常</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4、获取父类信息"><a href="#3-4、获取父类信息" class="headerlink" title="3.4、获取父类信息"></a>3.4、获取父类信息</h3><p>通过<code>getSuperclass()</code>方法，我们可以获取到父类的Class对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    System.out.println(i.getClass().getSuperclass());<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以通过<code>getGenericSuperclass()</code>获取父类的原始类型的Type：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">Type</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> i.getClass().getGenericSuperclass();<br>    System.out.println(type);<br>    System.out.println(type <span class="hljs-keyword">instanceof</span> Class);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现Type实际上是Class类的父接口，但是获取到的Type的实现并不一定是Class。</p><p>同理，我们也可以像上面这样获取父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; anInterface : i.getClass().getInterfaces()) &#123;<br>        System.out.println(anInterface.getName());<br>    &#125;<br>  <br>    <span class="hljs-keyword">for</span> (Type genericInterface : i.getClass().getGenericInterfaces()) &#123;<br>        System.out.println(genericInterface.getTypeName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4、创建类对象"><a href="#4、创建类对象" class="headerlink" title="4、创建类对象"></a>4、创建类对象</h2><p>既然我们拿到了类的定义，那么是否可以通过Class对象来创建对象、调用方法、修改变量呢？<strong>当然是可以的</strong>，那我们首先来探讨一下如何创建一个类的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过使用<code>newInstance()</code>方法来创建对应类型的实例，返回泛型T，注意它会抛出InstantiationException和IllegalAccessException异常，那么什么情况下会出现异常呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String text)</span>&#123;<br>        <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1、默认无参构造"><a href="#4-1、默认无参构造" class="headerlink" title="4.1、默认无参构造"></a>4.1、默认无参构造</h3><p>当类默认的构造方法被带参构造覆盖时，会出现InstantiationException异常，因为<code>newInstance()</code>只适用于默认无参构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2、获取构造器，带参数构造"><a href="#4-2、获取构造器，带参数构造" class="headerlink" title="4.2、获取构造器，带参数构造"></a>4.2、获取构造器，带参数构造</h3><p>当默认无参构造的权限不是<code>public</code>时，会出现IllegalAccessException异常，表示我们无权去调用默认构造方法。在JDK9之后，不再推荐使用<code>newInstance()</code>方法了，而是使用我们接下来要介绍到的，通过<strong>获取构造器，来实例化对象</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class).newInstance(<span class="hljs-string">&quot;what&#x27;s up&quot;</span>);<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String str)</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过获取类的构造方法（构造器）来创建对象实例，会更加合理，我们可以使用**<code>getConstructor()</code>**<strong>方法来获取类的构造方法</strong>，同时我们需要向其中填入参数，也就是构造方法需要的类型，当然我们这里只演示了。那么，当访问权限不是public的时候呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class).newInstance(<span class="hljs-string">&quot;what&#x27;s up&quot;</span>);<br>    student.test();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String str)</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，当访问权限不足时，会无法找到此构造方法，那么如何找到非public的构造方法呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;Student&gt; clazz = Student.class;<br>Constructor&lt;Student&gt; constructor = clazz.getDeclaredConstructor(String.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);   <span class="hljs-comment">//修改访问权限</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;what&#x27;s up&quot;</span>);<br>student.test();<br></code></pre></td></tr></table></figure><h3 id="4-3、超越-private-访问构造方法"><a href="#4-3、超越-private-访问构造方法" class="headerlink" title="4.3、超越(private)访问构造方法"></a>4.3、超越(private)访问构造方法</h3><p>使用<code>getDeclaredConstructor()</code>方法可以找到类中的非public构造方法，但是在使用之前，我们需要先修改访问权限，在修改访问权限之后，就可以使用非public方法了（这意味着，反射可以无视权限修饰符访问类的内容）</p><hr><h2 id="5、调用类的方法"><a href="#5、调用类的方法" class="headerlink" title="5、调用类的方法"></a>5、调用类的方法</h2><h3 id="5-1、创建对象→找到方法→调用方法"><a href="#5-1、创建对象→找到方法→调用方法" class="headerlink" title="5.1、创建对象→找到方法→调用方法"></a>5.1、创建对象→找到方法→调用方法</h3><p>我们可以通过反射来调用类的方法（本质上还是类的实例进行调用）只是利用反射机制实现了方法的调用，我们在包下创建一个新的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;萨日朗&quot;</span>+str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这次我们通过<code>forName(String)</code>来找到这个类并创建一个新的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.**newInstance**();   <span class="hljs-comment">//创建出学生对象</span><br>    <br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.**getMethod**(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//通过方法名和形参类型获取类中的方法</span><br>    <br>    method.**invoke**(instance, <span class="hljs-string">&quot;what&#x27;s up&quot;</span>);   <span class="hljs-comment">//通过Method对象的invoke方法来调用方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>调用**<code>getMethod()</code>**<strong>方法，我们可以获取到类中所有声明为public的方法</strong>，得到一个Method对象（并不是获得所有的public，该方法使用的时候需要指定“方法名”和“形参类型”）</p><p>通过Method对象的<code>invoke()</code>方法（返回值就是方法的返回值，因为这里是void，返回值为null）来调用已经获取到的方法，注意传参。</p><h3 id="5-2、对象原来的类型被模糊"><a href="#5-2、对象原来的类型被模糊" class="headerlink" title="5.2、对象原来的类型被模糊"></a>5.2、对象原来的类型被模糊</h3><p>我们发现，利用反射之后，在一个对象从构造到方法调用，没有任何一处需要引用到对象的实际类型，我们也没有导入Student类，整个过程都是反射在代替进行操作，使得整个过程被模糊了，过多的使用反射，会极大地降低后期维护性。</p><h3 id="5-3、超越private访问普通方法"><a href="#5-3、超越private访问普通方法" class="headerlink" title="5.3、超越private访问普通方法"></a>5.3、超越private访问普通方法</h3><p>同构造方法一样，当出现非public方法时，我们可以通过反射来无视权限修饰符，获取非public方法并调用，现在我们将<code>test()</code>方法的权限修饰符改为private：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.newInstance();   <span class="hljs-comment">//创建出学生对象</span><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//通过方法名和形参类型获取类中的方法</span><br>    method.setAccessible(<span class="hljs-literal">true</span>);<br><br>    method.invoke(instance, <span class="hljs-string">&quot;what&#x27;s up&quot;</span>);   <span class="hljs-comment">//通过Method对象的invoke方法来调用方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4、Method与类很相似"><a href="#5-4、Method与类很相似" class="headerlink" title="5.4、Method与类很相似"></a>5.4、Method与类很相似</h3><p>所以使用方法要么创建对象，要么类名.方法</p><p>Method和Constructor都和Class一样，他们存储了方法的信息，包括方法的形式参数列表，返回值，方法的名称等内容，我们可以直接<strong>通过Method对象</strong>来获取这些信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//通过方法名和形参类型获取类中的方法</span><br>    <br>    System.out.println(method.getName());   <span class="hljs-comment">//获取方法名称</span><br>    System.out.println(method.getReturnType());   <span class="hljs-comment">//获取返回值类型</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5、可变参数的方法→本质数组"><a href="#5-5、可变参数的方法→本质数组" class="headerlink" title="5.5、可变参数的方法→本质数组"></a>5.5、可变参数的方法→本质数组</h3><p>当方法的参数为可变参数时，我们该如何获取方法呢？实际上，我们在之前就已经提到过，可变参数实际上就是一个数组，因此我们可以直接使用数组的class对象表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;test&quot;</span>, String[].class);<br></code></pre></td></tr></table></figure><p>反射非常强大，尤其是我们提到的越权访问，但是请一定谨慎使用，别人将某个方法设置为private一定有他的理由，如果实在是需要使用别人定义为private的方法，就必须确保这样做是安全的，在没有了解别人代码的整个过程就强行越权访问，可能会出现无法预知的错误。</p><hr><h2 id="6、修改类的属性"><a href="#6、修改类的属性" class="headerlink" title="6、修改类的属性"></a>6、修改类的属性</h2><h3 id="6-1、获取一个类的属性"><a href="#6-1、获取一个类的属性" class="headerlink" title="6.1、获取一个类的属性"></a>6.1、获取一个类的属性</h3><p>我们还可以通过反射访问一个类中定义的成员字段也可以修改一个类的对象中的成员字段值，通过<code>getField()</code>方法来获取一个类定义的指定字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;i&quot;</span>);   <span class="hljs-comment">//获取类的成员字段i</span><br>    field.set(instance, <span class="hljs-number">100</span>);   <span class="hljs-comment">//将类实例instance的成员字段i设置为100</span><br><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>);<br>    method.invoke(instance);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2、修改属性值"><a href="#6-2、修改属性值" class="headerlink" title="6.2、修改属性值"></a>6.2、修改属性值</h3><p>在得到Field之后，我们就可以直接通过<code>set()</code>方法为某个对象，设定此属性的值，比如上面，我们就为instance对象设定值为100，当访问private字段时，同样可以按照上面的操作进行越权访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.test.Student&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;i&quot;</span>);   <span class="hljs-comment">//获取类的成员属性：i</span><br>    field.setAccessible(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//给予改变字段属性的权限</span><br>    field.set(instance, <span class="hljs-number">100</span>);   <span class="hljs-comment">//将类实例instance的成员字段i设置为100</span><br><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-comment">//获得test方法放到method（Method实例化的对象）里面</span><br>    method.invoke(instance);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3、就连final都能修改"><a href="#6-3、就连final都能修改" class="headerlink" title="6.3、就连final都能修改"></a>6.3、就连final都能修改</h3><p>现在我们已经知道，<strong>反射几乎可以把一个类的老底都给扒出来</strong>，任何属性，任何内容，都可以被反射修改，无论权限修饰符是什么，那么，如果我的字段被标记为final呢？现在在字段<code>i</code>前面添加<code>final</code>关键字，我们再来看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>这时，当字段为final时，就修改失败了！当然，通过反射可以直接将final修饰符直接去除，去除后，就可以随意修改内容了，我们来尝试修改Integer的value值</p><p>主要思想：获取成员属性之后，获取（定义该属性的字段），类似求导，对“final”进行修改,然后再退一层，对字段进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Integer.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>);<br>    <span class="hljs-comment">//获取类的成员属性：value,进行修改</span><br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">modifiersField</span> <span class="hljs-operator">=</span> Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>    <span class="hljs-comment">//这里要获取Field类的modifiers字段进行修改</span><br>    <br>    modifiersField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//更改！定义！字段权限</span><br>    modifiersField.setInt(field,field.getModifiers()&amp;~Modifier.FINAL);  <br>    <span class="hljs-comment">//去除final标记</span><br><br>    field.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//更改字段的权限</span><br>    field.set(i, <span class="hljs-number">100</span>);   <br>    <span class="hljs-comment">//强行设置值</span><br><br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-4、反射可能对原数据结构进行破坏"><a href="#6-4、反射可能对原数据结构进行破坏" class="headerlink" title="6.4、反射可能对原数据结构进行破坏"></a>6.4、反射可能对原数据结构进行破坏</h3><p>我们可以发现，反射非常暴力，就连被定义为final字段的值都能强行修改，几乎能够无视一切阻拦。我们来试试看修改一些其他的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ReflectiveOperationException &#123;<br>    List&lt;String&gt; i = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> ArrayList.class.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    field.setAccessible(<span class="hljs-literal">true</span>);<br>    field.set(i, <span class="hljs-number">10</span>);<br><br>    i.add(<span class="hljs-string">&quot;测试&quot;</span>);   <span class="hljs-comment">//只添加一个元素</span><br>    System.out.println(i.size());  <span class="hljs-comment">//大小直接变成11</span><br>    i.remove(<span class="hljs-number">10</span>);   <span class="hljs-comment">//瞎移除都不带报错的，淦</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，整个ArrayList体系由于我们的反射操作，导致被破坏，因此它已经无法正常工作了！</p><p>再次强调，在进行反射操作时，必须注意是否安全，虽然拥有了创世主的能力，但是我们不能滥用，我们只能把它当做一个不得已才去使用的工具！</p><hr><h2 id="7、自定义ClassLoader加载类"><a href="#7、自定义ClassLoader加载类" class="headerlink" title="7、自定义ClassLoader加载类"></a>7、自定义ClassLoader加载类</h2><h3 id="7-1、手动-java→class"><a href="#7-1、手动-java→class" class="headerlink" title="7.1、手动.java→class"></a>7.1、手动.java→class</h3><p>我们可以自己手动将class文件加载到JVM中吗？先写好我们定义的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> String text;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(text+<span class="hljs-string">&quot; &gt; 我是测试方法！&quot;</span>+str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过javac命令，手动编译一个.class文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">nagocoler@NagodeMacBook-Pro HelloWorld % javac src/main/java/com/test/Test.java<br></code></pre></td></tr></table></figure><h3 id="7-2、自己创造一个ClassLoader"><a href="#7-2、自己创造一个ClassLoader" class="headerlink" title="7.2、自己创造一个ClassLoader"></a>7.2、自己创造一个ClassLoader</h3><p>编译后，得到一个class文件，我们把它放到根目录下，然后编写一个我们自己的ClassLoader，因为普通的ClassLoader无法加载二进制文件，因此我们编写一个自己的来让它支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个自己的ClassLoader</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span>&#123;<br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; defineClass(String name, <span class="hljs-type">byte</span>[] b)&#123;<br>        <span class="hljs-keyword">return</span> defineClass(name, b, <span class="hljs-number">0</span>, b.length);   <span class="hljs-comment">//调用protected方法，支持载入外部class文件</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">MyClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClassLoader</span>();<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;Test.class&quot;</span>);<br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[stream.available()];<br>    stream.read(bytes);<br>    Class&lt;?&gt; clazz = classLoader.defineClass(<span class="hljs-string">&quot;com.test.Test&quot;</span>, bytes);   <span class="hljs-comment">//类名必须和我们定义的保持一致</span><br>    System.out.println(clazz.getName());   <span class="hljs-comment">//成功加载外部class文件</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们就将此class文件读取并解析为Class了，现在我们就可以对此类进行操作了（注意，我们无法在代码中直接使用此类型，因为它是我们直接加载的），我们来试试看创建一个此类的对象并调用其方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//获取我们定义的test(String str)方法</span><br>    method.invoke(obj, <span class="hljs-string">&quot;哥们这瓜多少钱一斤？&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来试试看修改成员字段之后，再来调用此方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;text&quot;</span>);   <span class="hljs-comment">//获取成员变量 String text;</span><br>    field.set(obj, <span class="hljs-string">&quot;华强&quot;</span>);<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>, String.class);   <span class="hljs-comment">//获取我们定义的test(String str)方法</span><br>    method.invoke(obj, <span class="hljs-string">&quot;哥们这瓜多少钱一斤？&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这种方式，我们就可以实现外部加载甚至是网络加载一个类，只需要把类文件传递即可，这样就无需再将代码写在本地，而是动态进行传递，不仅可以一定程度上防止源代码被反编译（只是一定程度上，想破解你代码有的是方法），而且在更多情况下，我们还可以对byte[]进行加密，保证在传输过程中的安全性。</p><hr><h2 id="8、注解"><a href="#8、注解" class="headerlink" title="8、注解"></a>8、注解</h2><p>其实我们在之前就接触到注解了，比如<code>@Override</code>表示重写父类方法（当然不加效果也是一样的，此注解在编译时会被自动丢弃）注解本质上也是一个类，只不过它的用法比较特殊。</p><p>注解可以被标注在任意地方，包括方法上、类名上、参数上、成员属性上、注解定义上等，就像注释一样，它相当于我们对某样东西的一个标记。而与注释不同的是，注解可以通过反射在运行时获取，注解也可以选择是否保留到运行时。</p><h3 id="8-1、jdk自带的注解"><a href="#8-1、jdk自带的注解" class="headerlink" title="8.1、jdk自带的注解"></a>8.1、jdk自带的注解</h3><p>JDK预设了以下注解，作用于代码：</p><ul><li>@Override - 检查（仅仅是检查，不保留到运行时）该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</li><li>@SuppressWarnings - 指示编译器去忽略注解中声明的警告（仅仅编译器阶段，不保留到运行时）</li><li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li></ul><h3 id="8-2、元注解（注解的注解）"><a href="#8-2、元注解（注解的注解）" class="headerlink" title="8.2、元注解（注解的注解）"></a>8.2、元注解（注解的注解）</h3><p>元注解是作用于注解上的注解，用于我们编写自定义的注解：</p><ul><li>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li><li>@Documented - 标记这些注解是否包含在用户文档中。</li><li>@Target - 标记这个注解应该是哪种 Java 成员。</li><li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li><li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul><p>看了这么多预设的注解，你们肯定眼花缭乱了，那我们来看看<code>@Override</code>是如何定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>该注解由<code>@Target</code>限定为只能作用于方法上，ElementType是一个枚举类型，用于表示此枚举的作用域，一个注解可以有很多个作用域。<code>@Retention</code>表示此注解的保留策略，包括三种策略，在上述中有写到，而这里定义为只在代码中。一般情况下，自定义的注解需要定义1个<code>@Retention</code>和1-n个<code>@Target</code>。</p><h3 id="8-3、自己定义一个注解"><a href="#8-3、自己定义一个注解" class="headerlink" title="8.3、自己定义一个注解"></a>8.3、自己定义一个注解</h3><p>既然了解了元注解的使用和注解的定义方式，我们就来尝试定义一个自己的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们定义一个Test注解，并将其保留到运行时，同时此注解可以作用于方法或是类上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，一个最简单的注解就被我们创建了。</p><h3 id="8-4、关于注解属性的使用"><a href="#8-4、关于注解属性的使用" class="headerlink" title="8.4、关于注解属性的使用"></a>8.4、关于注解属性的使用</h3><h4 id="8-4-1、自定义属性的要点"><a href="#8-4-1、自定义属性的要点" class="headerlink" title="8.4.1、自定义属性的要点"></a>8.4.1、自定义属性的要点</h4><p>我们还可以在注解中定义<strong>一些属性</strong>，注解的属性也叫做成员变量，注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-4-2、默认value可省略"><a href="#8-4-2、默认value可省略" class="headerlink" title="8.4.2、默认value可省略"></a>8.4.2、默认value可省略</h4><p>默认只有一个属性时，我们可以将其名字设定为value，否则，我们需要在使用时手动指定注解的属性名称，使用value则无需填入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>    String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//属性名为test</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-meta">@Test(test = &quot;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//默认属性名为value</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-4-3、属性可以设置默认值（使用便不用传值）"><a href="#8-4-3、属性可以设置默认值（使用便不用传值）" class="headerlink" title="8.4.3、属性可以设置默认值（使用便不用传值）"></a>8.4.3、属性可以设置默认值（使用便不用传值）</h4><p>我们也可以使用default关键字来为这些属性指定默认值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;都看到这里了，给个三连吧！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当属性存在默认值时，使用注解的时候可以不用传入属性值。当属性为数组时呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Test &#123;<br>    String[] value();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-4-4、属性为数组怎么传入"><a href="#8-4-4、属性为数组怎么传入" class="headerlink" title="8.4.4、属性为数组怎么传入"></a>8.4.4、属性为数组怎么传入</h4><p>当属性为数组，我们在使用注解传参时，如果数组里面只有一个内容，我们可以直接传入一个值，如果有多个内容，我们可以传入数组。：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//属性只有1个值</span><br><br><span class="hljs-meta">@Test(&quot;关注点了吗&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//属性有多个值</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-meta">@Test(&#123;&quot;value1&quot;, &quot;value2&quot;&#125;)</span>   <span class="hljs-comment">//多个值时就使用花括号括起来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9、-amp-amp-反射获取注解"><a href="#9、-amp-amp-反射获取注解" class="headerlink" title="9、&amp;&amp;反射获取注解"></a>9、&amp;&amp;反射获取注解</h2><h3 id="9-1、类上的注解"><a href="#9-1、类上的注解" class="headerlink" title="9.1、类上的注解"></a>9.1、类上的注解</h3><p>既然我们的注解可以保留到运行时，那么我们来看看，如何获取我们编写的注解，我们需要用到反射机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-keyword">for</span> (Annotation annotation : clazz.getAnnotations()) &#123;<br>        System.out.println(annotation.annotationType());   <span class="hljs-comment">//获取类型</span><br>        System.out.println(annotation <span class="hljs-keyword">instanceof</span> Test);   <span class="hljs-comment">//直接判断是否为Test</span><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (Test) annotation;<br>        System.out.println(test.value());   <span class="hljs-comment">//获取我们在注解中写入的内容</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-2、方法上的注解"><a href="#9-2、方法上的注解" class="headerlink" title="9.2、方法上的注解"></a>9.2、方法上的注解</h3><p>通过反射机制，我们可以快速获取到我们标记的注解，同时还能获取到注解中填入的值，那么我们来看看，方法上的标记是不是也可以通过这种方式获取注解：</p><p>实际上就多了一个getMethod(“方法名”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>    Class&lt;Student&gt; clazz = Student.class;<br>    <span class="hljs-keyword">for</span> (Annotation annotation : **clazz.getMethod(<span class="hljs-string">&quot;test&quot;</span>)**.getAnnotations()) &#123;<br>        System.out.println(annotation.annotationType());   <span class="hljs-comment">//获取类型</span><br>        System.out.println(annotation <span class="hljs-keyword">instanceof</span> Test);   <span class="hljs-comment">//直接判断是否为Test</span><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (Test) annotation;<br>        System.out.println(test.value());   <span class="hljs-comment">//获取我们在注解中写入的内容</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无论是方法、类、还是字段，都可以使用<code>getAnnotations()</code>方法（还有几个同名的）来快速获取我们标记的注解。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序与搜索算法（Java实现）</title>
    <link href="/2022/06/10/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2022/06/10/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>一些排序算法与搜索算法的个人记录</p><span id="more"></span><h2 id="1、排序算法"><a href="#1、排序算法" class="headerlink" title="1、排序算法"></a>1、排序算法</h2><h3 id="1-1、冒泡排序"><a href="#1-1、冒泡排序" class="headerlink" title="1.1、冒泡排序"></a>1.1、冒泡排序</h3><p><img src="/image/22.06.29/maopao.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//谁大谁去最后面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_01</span>冒泡排序 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>&#125;;<br>        arrange(arr);<br>        <span class="hljs-comment">//操作数组名，static可以直接改变数组值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br><br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arrange</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">//引入数组需要定义,数组名可以和主函数名字相同，static</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">//涉及到[i+1],要进行length-1</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>            <span class="hljs-comment">//减掉外层的i,以进行优化</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                b = <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">//如果已经拍好了，就不继续排序了，以进行优化</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                <span class="hljs-comment">//for中的桥梁变量可以一直int?</span><br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b) &#123;<br>            <span class="hljs-comment">//for中的桥梁变量可以一直int?</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : arr) &#123;<br>            <span class="hljs-comment">//一个级别的for循环一个字母</span><br>            System.out.print(k + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2、插入排序"><a href="#1-2、插入排序" class="headerlink" title="1.2、插入排序"></a>1.2、插入排序</h3><p><img src="/image/22.06.29/charu.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//从左到右的每一个元素从右到左挨个比较，放到对应的位置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_02</span>插入排序 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>&#125;;<br>        arrange(arr);<br>        <span class="hljs-comment">//操作数组名，static可以直接改变数组值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arrange</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &gt;<span class="hljs-number">0</span>;j--) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j]&lt;arr[j-<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> temp=arr[j];<br>                    arr[j]=arr[j-<span class="hljs-number">1</span>];<br>                    arr[j-<span class="hljs-number">1</span>]=temp;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">break</span>;&#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3、选择排序"><a href="#1-3、选择排序" class="headerlink" title="1.3、选择排序"></a>1.3、选择排序</h3><p><img src="/image/22.06.29/xuanze.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//从左到右，与后面最小的进行交换，最小的直接交换最前面（区别于慢慢冒泡的冒泡排序）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_03</span>选择排序 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>&#125;;<br>        arrange3(arr);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : arr)&#123;<br>            System.out.print(i+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arrange3</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> min=arr[i],pos=i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[j]&lt;min)&#123;<br>                    min=arr[j];<br>                    pos=j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">int</span> temp=arr[i];<br>            arr[i]=arr[pos];<br>            arr[pos]=temp;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4、快速排序"><a href="#1-4、快速排序" class="headerlink" title="1.4、快速排序"></a>1.4、快速排序</h3><p><img src="/image/22.06.29/kuaisu.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//递归</span><br><span class="hljs-comment">//不断的把中间值（基准值）放在中间</span><br><br><span class="hljs-comment">//1.找出中间值放在中间，小于中间值的都在左边，大于中间值的都在右边</span><br><span class="hljs-comment">//2.递归的时候不能初始化值，要后进行值的传入</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_04</span>快速排序 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-comment">//已经定义了数组，再进行传值的时候，不用再加[]</span><br>        <span class="hljs-comment">//长度：arr.length   最后一个标号：arr.length-1</span><br>        quickSort(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//&lt; length  ;     &lt;=length-1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//关于数组传入，要进行定义形参</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span>&#123;<br><br>        <span class="hljs-comment">//if语句进行递归的终止</span><br>        <span class="hljs-keyword">if</span> (start &gt;= end) &#123;<span class="hljs-keyword">return</span>;&#125;<br>        <span class="hljs-comment">//在递归内部对函数的变量进行定义</span><br>        <span class="hljs-comment">//两层指针，一个start和end用来明确下一次递归</span><br>        <span class="hljs-comment">// low和high一起进行当前递归</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> arr[start],low=start,high=end;<br>        <span class="hljs-comment">//条件不是start&lt;end,有可能是偶数，所以不用==</span><br>        <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>            <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; k &lt;= arr[high]) &#123;<br>                high--;<br>            &#125;<br>            arr[low] = arr[high];<br>            <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; k &gt;= arr[low]) &#123;<br>                low++;<br>            &#125;<br>            arr[high]=arr[low];<br>        &#125;<br>        arr[high] = k;<br><br>        quickSort(arr,start,high-<span class="hljs-number">1</span>);<br>        quickSort(arr,high+<span class="hljs-number">1</span>,end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、查找算法"><a href="#2、查找算法" class="headerlink" title="2、查找算法"></a>2、查找算法</h2><h3 id="2-1、二分搜索"><a href="#2-1、二分搜索" class="headerlink" title="2.1、二分搜索"></a>2.1、二分搜索</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_05</span>二分搜索 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试用例</span><br>        <span class="hljs-comment">//有序数组</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">26</span>&#125;;<br>        System.out.println(test(arr, <span class="hljs-number">12</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-comment">//实现算法，找到target返回下标，没找到则返回-1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,end = arr.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//明确循环多少次的时候用for,不明确的时候，类似搜索，用while</span><br>        <span class="hljs-keyword">while</span>(start &lt;= end)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end + <span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(arr[mid] == target) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid]&gt;target)&#123;<br>                end=mid-<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid]&lt;target)&#123;<br>                start=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构实现（Java）</title>
    <link href="/2022/06/08/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/06/08/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>对Java数据结构的简单实现（持续更新）</p><span id="more"></span><h1 id="1、线性表"><a href="#1、线性表" class="headerlink" title="1、线性表"></a>1、线性表</h1><h2 id="1-1、线性表抽象类"><a href="#1-1、线性表抽象类" class="headerlink" title="1.1、线性表抽象类"></a>1.1、线性表抽象类</h2><p>(顺序表和链表均继承此抽象类)</p><p>实现功能：获取表长，增，删，查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线性表抽象类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 存储的元素(Element)类型</span><br><span class="hljs-comment"> * 获取长度，增，删，查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_00LineListAbstract</span>&lt;E&gt; &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取表的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 顺序表的长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加一个元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 要添加的位置(索引)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e, <span class="hljs-type">int</span> index)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除指定位置的元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取指定位置的元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-2、顺序表"><a href="#1-2、顺序表" class="headerlink" title="1.2、顺序表"></a>1.2、顺序表</h2><h3 id="1-2-1、顺序表继承抽象类"><a href="#1-2-1、顺序表继承抽象类" class="headerlink" title="1.2.1、顺序表继承抽象类"></a>1.2.1、顺序表继承抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_01ArrayListDooo</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">_00LineListAbstract</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">//得是数组里面元素的多少，不能是数组的长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//size在其他操作中动态变化</span><br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断插入位置是否合法</span><br>        <span class="hljs-keyword">if</span>(index &gt; size)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的位置插入异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//判断数组够不够长</span><br>        <span class="hljs-keyword">if</span>(size &gt;= arr.length)&#123;<br>            Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-built_in">this</span>.arr.length + <span class="hljs-number">10</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.arr.length; i++) &#123;<br>                arr[i] = <span class="hljs-built_in">this</span>.arr[i];<br>            &#125;<br>            <span class="hljs-built_in">this</span>.arr = arr;<br>        &#125;<br><br>        <span class="hljs-comment">//把后面的元素往后移,index是参数,必须倒着来啊！不然就撞了</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i &gt;= index)&#123;<br>            arr[i+<span class="hljs-number">1</span>] = arr[i];<br>            i--;<br>        &#125;<br>        <span class="hljs-comment">//插入</span><br>        arr[index] = e;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//只能删除存在的元素,查看删除位置是否合法</span><br>        <span class="hljs-keyword">if</span> (index &gt; size - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的位置插入异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//前移后面的元素（从index+1开始），不用删除，直接覆盖就行</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) arr[index];<br>        <span class="hljs-keyword">while</span> (i &lt;= size-<span class="hljs-number">1</span>) &#123;<br>            arr[i] = arr[i + <span class="hljs-number">1</span>];<br>            i++;<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//查询index位置的元素</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt;= size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<span class="hljs-string">&quot;无法访问到下标位置&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (E) arr[index];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-2-2、顺序表Main"><a href="#1-2-2、顺序表Main" class="headerlink" title="1.2.2、顺序表Main"></a>1.2.2、顺序表Main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_01ArrayListMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _01ArrayListDooo&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_01ArrayListDooo</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 1</span><br>        list.add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 2 1</span><br>        list.add(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 3 2 1</span><br>        list.add(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 4 3 2 1</span><br>        list.add(<span class="hljs-number">5</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">// 5 4 3 2 1</span><br>        list.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//4 3 2 1</span><br>        System.out.println(list.get(<span class="hljs-number">1</span>));<span class="hljs-comment">//3</span><br>        System.out.println(list.size());<span class="hljs-comment">//4</span><br>        System.out.println(<span class="hljs-string">&quot;debug&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="1-3、链表"><a href="#1-3、链表" class="headerlink" title="1.3、链表"></a>1.3、链表</h2><h3 id="1-3-1、链表继承抽象类"><a href="#1-3-1、链表继承抽象类" class="headerlink" title="1.3.1、链表继承抽象类"></a>1.3.1、链表继承抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_02LinkListDooo</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">_00LineListAbstract</span>&lt;E&gt; &#123;<br><span class="hljs-comment">// 头结点 -&gt; 首结点 -&gt; ........-&gt; 尾结点</span><br><br>    <span class="hljs-comment">//类似&#x27;结点&#x27;结构体</span><br>    <span class="hljs-keyword">static</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt;&#123;<br>        <span class="hljs-comment">//左边，存储的元素</span><br>        <span class="hljs-keyword">private</span> E e;<br>        <span class="hljs-comment">//右边，下一个结点的引用</span><br>        <span class="hljs-keyword">private</span> Node&lt;E&gt; next;<br>        <span class="hljs-comment">//构造方法，创建结点直接赋值</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E e)</span>&#123;<br>            <span class="hljs-built_in">this</span>.e = e;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//创建一个头结点，里面没有值</span><br>    Node&lt;E&gt; head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//链表的长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-comment">//返回链表的长度</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    <span class="hljs-comment">//插入一个结点</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//原理 e1 -&gt; e2 -&gt; e3，插入一个e0变成，e1 -&gt; e0 -&gt; e2 -&gt; e3</span><br>    <span class="hljs-comment">// ① e1 -&gt; e0 ② e0 -&gt; e2</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断对象是否合法，链表不需要扩容，也不需要移动后面的元素，只需要改变指针（在Java中是引用）</span><br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的插入位置！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//前驱节点，一开始什么都没有，前驱节点就是head</span><br>        Node&lt;E&gt; node = head;<br>        <span class="hljs-comment">//暂时先起个名字，一会儿代表后面的结点</span><br>        Node&lt;E&gt; temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br><br>            <span class="hljs-comment">//先让外面的结点移动到对应位置</span><br>            node = node.next;<br><br>            <span class="hljs-comment">//         e0</span><br>            <span class="hljs-comment">//    e1   -&gt;    e2   -&gt;   e3</span><br>            <span class="hljs-comment">//    |          |</span><br>            <span class="hljs-comment">//  (node)     (temp)</span><br><br>        &#125;<br>        temp = node.next;<br>        <span class="hljs-comment">//连接e1与e0</span><br>        node.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(e);<br>        <span class="hljs-comment">//连接e0 与 e2</span><br>        node.next.next = temp;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//删除一个结点</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断对象是否合法</span><br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的插入位置！&quot;</span>);<br>        &#125;<br>        Node&lt;E&gt; node = head,temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            <span class="hljs-comment">//移动指针</span><br>            node = node.next;<br>        &#125;<br><br>        <span class="hljs-comment">//    e1   -&gt;  e2  -&gt;    e3</span><br>        <span class="hljs-comment">//    |                  |</span><br>        <span class="hljs-comment">//   node   (remove)    temp</span><br>        <span class="hljs-comment">//①直接把e1 和 e3进行连接就好，让e1.next = e3.e</span><br>        temp = node.next;<br>        node.next = node.next.next;<br>        size --;<br>        <span class="hljs-keyword">return</span> temp.e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//判断对象是否合法</span><br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法的插入位置！&quot;</span>);<br>        &#125;<br>        Node&lt;E&gt; node = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            node = node.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node.e;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="1-3-2、链表Main"><a href="#1-3-2、链表Main" class="headerlink" title="1.3.2、链表Main"></a>1.3.2、链表Main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_02LinkListMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _02LinkListDooo&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_02LinkListDooo</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        list.add(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>        list.add(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>);<br>        list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(list.get(<span class="hljs-number">1</span>));<br>        System.out.println(list.size());<br>        System.out.println(<span class="hljs-number">1</span>);<span class="hljs-comment">//随便加上一个输出，方便看上一行的调试结果</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-4、栈"><a href="#1-4、栈" class="headerlink" title="1.4、栈"></a>1.4、栈</h2><h3 id="1-4-1、栈抽象类"><a href="#1-4-1、栈抽象类" class="headerlink" title="1.4.1、栈抽象类"></a>1.4.1、栈抽象类</h3><p>实现：入栈操作，出栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象类型栈，待实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 元素类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_03StackAbstract</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 出栈操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 栈顶元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 入栈操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E e)</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="1-4-2、栈抽象类实现"><a href="#1-4-2、栈抽象类实现" class="headerlink" title="1.4.2、栈抽象类实现"></a>1.4.2、栈抽象类实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_03StackDooo</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">_03StackAbstract</span> &#123;<br><br>    <span class="hljs-comment">//用线性表存储</span><br>    <span class="hljs-keyword">private</span> Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">20</span>];<br>    <span class="hljs-comment">//长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//出栈</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (E) arr[(size--)-<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Object e)</span> &#123;<br>        <span class="hljs-comment">//扩容</span><br>        <span class="hljs-keyword">if</span>(size &gt;= arr.length)&#123;<br>            Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-built_in">this</span>.arr.length + <span class="hljs-number">10</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.arr.length; i++) &#123;<br>                arr[i] = <span class="hljs-built_in">this</span>.arr[i];<br>            &#125;<br>            <span class="hljs-built_in">this</span>.arr = arr;<br>        &#125;<br>        <span class="hljs-comment">//赋值的同时给size+1</span><br>        arr[size++] = e;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-4-3、栈Main"><a href="#1-4-3、栈Main" class="headerlink" title="1.4.3、栈Main"></a>1.4.3、栈Main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_03StackMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _03StackDooo&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_03StackDooo</span>&lt;&gt;();<br>        stack.push(<span class="hljs-string">&quot;A&quot;</span>);<br>        stack.push(<span class="hljs-string">&quot;B&quot;</span>);<br>        stack.push(<span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-comment">//pop之后虽然数组没变，但是指针变了，所以后面再来数据会顶替掉，栈是一个你想象出来的数据结构。</span><br>        System.out.println(stack.pop());<br>        System.out.println(stack.pop());<br>        System.out.println(stack.pop());<br>        System.out.println(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-5、队列"><a href="#1-5、队列" class="headerlink" title="1.5、队列"></a>1.5、队列</h2><h3 id="1-5-1、队列抽象类"><a href="#1-5-1、队列抽象类" class="headerlink" title="1.5.1、队列抽象类"></a>1.5.1、队列抽象类</h3><p>实现：入队，出队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_04QueneAbstract</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 进队操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span>;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 出队操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-5-2、队列抽象类实现"><a href="#1-5-2、队列抽象类实现" class="headerlink" title="1.5.2、队列抽象类实现"></a>1.5.2、队列抽象类实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_04QueneDooo</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">_04QueneAbstract</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">//底层数组</span><br>    <span class="hljs-keyword">private</span> Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">20</span>];<br>    <span class="hljs-comment">//队首队尾下标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//   e1  &lt;-  e2  &lt;-  e3  &lt;-  e4</span><br>    <span class="hljs-comment">//  head                    tail</span><br><br>    <span class="hljs-comment">//e5入队：</span><br>    <span class="hljs-comment">//  e1      e2     e3     e4     e5</span><br>    <span class="hljs-comment">// head                         tail</span><br><br>    <span class="hljs-comment">//e1出队：</span><br>    <span class="hljs-comment">//  e2      e3       e4       e5</span><br>    <span class="hljs-comment">// head                      tail</span><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//从队尾进队操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-comment">//取余能让尾巴从0开始循环开始,循环队列并没有真正的将head和tail进行连接，只是通过取余号让数值上进行循环</span><br>        <span class="hljs-comment">//一定要判断，tail不能超越head，next是预测的tail的下一个值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> (tail+<span class="hljs-number">1</span>) % arr.length;<br>        <span class="hljs-keyword">if</span> (next == head) &#123;<br>            <span class="hljs-comment">//要追上了，不行，违规了</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        arr[tail] = e;<br>        tail = next;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//队首出队操作</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//把队首的值存起来</span><br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) arr[head];<br>        <span class="hljs-comment">//移动head指针</span><br>        head = (head+<span class="hljs-number">1</span>) % arr.length;<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-5-3、队列Main"><a href="#1-5-3、队列Main" class="headerlink" title="1.5.3、队列Main"></a>1.5.3、队列Main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_04QueneMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _04QueneDooo&lt;Integer&gt; Quene = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_04QueneDooo</span>&lt;&gt;();<br>        Quene.offer(<span class="hljs-number">123</span>);<br>        Quene.offer(<span class="hljs-number">456</span>);<br>        Quene.offer(<span class="hljs-number">789</span>);<br><br>        System.out.println(Quene.poll());<br>        System.out.println(Quene.poll());<br>        System.out.println(Quene.poll());<br>        System.out.println(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、二叉树"><a href="#2、二叉树" class="headerlink" title="2、二叉树"></a>2、二叉树</h1><h2 id="2-1、二叉树结构"><a href="#2-1、二叉树结构" class="headerlink" title="2.1、二叉树结构"></a>2.1、二叉树结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;E&gt; &#123;<br>    E e;<br>    _05TreeNodeDooo&lt;E&gt; left;<br>    _05TreeNodeDooo&lt;E&gt; right;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">_05TreeNodeDooo</span><span class="hljs-params">(E e)</span>&#123;<br>        <span class="hljs-built_in">this</span>.e = e;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2、二叉树Main"><a href="#2-2、二叉树Main" class="headerlink" title="2.2、二叉树Main"></a>2.2、二叉树Main</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> _13数据结构;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_05TreeNodeMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        _05TreeNodeDooo&lt;String&gt; root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;A&quot;</span>);<br><br>        root.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;B&quot;</span>);<br>        root.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;E&quot;</span>);<br>        root.left.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;C&quot;</span>);<br>        root.left.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;D&quot;</span>);<br>        root.right.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_05TreeNodeDooo</span>&lt;&gt;(<span class="hljs-string">&quot;F&quot;</span>);<br>        preprint(root);<br>        System.out.println();<br>        midprint(root);<br>        System.out.println();<br>        backprint(root);<br>        System.out.println();<br><br>        <span class="hljs-comment">//                 A</span><br>        <span class="hljs-comment">//                / \</span><br>        <span class="hljs-comment">//              B     E</span><br>        <span class="hljs-comment">//             / \     \</span><br>        <span class="hljs-comment">//            C   D     F</span><br><br>    &#125;<br>    <span class="hljs-comment">//先序遍历</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preprint</span><span class="hljs-params">(_05TreeNodeDooo&lt;String&gt; root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">return</span>;&#125;<br>        System.out.print(root.e+<span class="hljs-string">&quot; &quot;</span>);<br>        preprint(root.left);<br>        preprint(root.right);<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">midprint</span><span class="hljs-params">(_05TreeNodeDooo&lt;String&gt; root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">return</span>;&#125;<br>        midprint(root.left);<br>        System.out.print(root.e+<span class="hljs-string">&quot; &quot;</span>);<br>        midprint(root.right);<br>    &#125;<br>    <span class="hljs-comment">//后序遍历</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backprint</span><span class="hljs-params">(_05TreeNodeDooo&lt;String&gt; root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">return</span>;&#125;<br>        backprint(root.left);<br>        backprint(root.right);<br>        System.out.print(root.e+<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL语句练习</title>
    <link href="/2022/06/05/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/06/05/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5%E6%97%A5%E5%B8%B8%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>一套数据库练习流程帮你练习常用SQL语句</p><span id="more"></span><h2 id="1、DDL-创建数据库，创建表"><a href="#1、DDL-创建数据库，创建表" class="headerlink" title="1、DDL(创建数据库，创建表)"></a>1、DDL(创建数据库，创建表)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs SQL">删除数据库<br>创建数据库<br>使用数据库<br><br>创建表<span class="hljs-number">1</span>student:<br>  学号，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），主键不空，备注学号主码<br>  姓名，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），不空，备注学生姓名<br>  性别，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），不空，备注学生性别<br>  生日，时间，备注学生出生年月<br>  班级，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），备注学生所在班级<br>创建表<span class="hljs-number">2</span>course:<br>  课程号，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），主键，非空，备注课程号（主码）<br>  课程名，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），非空，备注课程名称<br>  教师名，<span class="hljs-type">varchar</span>（<span class="hljs-number">20</span>），非空，备注教工编号<br>创建表<span class="hljs-number">3</span>score：<br>  序号，<span class="hljs-type">int</span>,主键，自增，备注主键自增<br>  学号，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注学号<br>  课程号，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注课程号<br>  成绩，从<span class="hljs-number">1</span>到<span class="hljs-number">4</span>，备注成绩<br>创建表<span class="hljs-number">4</span>teacher:<br>  教师号，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),主键非空，备注教工编号（主码）<br>  教师名字，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注教工姓名<br>  性别，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注教工性别<br>  生日，时间，备注教工出生年月<br>  职称（prof）,<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),备注职称<br>  部门，<span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，非空，备注教工所在部门<br>  <br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> `test`;<br><br><span class="hljs-keyword">CREATE</span> DATABASE `test`;<br><br>USE `test`<br><br><br><span class="hljs-comment">-- 表一：student学生use)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student(<br>    sno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学号(主码)&#x27;</span>,<br>    sname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学生姓名&#x27;</span>,<br>    ssex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学生性别&#x27;</span>,<br>    sbirthday DATETIME COMMENT<span class="hljs-string">&#x27;学生出生年月&#x27;</span>,<br>    class <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT<span class="hljs-string">&#x27;学生所在班级&#x27;</span><br>);<br><span class="hljs-comment">-- 表（二）Course（课程表）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> course(<br>    cno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;课程号(主码)&#x27;</span>,<br>    cname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;课程名称&#x27;</span>,<br>    tno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工编号&#x27;</span><br>);<br><span class="hljs-comment">-- 表（三）Score(成绩表)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> score(<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT<span class="hljs-string">&#x27;主键自增&#x27;</span>,<br>    sno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;学号&#x27;</span>,<br>    cno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;课程号&#x27;</span>,<br>    degree <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>) COMMENT<span class="hljs-string">&#x27;成绩&#x27;</span><br>);<br><span class="hljs-comment">-- 表四 teacher(教师表)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> teacher(<br>    tno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工编号(主码)&#x27;</span>,<br>    tname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工姓名&#x27;</span>,<br>    tsex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工性别&#x27;</span>,<br>    tbirthday DATETIME COMMENT<span class="hljs-string">&#x27;教工出生年月&#x27;</span>,<br>    prof <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT<span class="hljs-string">&#x27;职称&#x27;</span>,<br>    depart <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT<span class="hljs-string">&#x27;教工所在部门&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>额外练习对表的修改和删除语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 创建表5以及字段</span><br>  <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `test`.`table5`(<br>   `id` <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;待修改&#x27;</span><br>   `id2` <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;待删除&#x27;</span><br>   );<br><span class="hljs-comment">-- 修改表名</span><br>RENAME <span class="hljs-keyword">TABLE</span> `test`.`table5` <span class="hljs-keyword">TO</span> `test`.`deleting`;<br><span class="hljs-comment">-- 修改字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `test`.`deleting` CHANGE `id` `id` <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;待删除&#x27;</span>;<br><span class="hljs-comment">-- 删除字段id2</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `test`.`deleting` <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> `id2`;<br></code></pre></td></tr></table></figure><h2 id="2、DML（针对数据的控制语言）"><a href="#2、DML（针对数据的控制语言）" class="headerlink" title="2、DML（针对数据的控制语言）"></a>2、DML（针对数据的控制语言）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 学生表数据的插入：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;108&#x27;</span>,<span class="hljs-string">&#x27;曾华&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>),<br>(<span class="hljs-string">&#x27;105&#x27;</span>,<span class="hljs-string">&#x27;匡明&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>),<br>(<span class="hljs-string">&#x27;107&#x27;</span>,<span class="hljs-string">&#x27;王丽&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>),<br>(<span class="hljs-string">&#x27;101&#x27;</span>,<span class="hljs-string">&#x27;李军&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95033&#x27;</span>),<br>(<span class="hljs-string">&#x27;109&#x27;</span>,<span class="hljs-string">&#x27;王芳&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>),<br>(<span class="hljs-string">&#x27;103&#x27;</span>,<span class="hljs-string">&#x27;陆君&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1977-09-01&#x27;</span>,<span class="hljs-string">&#x27;95031&#x27;</span>);<br><span class="hljs-comment">-- 课程表数据的插入：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;计算机导论&#x27;</span>,<span class="hljs-string">&#x27;825&#x27;</span>),<br>(<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;操作系统&#x27;</span>,<span class="hljs-string">&#x27;804&#x27;</span>),<br>(<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;数字电路&#x27;</span>,<span class="hljs-string">&#x27;856&#x27;</span>),<br>(<span class="hljs-string">&#x27;9-888&#x27;</span>,<span class="hljs-string">&#x27;高等数学&#x27;</span>,<span class="hljs-string">&#x27;831&#x27;</span>);<br><span class="hljs-comment">-- 成绩表数据的插入：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> score(sno,cno,degree) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;103&#x27;</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;86&#x27;</span>),<br>(<span class="hljs-string">&#x27;105&#x27;</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;75&#x27;</span>),<br>(<span class="hljs-string">&#x27;109&#x27;</span>,<span class="hljs-string">&#x27;3-245&#x27;</span>,<span class="hljs-string">&#x27;68&#x27;</span>),<br>(<span class="hljs-string">&#x27;103&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;92&#x27;</span>),<br>(<span class="hljs-string">&#x27;105&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;88&#x27;</span>),<br>(<span class="hljs-string">&#x27;109&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;76&#x27;</span>),<br>(<span class="hljs-string">&#x27;101&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;64&#x27;</span>),<br>(<span class="hljs-string">&#x27;107&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;91&#x27;</span>),<br>(<span class="hljs-string">&#x27;108&#x27;</span>,<span class="hljs-string">&#x27;3-105&#x27;</span>,<span class="hljs-string">&#x27;78&#x27;</span>),<br>(<span class="hljs-string">&#x27;101&#x27;</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;85&#x27;</span>),<br>(<span class="hljs-string">&#x27;107&#x27;</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;79&#x27;</span>),<br>(<span class="hljs-string">&#x27;108&#x27;</span>,<span class="hljs-string">&#x27;6-166&#x27;</span>,<span class="hljs-string">&#x27;81&#x27;</span>);<br><span class="hljs-comment">-- 教师表数据的插入：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;804&#x27;</span>,<span class="hljs-string">&#x27;李诚&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1958-12-02&#x27;</span>,<span class="hljs-string">&#x27;副教授&#x27;</span>,<span class="hljs-string">&#x27;计算机系&#x27;</span>),<br>(<span class="hljs-string">&#x27;856&#x27;</span>,<span class="hljs-string">&#x27;张旭&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;1969-03-12&#x27;</span>,<span class="hljs-string">&#x27;讲师&#x27;</span>,<span class="hljs-string">&#x27;电子工程系&#x27;</span>),<br>(<span class="hljs-string">&#x27;825&#x27;</span>,<span class="hljs-string">&#x27;王萍&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1972-05-05&#x27;</span>,<span class="hljs-string">&#x27;助教&#x27;</span>,<span class="hljs-string">&#x27;计算机系&#x27;</span>),<br>(<span class="hljs-string">&#x27;831&#x27;</span>,<span class="hljs-string">&#x27;刘冰&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1977-08-14&#x27;</span>,<span class="hljs-string">&#x27;助教&#x27;</span>,<span class="hljs-string">&#x27;电子工程系&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h2 id="3、DQL-查询语言"><a href="#3、DQL-查询语言" class="headerlink" title="3、DQL(查询语言)"></a>3、DQL(查询语言)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- ===============题目================== </span><br><span class="hljs-comment">-- 1. 查询student表中的所有记录sname，ssex，class</span><br><span class="hljs-keyword">SELECT</span> `sname`,`ssex`,`class` <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 2. 查询所有教师单位不重复的depart列</span><br><br><span class="hljs-comment">-- 第一种方式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `depart` <span class="hljs-keyword">FROM</span> teacher;<br><br><span class="hljs-comment">-- 第二种方式</span><br><span class="hljs-keyword">SELECT</span> `depart` <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `depart`;<br><br><span class="hljs-comment">-- 3.查询student中所有记录</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 4. 查询score中成绩在60(包含)~80(不包含）的列</span><br><br><span class="hljs-comment">-- 第一种方式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree` <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">80</span>;<br><br><span class="hljs-comment">-- 第二种方式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">&gt;=</span><span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> `degree`<span class="hljs-operator">&lt;</span><span class="hljs-number">80</span>;<br><br><span class="hljs-comment">-- 5.查询成绩为85 86 或者88 记录</span><br><br><span class="hljs-comment">-- 第一种方式</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">=</span><span class="hljs-number">85</span> <span class="hljs-keyword">OR</span> `degree`<span class="hljs-operator">=</span><span class="hljs-number">86</span> <span class="hljs-keyword">OR</span> `degree`<span class="hljs-operator">=</span><span class="hljs-number">88</span>;<br><br><span class="hljs-comment">-- 第二种方式</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree` <span class="hljs-keyword">IN</span>(<span class="hljs-number">85</span>,<span class="hljs-number">86</span>,<span class="hljs-number">88</span>);<br><br><span class="hljs-comment">-- 6.查询student表中“95031”班或性别为“女”的同学记录。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> class<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95031&#x27;</span> <span class="hljs-keyword">OR</span> ssex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span>;<br><br><span class="hljs-comment">-- 7. 以class降序查询student表的所有记录。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `class` <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 8.以cno升序、degree降序查询Score表的所有记录。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `cno` <span class="hljs-keyword">ASC</span> , `degree` <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 9.查询“95031”班的学生人数。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(sno) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> class<span class="hljs-operator">=</span>&quot;95031&quot;;<br><br><span class="hljs-comment">-- 10. 查询Score表中的最高分的sno和cno。（子查询或者排序）</span><br><br><span class="hljs-comment">-- 子查询方式</span><br><span class="hljs-keyword">SELECT</span> `sno`,`cno` <span class="hljs-keyword">FROM</span> score<br><span class="hljs-keyword">WHERE</span> degree <span class="hljs-operator">=</span>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(`degree`) <span class="hljs-keyword">FROM</span> score<br>);<br><br><span class="hljs-comment">-- 排序</span><br><span class="hljs-keyword">SELECT</span> `sno`,`cno` <span class="hljs-keyword">FROM</span> score<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> degree <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br><br><br><span class="hljs-comment">-- 11.查询每门课的cno、总人数、平均成绩。</span><br><span class="hljs-keyword">SELECT</span> `cno`,<span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总人数&#x27;</span>,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `cno`;<br><br><br><span class="hljs-comment">-- 12.查询Score表中至少有5名学生选修的并以3开头的课程号的cno、总人数、平均分。</span><br><span class="hljs-keyword">SELECT</span> s.`cno`,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总人数&#x27;</span>,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> score  <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> course <span class="hljs-keyword">AS</span> c<br><span class="hljs-keyword">ON</span> c.`cno` <span class="hljs-operator">=</span> s.`cno`<br><span class="hljs-keyword">WHERE</span> c.`cno` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;3%&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c.`cno`<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span>;<br><br><span class="hljs-comment">-- 13.查询分数大于70，小于90的sno、degree。</span><br><br><span class="hljs-keyword">SELECT</span> `sno`,`degree` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">&gt;</span><span class="hljs-number">70</span> <span class="hljs-keyword">AND</span> `degree`<span class="hljs-operator">&lt;</span><span class="hljs-number">90</span>;<br><br><span class="hljs-comment">-- 14.查询所有学生的sname、cno和degree列。(多表查询)</span><br><br><span class="hljs-comment">-- 第一种方式</span><br><span class="hljs-keyword">SELECT</span> `sname`,`cno`,`degree` <span class="hljs-keyword">FROM</span> student,score<br><span class="hljs-keyword">WHERE</span> student.`sno`<span class="hljs-operator">=</span> score.`sno`;<br><br><span class="hljs-comment">-- 第二种方式：联合查询</span><br><span class="hljs-keyword">SELECT</span> `sname`,`cno`,`degree` <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score sc<br><span class="hljs-keyword">ON</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`;<br><br><br><span class="hljs-comment">-- 15.查询所有学生的sno、cname和degree列（如果学生没有cname 和 degree 也需要查询出来)。</span><br><br><span class="hljs-keyword">SELECT</span> sc.`sno`,`cname`,`degree` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">AS</span> sc<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> course <span class="hljs-keyword">AS</span> c<br><span class="hljs-keyword">ON</span> sc.`cno`<span class="hljs-operator">=</span>c.`cno`;<br><br><span class="hljs-comment">-- 16.查询“95033”班学生的cno,平均分(子查询和多表查询)。</span><br><br><span class="hljs-comment">-- 多表查询方式一</span><br><span class="hljs-keyword">SELECT</span> `cno`,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score sc<br><span class="hljs-keyword">ON</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`<br><span class="hljs-keyword">WHERE</span> `class`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95033&#x27;</span>;<br><br><span class="hljs-comment">-- 多表查询方式二</span><br><span class="hljs-keyword">SELECT</span> cno,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> score,student<br><span class="hljs-keyword">WHERE</span> score.`sno`<span class="hljs-operator">=</span>student.`sno` <span class="hljs-keyword">AND</span> student.`class`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95033&#x27;</span>;<br><br><span class="hljs-comment">-- 子查询</span><br><span class="hljs-keyword">SELECT</span> cno,<span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> score <br><span class="hljs-keyword">WHERE</span> sno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `sno` <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> `class`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;95033&#x27;</span><br>);<br><br><br><span class="hljs-comment">-- 17.查询课程号为“3-105”课程且学号为“109”号同学成绩的记录（子查询和多边查询）。</span><br><br><span class="hljs-comment">-- 子查询</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <br><span class="hljs-keyword">WHERE</span> sno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `sno` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `cno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> `sno`<span class="hljs-operator">=</span><span class="hljs-number">109</span><br>);<br><br><span class="hljs-comment">-- 多表查询</span><br><br><span class="hljs-comment">-- 方式一</span><br><span class="hljs-keyword">SELECT</span> s.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s <br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc<br><span class="hljs-keyword">ON</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`<br><span class="hljs-keyword">WHERE</span> `cno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> sc.`sno`<span class="hljs-operator">=</span><span class="hljs-number">109</span>;<br><br><span class="hljs-comment">-- 方式二</span><br><span class="hljs-keyword">SELECT</span> s.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s,score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">WHERE</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`  <span class="hljs-keyword">AND</span> `cno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> sc.`sno`<span class="hljs-operator">=</span><span class="hljs-number">109</span>;<br><br><br><span class="hljs-comment">-- 18.查询score中选学2门课程的同学的sno、总成绩(且按照总成绩降序排序)。</span><br><span class="hljs-keyword">SELECT</span> `sno`,<span class="hljs-built_in">SUM</span>(`degree`) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总成绩&#x27;</span> <span class="hljs-keyword">FROM</span> score <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `sno`<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(`sno`)<span class="hljs-operator">=</span><span class="hljs-number">2</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">SUM</span>(`degree`) <span class="hljs-keyword">DESC</span><br><br><span class="hljs-comment">-- 19.查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。</span><br><br><span class="hljs-comment">-- 子查询</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">&gt;</span>(<br> <span class="hljs-keyword">SELECT</span> `degree` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span>  `sno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;109&#x27;</span> <span class="hljs-keyword">AND</span> `cno`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3-105&#x27;</span><br>);<br><br><br><span class="hljs-comment">-- 20.查询和学号为108的同学同年出生的所有学生的sno、sname和sbirthday列。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> `sbirthday` <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `sbirthday` <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;108&#x27;</span><br>);<br><br><br><span class="hljs-comment">-- 21. 获取“张旭&quot;教师所交课程课程号以及课程名</span><br><br><span class="hljs-keyword">SELECT</span> `cno`,`cname` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">AS</span> c<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> teacher <span class="hljs-keyword">AS</span>  t<br><span class="hljs-keyword">ON</span> t.`tno`<span class="hljs-operator">=</span>c.`tno`<br><span class="hljs-keyword">WHERE</span> t.`tname`<span class="hljs-operator">=</span>&quot;张旭&quot;;<br><br><br><span class="hljs-comment">-- 21.查询“张旭“教师任课的学生成绩（姓名）。</span><br><br><span class="hljs-comment">-- 方式一</span><br><span class="hljs-keyword">SELECT</span> `sname`,`degree` <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> score<br><span class="hljs-keyword">ON</span> student.`sno`<span class="hljs-operator">=</span>score.`sno`<br><span class="hljs-keyword">WHERE</span> score.sno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> s.`sno` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">AS</span> c <br>  <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> teacher <span class="hljs-keyword">AS</span> t<br>  <span class="hljs-keyword">ON</span> c.`tno`<span class="hljs-operator">=</span>t.`tno`<br>  <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc<br>  <span class="hljs-keyword">ON</span> sc.`cno`<span class="hljs-operator">=</span>c.`cno`<br>  <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> student  <span class="hljs-keyword">AS</span> s<br>  <span class="hljs-keyword">ON</span> s.`sno`<span class="hljs-operator">=</span>sc.`sno`<br>  <span class="hljs-keyword">WHERE</span> t.`tname`<span class="hljs-operator">=</span>&quot;张旭&quot;<br>);<br><br><span class="hljs-comment">-- 方式二</span><br><span class="hljs-keyword">SELECT</span> `sname`,`degree` <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> score<br><span class="hljs-keyword">ON</span> student.`sno`<span class="hljs-operator">=</span>score.`sno`<br><span class="hljs-keyword">WHERE</span> score.sno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> s.sno <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s,score <span class="hljs-keyword">AS</span> sc<br>  <span class="hljs-keyword">WHERE</span> sc.`sno`<span class="hljs-operator">=</span>s.`sno` <span class="hljs-keyword">AND</span> cno <span class="hljs-keyword">IN</span>(<span class="hljs-keyword">SELECT</span> cno <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">AS</span> c,teacher <span class="hljs-keyword">AS</span> t <span class="hljs-keyword">WHERE</span> c.`tno`<span class="hljs-operator">=</span>t.`tno` <span class="hljs-keyword">AND</span> t.`tname`<span class="hljs-operator">=</span>&quot;张旭&quot;)<br>);<br><br><br><span class="hljs-comment">-- 22 查询考计算机导论的学生成绩（子查询)</span><br><span class="hljs-keyword">SELECT</span> `degree` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `cno` <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `cno` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> cname<span class="hljs-operator">=</span>&quot;计算机导论&quot;<br>);<br><br><span class="hljs-comment">-- 23.教高等数学的老师是叫什么，哪个系的(子查询)</span><br><span class="hljs-keyword">SELECT</span> `tname`,`depart` <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> `tno` <span class="hljs-keyword">IN</span>(<br>    <span class="hljs-keyword">SELECT</span> `tno` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> `cname`<span class="hljs-operator">=</span>&quot;高等数学&quot;<br>);<br><br><br><span class="hljs-comment">-- 24.查询所有教师和同学的name、sex和birthday.(联合查询)</span><br><span class="hljs-keyword">SELECT</span> t.`tname` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;name&#x27;</span>,t.`tsex` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;sex&#x27;</span>,t.`tbirthday` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;birthday&#x27;</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">AS</span> t<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> s.`sname`,s.`ssex`,s.`sbirthday`  <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> s;<br><br><br><span class="hljs-comment">-- 25.查询选修某课程的同学人数多于5人的教师姓名(子查询)。</span><br><span class="hljs-keyword">SELECT</span> `tname` <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> tno <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> `tno` <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> `cno` <span class="hljs-keyword">IN</span>(<br>    <span class="hljs-keyword">SELECT</span> `cno` <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `cno` <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(`sno`)<span class="hljs-operator">&gt;=</span><span class="hljs-number">5</span><br>  )<br>);<br><br><br><span class="hljs-comment">-- 26查询最高分同学的Sno、Cno和Degree列(子查询）。</span><br><br> <span class="hljs-keyword">SELECT</span> `sno`,`cno`,`degree` <span class="hljs-keyword">FROM</span>  score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">=</span>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(`degree`) <span class="hljs-keyword">FROM</span> score<br> );<br> <br> <br> <span class="hljs-comment">-- 27.查询Student表中不姓“王”的同学记录。</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> sno <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span>(<br>  <span class="hljs-keyword">SELECT</span> sno <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> `sname` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;王%&#x27;</span><br> );<br> <br> <br> <span class="hljs-comment">-- 28.查询Student表中每个学生的姓名和年龄。</span><br><span class="hljs-keyword">SELECT</span> `sname`,  <span class="hljs-built_in">FLOOR</span>(DATEDIFF(CURDATE(),`sbirthday`)<span class="hljs-operator">/</span><span class="hljs-number">365.2422</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;年龄&#x27;</span> <span class="hljs-keyword">FROM</span> student; <br> <br><br> <br><span class="hljs-comment">-- 29.查询所有任课教师的Tname和Depart.</span><br><span class="hljs-keyword">SELECT</span> `tname`,`depart` <span class="hljs-keyword">FROM</span> teacher;<br><br><br><span class="hljs-comment">-- 30.查询所有成绩比3-105课程平均成绩低的同学的成绩表。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> `degree`<span class="hljs-operator">&lt;</span>(<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(`degree`) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> cno<span class="hljs-operator">=</span>&quot;3-105&quot;<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Linux环境变量每次要source /etc/profile问题</title>
    <link href="/2022/06/03/%E8%A7%A3%E5%86%B3Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AF%8F%E6%AC%A1%E8%A6%81source-etc-profile%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/03/%E8%A7%A3%E5%86%B3Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AF%8F%E6%AC%A1%E8%A6%81source-etc-profile%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Linux的profile与权限相关问题</p><span id="more"></span><blockquote><p><strong>问题：</strong></p></blockquote><p>在&#x2F;etc&#x2F;profile中添加环境变量后，是使用<code>source /etc/profile</code>编译后只能在当前终端生效；重新开启一个终端后，该环境变量失效。</p><p>每次使用交叉编译链之前都要进行<code>source /etc/profile</code>才能进行编译</p><blockquote><p><strong>解决方法</strong></p></blockquote><p>使用<code>su - root</code>进入系统instead of <code>su</code>问题解决；</p><p>因为设置的环境变量，并没有真正生效，只是使用source 命令让临时运行而已。</p><blockquote><p><strong>原理上解析Linux中sudo,su与su -的异同</strong></p></blockquote><p>在linux系统中，由于root的权限过大，一般情况都不使用它。只有在一些特殊情况下才采用登录root执行管理任务，一般情况下临时使用root权限多采用su和sudo命令。<br><br></br></p><h3 id="su-命令（切换工作目录）："><a href="#su-命令（切换工作目录）：" class="headerlink" title="su - 命令（切换工作目录）："></a>su - 命令（切换工作目录）：</h3><p>su -，su -l或su –login 命令改变身份时，也同时变更工作目录，以及HOME，SHELL，USER，LOGNAME。此外，也会变更PATH变量。用su -命令则默认转换成成root用户了。</p><h3 id="su-命令："><a href="#su-命令：" class="headerlink" title="su 命令："></a>su 命令：</h3><p>su为switch user，即切换用户的简写。</p><p>格式为两种：</p><p>su -l USERNAME（-l为login，即登陆的简写）</p><p>su USERNAME</p><p>如果不指定USERNAME（用户名），默认即为root，所以切换到root的身份的命令即为：su -root或su -，su root 或su。</p><h3 id="su-USERNAME，与su-USERNAME的不同之处如下："><a href="#su-USERNAME，与su-USERNAME的不同之处如下：" class="headerlink" title="su USERNAME，与su - USERNAME的不同之处如下："></a>su USERNAME，与su - USERNAME的不同之处如下：</h3><p>su - USERNAME切换用户后，同时切换到新用户的工作环境中。</p><p>su USERNAME切换用户后，不改变原用户的工作目录，及其他环境变量目录。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo - Fluid</title>
    <link href="/2022/06/01/hello-world/"/>
    <url>/2022/06/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>记录Hexo框架使用和主题修改过程。</p><span id="more"></span><h2 id="1、搭建博客"><a href="#1、搭建博客" class="headerlink" title="1、搭建博客"></a>1、搭建博客</h2><p><a href="https://zhuanlan.zhihu.com/p/149300984">https://zhuanlan.zhihu.com/p/149300984</a></p><h3 id="1-1、安装NodeJS、Git、NPM、Hexo"><a href="#1-1、安装NodeJS、Git、NPM、Hexo" class="headerlink" title="1.1、安装NodeJS、Git、NPM、Hexo"></a>1.1、安装NodeJS、Git、NPM、Hexo</h3><p>更换npm淘宝镜像源</p><p><img src="/images/pasted-1.png" alt="upload successful"></p><h3 id="1-2、Hexo初始化、运行"><a href="#1-2、Hexo初始化、运行" class="headerlink" title="1.2、Hexo初始化、运行"></a>1.2、Hexo初始化、运行</h3><p>用管理员权限打开cmd,进入文件夹进行hexo初始化：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">E:<br><br>cd E:\Git合集\Github\Blog<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java">hexo init <span class="hljs-comment">//初始化</span><br><br>hexo s  <span class="hljs-comment">//打开本地服务器</span><br><br>可以进入：localhost:<span class="hljs-number">4000</span> <span class="hljs-comment">//进入本地博客</span><br><br>ctrl+c <span class="hljs-comment">//关闭本地服务器</span><br><br>hexo n <span class="hljs-string">&quot;blog name&quot;</span><span class="hljs-comment">//本地创建博客</span><br><br></code></pre></td></tr></table></figure><h2 id="2、创建博客、上传到本地"><a href="#2、创建博客、上传到本地" class="headerlink" title="2、创建博客、上传到本地"></a>2、创建博客、上传到本地</h2><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>把写好的文件上传到本地服务器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">hexo clean   <span class="hljs-comment">//清理</span><br>hexo g    <span class="hljs-comment">//生成</span><br>hexo s <span class="hljs-comment">//上传本地服务器</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
